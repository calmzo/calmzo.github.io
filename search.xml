<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>收藏夹【自用】</title>
      <link href="/posts/5a65df3b.html"/>
      <url>/posts/5a65df3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收藏夹【自用】"><a href="#收藏夹【自用】" class="headerlink" title="收藏夹【自用】"></a>收藏夹【自用】</h1><hr><h2 id="1、PHP"><a href="#1、PHP" class="headerlink" title="1、PHP"></a>1、PHP</h2><ul><li>知乎：对 <a href="https://zhuanlan.zhihu.com/p/58165332">PHP 变量的实现方式以及内存管理的梳理</a></li><li>公众号 PHP 饭米粒：<a href="https://mp.weixin.qq.com/s/SDYKwGUdk85v58WHzVJE_A">【PHP7 源码分析】PHP 中 $_POST 揭秘</a></li><li><a href="https://github.com/nineyang/clean-php-code">Clean PHP Code</a> （2017-10-23）</li><li><a href="https://segmentfault.com/a/1190000022269173">史上最全 PHPStorm Xdebug 断点调试 Docker 环境下 PHP 教程</a> （2020-04-05）</li><li>公众号 码农心得：<a href="https://mp.weixin.qq.com/s/p1FvhfScfklY8LCEtGg2Mg">理解 PHP 8 中的 Attributes (注解)</a> （2020-06-11）</li><li>惠新辰：<a href="https://www.laruence.com/2020/07/09/6015.html">一个关于 if else 容易迷惑的问题</a></li><li>公众号 码农 UP2U：<a href="https://mp.weixin.qq.com/s/It9Thtz20rSQ3Z4u_3rl6g">PHP 代码混淆处理思路</a> （2020-07-11）</li><li>分享一些 <a href="https://segmentfault.com/a/1190000040084826">PHP 中有用的知识和坑</a> （2021-05-29）</li><li><a href="https://github.com/alexeymezenin/laravel-best-practices/blob/master/chinese.md">Laravel 最佳实践</a></li></ul><h2 id="2、数据库"><a href="#2、数据库" class="headerlink" title="2、数据库"></a>2、数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>公众号 Python 那些事： <a href="https://mp.weixin.qq.com/s/9S59a7jjQEn42PFXqpiuIw">一通骚操作，我把 SQL 执行效率提高了 10000000 倍！</a> （2019-06-02）索引优化相关</li><li>公众号 帅地玩编程：<a href="https://mp.weixin.qq.com/s/IZRKPH4FYPR-mltim6J7hA">面试官：MySQL 中的自增主键用完了怎么办？</a> （2019-08-23）</li><li>公众号 Java 知识共享：<a href="https://mp.weixin.qq.com/s/LWEs7tSkapGQ_WE6zYhjDg">关于定时备份 MySQL 数据库，如何操作？</a> （2019-09-17）</li><li>公众号 架构师之路：<a href="https://mp.weixin.qq.com/s/AwAEJVWtYfiy79jXGC7olA">或许你不知道的 12 条 SQL 技巧</a> （2020-03-26）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/vXnG1SVYeybaLeGGVnh2vA">拜托，别再问我什么是 B+ 树了</a> （2020-04-07）</li><li>公众号 算法爱好者：<a href="https://mp.weixin.qq.com/s/pRqXdWYyhQD0x_NAdQLyHA">为什么别人能用好 MySQL？万字详解其复杂原理</a> （2020-04-18）InnoDB 详解</li><li>公众号 莲花童子哪吒：<a href="https://mp.weixin.qq.com/s/D38PLc6LWMbj7tyEorCCcQ">抱歉，索引原理都知道，让我优化就很苦恼。这才明白原理要这样用！</a> （2020-04-22）</li><li>MySql 学习笔记（二）：<a href="https://blog.51cto.com/u_13593129/2357192">SQL 执行顺序</a></li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/F1EY0hY9WrzmeRp3C5C9Pw">别再一知半解啦，索引其实就这么回事！</a> （2020-06-20）</li><li>Mysql - <a href="http://www.linkedkeeper.com/1690.html">慢 sql 优化方法论</a> （2020-07-07）</li><li>公众号 InfoQ：<a href="https://mp.weixin.qq.com/s/XCSvDx90ml3uDkwBah8XsQ">别再用 OFFSET 和 LIMIT 分页了</a> （2020-08-14）</li><li><a href="https://juejin.cn/post/6901488402353520647">数据库允许空值 (null)，往往是悲剧的开始</a> （2020-12-02）</li><li>公众号 开源中国：<a href="https://mp.weixin.qq.com/s/i73OVvQ1WT55aUJ68EELRQ">算法的艺术：MySQL order by 对各种排序算法的巧用</a> （2021-03-05）</li><li>公众号 阿里开发者：<a href="https://mp.weixin.qq.com/s/Whx50KNUuXORO05bi7PECw">一文详解 SQL 关联子查询</a> （2021-03-29）</li><li>公众号 架构师技术栈：<a href="https://mp.weixin.qq.com/s/WLxQAIW8nL6KoqWNIM1IaQ">为什么 MySQL 默认值为 null，它不推荐？</a> （2021-04-15）</li><li>公众号 架构师技术栈：<a href="https://mp.weixin.qq.com/s/37SXgXqaP-j1OmdcTUNUOg">为什么大家都说 SELECT * 效率低</a> （2021-06-09）</li><li>公众号 编程界：<a href="https://mp.weixin.qq.com/s/hBg1kAacQPqHupARav9kNw">MySQL 时间戳类型真的了解吗？早看早避坑！</a> （2021-06-09）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/O_C5DpqWlCHLGphy-W00yg">MySQL 避坑指南之隐式数据类型转换</a> （2021-06-23）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/l6F6kABHHmyq5qsK55s9eA">MySQL 中的共享表空间与独立表空间，用哪个好呢？</a> （2021-07-16）</li><li>公众号 架构师专栏：<a href="https://mp.weixin.qq.com/s/YTlnKTopYB7T40nMrtty4g">MySQL 大批量插入，如何过滤掉重复数据？</a> （2021-07-19）</li><li>公众号 架构师专栏：<a href="https://mp.weixin.qq.com/s/fUAKMjqjklrTg1692k_Adw">面试官：如果要存 ip 地址，用什么数据类型比较好</a> （2021-08-11）</li><li>公众号 架构师专栏：<a href="https://mp.weixin.qq.com/s/2GXv4DThjY7gwBaTHpoexQ">4 款 MySQL 调优工具，公司大神都在用</a> （2021-08-18）</li><li>公众号 Linux 爱好者：步步深入：<a href="https://mp.weixin.qq.com/s/5LEc99nUOSOo7vgBdmaLcg">MySQL 架构总览 -&gt; 查询执行流程 -&gt;SQL 解析顺序</a> （2021-09-11）</li><li>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/IQyRiGxQt6wCMuPHeMnnlA">执行一条 SQL 语句，期间发生了什么？</a> （2022-06-09）</li><li>今日头条：<a href="https://www.toutiao.com/article/7103554562748973568/?app=news_article&timestamp=1655016253&use_new_style=1&req_id=202206121444120101420341590290D42B&group_id=7103554562748973568&share_token=DE693EE4-2A01-459A-9AD3-B069C584FE31&tt_from=weixin&utm_source=weixin&utm_medium=toutiao_ios&utm_campaign=client_share&wxshare_count=1&source=m_redirect&wid=1660659705935">3000 帧动画图解 MySQL 为什么需要 binlog、redo log 和 undo log</a> （2022-05-31）</li></ul><h3 id="数据库规范"><a href="#数据库规范" class="headerlink" title="数据库规范"></a>数据库规范</h3><ul><li><p>公众号 NodeJs 技术栈： <a href="https://mp.weixin.qq.com/s/8XO9TF4BhAxWv90HiPfOvw">数据库范式那些事</a> （2019-11-28）</p></li><li><p>公众号 运维咖啡吧：<a href="https://mp.weixin.qq.com/s/zfR5kn1tejVSiH-mireT3A">专业的 MySQL 开发规范</a> （2019-09-20）</p></li><li><p>公众号 程序猿：<a href="https://mp.weixin.qq.com/s/NZU_79laolqkY1m3jThz6w">公司用的 MySQL 团队开发规范</a> （2021-11-18）</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3></li><li><p>公众号 腾讯技术工程：<a href="https://mp.weixin.qq.com/s/xQDYaunRK-JMY7hoxN6PAQ">redis 实践及思考</a> （2019-08-21）</p></li><li><p>公众号 DUBBO 之家：<a href="https://mp.weixin.qq.com/s/Pz2o5gn-DfbrDvvOZrdGGg">了解什么是 Redis 的雪崩、穿透和击穿？Redis 崩溃之后会怎么样？系统该如何应对这种情况？如何处理 Redis 的穿透？</a> （2019-09-17）</p></li><li><p>敖丙：<a href="https://segmentfault.com/a/1190000022029639">Redis 缓存雪崩、击穿、穿透</a></p></li><li><p>公众号 Linux 爱好者：<a href="https://mp.weixin.qq.com/s/LawRPLTSUFQwZU_MKLZEZA">什么是缓存系统三座大山</a> （2020-07-19）</p></li><li><p>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/qqBhH8jieIeIQcJRRI5MJA">Redis 会遇到的 15 个「坑」，你踩过几个？</a> （2021-04-07）</p><h3 id="其他-分库分表"><a href="#其他-分库分表" class="headerlink" title="其他 分库分表"></a>其他 分库分表</h3></li><li><p>公众号 数据库技术详谈：<a href="https://mp.weixin.qq.com/s/B4JwxxkJkLVaorNm0L5fCQ">说说分库分表的一个最佳实践</a> （2019-04-01）</p></li><li><p>公众号 石杉的架构笔记：<a href="https://mp.weixin.qq.com/s/cUsWHOS-MeJQN0yfzBzeAw">盘点分库分表中，你一定要避开的那些坑！</a> （2019-09-15）</p></li><li><p>公众号 架构师之路： <a href="https://mp.weixin.qq.com/s/H_2hyEqQ70Y_OoFZh_P_5A">炸！业界难题，跨库分页的几种常见方案</a> （2019-05-13）</p></li><li><p>公众号 方志朋：<a href="https://mp.weixin.qq.com/s/g7anCRM58EFMXKNdbMlWzA">不用找了，大厂在用的分库分表方案，都在这了！</a> （2019-09-21）</p></li><li><p>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/goY6xmOVgKTd4-iX3MVbpA">这也许是史上最详尽的分库分表文章之一</a> （2021-06-12）</p></li><li><p>公众号 阿里开发者：<a href="https://mp.weixin.qq.com/s/X6FI9Ci7ZXGDNDCkh2VnNA">浅谈分库分表那些事儿</a> （2021-03-22）</p></li><li><p>公众号 架构师专栏：<a href="https://mp.weixin.qq.com/s/yEgrhVQL3vORVatG2Lo89A">老大又怼我，不要动不动，就提 “分库分表”</a> （2021-07-21）</p><h3 id="隔离级别、锁"><a href="#隔离级别、锁" class="headerlink" title="隔离级别、锁"></a>隔离级别、锁</h3></li><li><p>公众号 Java 技术江湖：<a href="https://mp.weixin.qq.com/s/z7IgL8TkcIhyFl7ApvrKFg">一文带你轻松搞懂事务隔离级别 (图文详解)</a> （2019-05-14）</p></li><li><p>公众号 Java 技术：<a href="https://mp.weixin.qq.com/s/TrPM7b3RFYRk-SzxEHm5lA">图文并茂讲解悲观锁与乐观锁</a> （2019-06-26）<br><a href="https://segmentfault.com/a/1190000020762791">MySQL 的又一神器 - 锁，MySQL 面试必备</a> （2019-10-22）</p></li></ul><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul><li>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/ac-5nMb9ZM8dqlVjZ-A6hw">2 万字详解，吃透 ES！</a> （2022-06-27）</li></ul><h2 id="3、架构"><a href="#3、架构" class="headerlink" title="3、架构"></a>3、架构</h2><ul><li>公众号 <a href="https://mp.weixin.qq.com/s/2QM2vTjevpKeZ5jy3Ss95g">喔家 ArchiSelf： 软件架构的 10 个常见模式</a></li><li>公众号 编程原理：<a href="https://mp.weixin.qq.com/s/qaj37YYxz7afD-WfAZeN8Q">高并发编程知识体系</a></li><li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md">《后端架构师技术图谱》</a></li><li>公众号 有赞 coder ：<a href="https://mp.weixin.qq.com/s/26x8O1bRzurl84e3nM6TTA">CAP 一致性协议及应用解析</a> （2019-01-23）</li><li>公众号 喔家 ArchiSelf：<a href="https://mp.weixin.qq.com/s/gV7DqSgSkz_X56p2X_x_cQ">CAP 理论与分布式系统设计</a> （2018-01-22）</li><li>公众号 Linux 爱好者：<a href="https://mp.weixin.qq.com/s/1xWnduMOgUeITA715sC1UA">架构设计之「 CAP 定理 」</a>（2019-05-05）</li><li>公众号 阿里开发者：<a href="https://mp.weixin.qq.com/s/muS68_vtXTrIGd1JNmS50A">揭秘！现代 IM 系统的消息架构如何设计？</a> （2019-05-06）</li><li>掘金：<a href="https://juejin.cn/post/6844903847031226382">如何设计一个百万级用户的抽奖系统？</a> （2019-05-20）</li><li>知乎：[Feed 流系统设计 - 总纲] (<a href="https://zhuanlan.zhihu.com/p/72882547">https://zhuanlan.zhihu.com/p/72882547</a>)</li><li>公众号 架构师之路：<a href="https://mp.weixin.qq.com/s/QSpBDlW1KktJ8iHaYcO2rw">并发扣款，如何保证数据的一致性？</a> （2019-08-29）</li><li>公众号 架构师之路：<a href="https://mp.weixin.qq.com/s/WSocbTKWYBqOSfimdfm_JA">每秒 100W 请求，12306 秒杀业务，架构如何优化？</a> （2019-09-09）</li><li>公众号 架构师之路：<a href="https://mp.weixin.qq.com/s/mvFwjgxliwx808Hn_9ruEA">10w 定时任务，如何高效触发超时</a> （2017-03-09）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/RwiPfMTj2MR2x0g8riWjXw">1 分钟抗住 10 亿请求！某些 App 是怎么做到的？）</a> （2020-03-29）</li><li><a href="https://blog.csdn.net/dreamdiary/article/details/91555532">可自由扩展的促销活动架构设计</a></li><li><a href="https://skrshop.tech/">电商设计手册</a></li><li><a href="https://segmentfault.com/a/1190000022566350">什么，秒杀系统也有这么多种！</a> （2020-05-07）</li><li>敖丙：<a href="https://segmentfault.com/a/1190000023517939">秒杀系统设计</a> （2020-08-06）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/l1zxZncpJ-ay4eM7oWl4EQ">双十一的秒杀场景是如何设计的？</a> （2020-11-11）</li><li><a href="https://blog.csdn.net/csdnnews/article/details/108231736">揭秘广告系统架构</a> （2020-08-25）</li><li>公众号 产品壹佰开课吧：腾讯工作心得：<a href="https://mp.weixin.qq.com/s/IfFNx-nDTydSH1MojUZILA">统一登录的几种常用设计模式</a> （2021-01-17）</li><li>公众号 CSDN：<a href="https://mp.weixin.qq.com/s/YLBXAdNkWntDwe0KU6K0zQ">10 张图带你彻底搞懂限流、熔断、服务降级</a> （2021-03-30）</li><li>公众号 阿里开发者：我在架构设计和代码开发中的一些常用原则（2021-03-19）</li><li>公众号 人人都是面试官：系统设计之路：如何设计一个 URL 短链服务（2021-04-30）</li><li><a href="https://www.nowcoder.com/discuss/568601?from=kaifazhe0630">后台服务器开发高性能最佳实践</a> （2020-11-20）</li><li>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/6RXONiWRb5GmFN9VV14m_Q">支付中心设计与方案</a> （2021-09-03）</li><li>公众号 水滴与银弹：<a href="https://mp.weixin.qq.com/s/T6mMDdtTfBuIiEowCpqu6Q">搞懂异地多活，看这篇就够了</a> （2021-10-15）</li><li>公众号 程序员的那些事：<a href="https://mp.weixin.qq.com/s/EkDSeTuYfsBexOiNg6NleQ">万字详解秒杀系统！</a> （2021-11-15）</li><li><a href="8c2bfe31.html">系统设计入门</a></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote><ul><li>原文作者：MArtian</li><li>转自链接：<a href="https://learnku.com/laravel/t/69233">https://learnku.com/laravel/t/69233</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 收藏夹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipeline设计模式</title>
      <link href="/posts/88d5391a.html"/>
      <url>/posts/88d5391a.html</url>
      
        <content type="html"><![CDATA[<h1 id="pipeline设计模式"><a href="#pipeline设计模式" class="headerlink" title="pipeline设计模式"></a>pipeline设计模式</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>产品经理提了一个需求，完成任务赠送积分，如果遇到退款需要回收积分，任务是大概是这样的：</p><blockquote><ol><li>每天首次加入购物车赠送 10 积分</li><li>每天首单可以赠送 100 积分</li><li>购物累积金额达到 99 元赠送 100 积分</li><li>购物次数满 10 次赠送 100 积分</li><li>每日签到送 10 积分</li><li>还有很多奇奇怪怪的任务…</li></ol></blockquote><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="if-else-实现"><a href="#if-else-实现" class="headerlink" title="if else 实现"></a><code>if else</code> 实现</h3><p>简单， 二期可维护性降低</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 支付成功触发赠送积分</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;当天首单&quot;</span>) &#123; <span class="hljs-comment">// Reward shopping points &#125;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;累积99元&quot;</span>) &#123; <span class="hljs-comment">// Reward shopping points &#125;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;买满10次&quot;</span>) &#123; <span class="hljs-comment">// Reward shopping points &#125;</span><br><br></code></pre></td></tr></table></figure><p>###「简单工厂」+ 「策略模式」</p><h4 id="管道模式"><a href="#管道模式" class="headerlink" title="管道模式"></a>管道模式</h4><blockquote><p>管道模式也称为流水线模式，英文：Pipeline。</p></blockquote><p>Laravel 通过 Pipeline 实现 Middleware</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Pipeline</span>;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendRequestThroughRouter</span>(<span class="hljs-params"><span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;app-&gt;<span class="hljs-title function_ invoke__">instance</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-variable">$request</span>);<br><br>    <span class="hljs-title class_">Facade</span>::<span class="hljs-title function_ invoke__">clearResolvedInstance</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">bootstrap</span>();<br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pipeline</span>(<span class="hljs-variable language_">$this</span>-&gt;app))<br>                -&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-variable">$request</span>)<br>                -&gt;<span class="hljs-title function_ invoke__">through</span>(<span class="hljs-variable">$this</span>-&gt;app-&gt;<span class="hljs-title function_ invoke__">shouldSkipMiddleware</span>() ? [] : <span class="hljs-variable">$this</span>-&gt;middleware)<br>                -&gt;<span class="hljs-title function_ invoke__">then</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">dispatchToRouter</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>Pipeline</code> 的实现，发现 Laravel 是实现了一个 <code>Pipleline</code> 契约接口，实现了两个管道分别是公用的 <code>Pipleline</code> 和一个 Routing 相关的 <code>Pipleline</code>，其中 <code>Routing Pipleline</code> 是继承了公用的 <code>Pipleline</code> 重写了部分方法。</p><ul><li>send() 需要传递的数据。</li><li>through() 需要处理的任务</li><li>via() 调用的方法名，默认为 handel()</li><li>then() 对于返回数据的处理</li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>整体构建目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">├── PointTask<br>│   ├── OverRmb.php          <span class="hljs-regexp">//</span> 满 N 元任务<br>│   ├── SignIn.php           <span class="hljs-regexp">//</span> 签到任务<br>│   ├── TodayFirst.php       <span class="hljs-regexp">//</span> 每日首单任务<br>│   ├──<br>│   ├── PointTask.php        <span class="hljs-regexp">//</span> abstract 约束<br>│   └── PointTaskService.php <span class="hljs-regexp">//</span> 对外调用方法<br></code></pre></td></tr></table></figure><p>抽象公用方法，统一继承实现 发放积分 回收积分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Lib</span>\<span class="hljs-title class_">PointTask</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PointTask</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-comment">//发送积分</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>)</span>;<br><br>    <span class="hljs-comment">//回收积分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recycle</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>因为有些任务是只有赠送，没有回收的情况，所以定义了 <code>abstract</code> 抽象方法，而不是 <code>interface</code> ，这样在具体任务的实现时可以不去实现 <code>recycle</code> 方法。</p><h4 id="每日首单任务"><a href="#每日首单任务" class="headerlink" title="每日首单任务"></a>每日首单任务</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Lib</span>\<span class="hljs-title class_">PointTask</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span>\<span class="hljs-title">Order</span>\<span class="hljs-title">OrderServices</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span>\<span class="hljs-title">Users</span>\<span class="hljs-title">UserServices</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Log</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodayFirst</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PointTask</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 有订单直接执行下一个任务</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">OrderServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">isTodayFirst</span>(<span class="hljs-variable">$orderInfo</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>        &#125;<br>        <span class="hljs-comment">//赠送积分</span><br>        <span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">UserServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">sendPoint</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;首日第一次下单送积分++&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recycle</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 回收积分, code...</span><br>        <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="买满多少钱赠送积分"><a href="#买满多少钱赠送积分" class="headerlink" title="买满多少钱赠送积分"></a>买满多少钱赠送积分</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Lib</span>\<span class="hljs-title class_">PointTask</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Log</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverRmb</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PointTask</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//小于100 执行下一个任务</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$orderInfo</span>[<span class="hljs-string">&#x27;price&#x27;</span>] &lt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//赠送积分code...  todo</span><br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;满送积分++&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recycle</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//回收积分code</span><br>        <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="每日签到"><a href="#每日签到" class="headerlink" title="每日签到"></a>每日签到</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Lib</span>\<span class="hljs-title class_">PointTask</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span>\<span class="hljs-title">Users</span>\<span class="hljs-title">UserServices</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Log</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingIn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PointTask</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 已签到直接执行下一个任务</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">UserServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">todayIsSinIn</span>()) &#123;<br>            <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>        &#125;<br>        <span class="hljs-comment">// 赠送积分code</span><br>        <span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">UserServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">sendPoint</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;签到送积分++&quot;</span>);<br><br>        <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recycle</span>(<span class="hljs-params"><span class="hljs-variable">$orderInfo</span>, <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$next</span>(<span class="hljs-variable">$orderInfo</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>案例已经完成了方法的抽象，实现了 3 个具体积分任务，接下来编写 <code>PointTaskService</code> 实现 <code>Pipeline</code> 的组织</p><h4 id="PointTaskService"><a href="#PointTaskService" class="headerlink" title="PointTaskService"></a>PointTaskService</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Lib</span>\<span class="hljs-title class_">PointTask</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Pipeline</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span>\<span class="hljs-title">Order</span>\<span class="hljs-title">OrderServices</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PointTaskService</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 定义了可能同时触发的任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shopping</span> = [<span class="hljs-title class_">OverRmb</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-title class_">TodayFirst</span>::<span class="hljs-variable language_">class</span>];<br><br>    <span class="hljs-comment">//购物赠送积分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shoppingSend</span>(<span class="hljs-params"><span class="hljs-variable">$orderId</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$orderInfo</span> = <span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">OrderServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">getOrderInfoByOrderId</span>(<span class="hljs-variable">$orderId</span>);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pipeline</span>(<span class="hljs-title function_ invoke__">app</span>()))<br>            -&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-variable">$orderInfo</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">via</span>(<span class="hljs-string">&#x27;send&#x27;</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">through</span>(<span class="hljs-variable">$this</span>-&gt;shopping)<br>            -&gt;<span class="hljs-title function_ invoke__">thenReturn</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//购物退款返还积分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shoppingRecycle</span>(<span class="hljs-params"><span class="hljs-variable">$orderId</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-variable">$orderInfo</span> = <span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">OrderServices</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">getOrderInfoByOrderId</span>(<span class="hljs-variable">$orderId</span>);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pipeline</span>(<span class="hljs-title function_ invoke__">app</span>()))<br>            -&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-variable">$orderInfo</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">via</span>(<span class="hljs-string">&#x27;recycle&#x27;</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">through</span>(<span class="hljs-variable">$this</span>-&gt;shopping)<br>            -&gt;<span class="hljs-title function_ invoke__">thenReturn</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//每日签到</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">signIn</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pipeline</span>(<span class="hljs-title function_ invoke__">app</span>()))<br>            -&gt;<span class="hljs-title function_ invoke__">via</span>(<span class="hljs-string">&#x27;send&#x27;</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">through</span>(<span class="hljs-title class_">SingIn</span>::<span class="hljs-variable language_">class</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">thenReturn</span>();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>thenReturn ()</code> 方法<br><code>thenReturn()</code> 方法是对 <code>Pipleline</code> 契约接口的 <code>then()</code> 方法的包装，默认的返回值是调用 <code>send() </code>时传入的参数，如果对返回值需要再进行处理，则可调用 <code>then()</code>， 传入一个匿名函数进行处理。</p><h4 id="测试调用"><a href="#测试调用" class="headerlink" title="测试调用"></a>测试调用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//退款成功后调用：</span><br><span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">PointTaskService</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">shoppingSend</span>(<span class="hljs-number">12</span>);<br><span class="hljs-comment">//每日签到调用</span><br><span class="hljs-title function_ invoke__">app</span>(<span class="hljs-title class_">PointTaskService</span>::<span class="hljs-variable language_">class</span>)-&gt;<span class="hljs-title function_ invoke__">signIn</span>();<br><br></code></pre></td></tr></table></figure><p>如有新任务，则新建一个任务类继承 <code>PointTask</code> 实现 <code>send</code> 方法，如有可能收回积分则再实现 <code>recycle</code> 方法。<br>再在 <code>PointTaskService</code> 对外开放的 <code>Service</code> 中加入到指定位置，即可完成，不会影响到其他的业务逻辑。<br>已有的调用处也不用变动代码。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learnku.com/laravel/t/7543/pipeline-pipeline-design-paradigm-in-laravel">Laravel 中的 Pipeline — 管道设计范式</a></li><li><a href="https://learnku.com/docs/the-laravel-way/5.6/Tao-5-1/2942">Laravel之道 - Pipeline 管道操作实现请求中间件过滤（最详细讲解）</a></li><li><a href="https://learnku.com/articles/2769/laravel-pipeline-realization-of-the-principle-of-single-component">Laravel Pipeline 组件的实现原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel使用模型工厂进行数据填充</title>
      <link href="/posts/a11f4b7f.html"/>
      <url>/posts/a11f4b7f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel使用Faker-模型工厂进行数据填充"><a href="#Laravel使用Faker-模型工厂进行数据填充" class="headerlink" title="Laravel使用Faker+模型工厂进行数据填充"></a>Laravel使用Faker+模型工厂进行数据填充</h1><hr><h2 id="配制faker"><a href="#配制faker" class="headerlink" title="配制faker"></a>配制faker</h2><p>设置<code>config/app.php</code> 支持中文</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;faker_locale&#x27;</span> =&gt; <span class="hljs-string">&#x27;zh_CN&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="编写Seeders"><a href="#编写Seeders" class="headerlink" title="编写Seeders"></a>编写Seeders</h2><h3 id="生成一个Seeder"><a href="#生成一个Seeder" class="headerlink" title="生成一个Seeder"></a>生成一个Seeder</h3><p>生成在<code>database/seeds</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan make:seeder UserSeeder<br><br></code></pre></td></tr></table></figure><p>插入语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Database</span>\<span class="hljs-title class_">Seeders</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">DB</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Hash</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Str</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Run the database seeds.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        DB::<span class="hljs-title function_ invoke__">table</span>(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">insert</span>([<br>            <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-title class_">Str</span>::<span class="hljs-title function_ invoke__">random</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-string">&#x27;email&#x27;</span> =&gt; <span class="hljs-title class_">Str</span>::<span class="hljs-title function_ invoke__">random</span>(<span class="hljs-number">10</span>).<span class="hljs-string">&#x27;@gmail.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-title class_">Hash</span>::<span class="hljs-title function_ invoke__">make</span>(<span class="hljs-string">&#x27;password&#x27;</span>),<br>        ]);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="模型工厂手动插入数据"><a href="#模型工厂手动插入数据" class="headerlink" title="模型工厂手动插入数据"></a>模型工厂手动插入数据</h3><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan make:factory OrderFactory<br><br></code></pre></td></tr></table></figure><p>新工厂在 <code>database/factories</code> 目录中</p><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Database</span>\<span class="hljs-title class_">Factories</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">User</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Factories</span>\<span class="hljs-title">Factory</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Str</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The name of the factory&#x27;s corresponding model.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$model</span> = <span class="hljs-title class_">User</span>::<span class="hljs-variable language_">class</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define the model&#x27;s default state.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">definition</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;faker-&gt;<span class="hljs-title function_ invoke__">name</span>(),<br>            <span class="hljs-string">&#x27;email&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;faker-&gt;<span class="hljs-title function_ invoke__">unique</span>()-&gt;<span class="hljs-title function_ invoke__">safeEmail</span>(),<br>            <span class="hljs-string">&#x27;email_verified_at&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">now</span>(),<br>            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#x27;</span>, <span class="hljs-comment">// password</span><br>            <span class="hljs-string">&#x27;remember_token&#x27;</span> =&gt; <span class="hljs-title class_">Str</span>::<span class="hljs-title function_ invoke__">random</span>(<span class="hljs-number">10</span>),<br>        ];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Indicate that the model&#x27;s email address should be unverified.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Database\Eloquent\Factories\Factory</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unverified</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">state</span>(function (<span class="hljs-keyword">array</span> <span class="hljs-variable">$attributes</span>) &#123;<br>            <span class="hljs-keyword">return</span> [<br>                <span class="hljs-string">&#x27;email_verified_at&#x27;</span> =&gt; <span class="hljs-literal">null</span>,<br>            ];<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="调用模型工厂"><a href="#调用模型工厂" class="headerlink" title="调用模型工厂"></a>调用模型工厂</h3><p>创建10个订单信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Database</span>\<span class="hljs-title class_">Seeders</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">Order</span>\<span class="hljs-title">Order</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Run the database seeds.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title class_">Order</span>::<span class="hljs-title function_ invoke__">factory</span>()-&gt;<span class="hljs-title function_ invoke__">times</span>(<span class="hljs-number">10</span>)-&gt;<span class="hljs-title function_ invoke__">create</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="调用其它-Seeders"><a href="#调用其它-Seeders" class="headerlink" title="调用其它 Seeders"></a>调用其它 Seeders</h3><p><code>DatabaseSeeder</code> 使用 <code>call</code> 方法可以将数据填充拆分成多个文件，这样就不会使单个 <code>seeder</code> 变得非常大。只需简单传递要运行的 <code>seeder</code> 类名称即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行数据库填充</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">call</span>([<br>        <span class="hljs-title class_">UserSeeder</span>::<span class="hljs-variable language_">class</span>,<br>        <span class="hljs-title class_">PostSeeder</span>::<span class="hljs-variable language_">class</span>,<br>        <span class="hljs-title class_">CommentSeeder</span>::<span class="hljs-variable language_">class</span>,<br>    ]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运行seeder"><a href="#运行seeder" class="headerlink" title="运行seeder"></a>运行seeder</h3><p><code>db:seed</code> 命令将运行 <code>DatabaseSeeder</code> 类<br><code>--class</code> 选项来指定一个特定的 <code>seeder</code> 类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan db:seed<br>php artisan db:seed --class=UserSeeder <br></code></pre></td></tr></table></figure><h3 id="faker基本用法"><a href="#faker基本用法" class="headerlink" title="faker基本用法"></a>faker基本用法</h3><h4 id="Faker-Provider-Base-基本"><a href="#Faker-Provider-Base-基本" class="headerlink" title="Faker\Provider\Base 基本"></a>Faker\Provider\Base 基本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$randomDigit</span> = <span class="hljs-variable">$faker</span>-&gt;randomDigit;<span class="hljs-comment">//生成0-9之间的随机数</span><br><span class="hljs-variable">$randomDigitNotNull</span> = <span class="hljs-variable">$faker</span>-&gt;randomDigitNotNull;<span class="hljs-comment">//生成1-9之间的随机数</span><br><span class="hljs-variable">$randomNumber</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">randomNumber</span>(<span class="hljs-number">5</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//生成5位整数，true表示严格模式，即只能5位</span><br><span class="hljs-variable">$randomFloat</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">randomFloat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//生成浮点数，两位小数点，范围是0-10之间</span><br><span class="hljs-variable">$numberBetween</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">numberBetween</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//生成随机整数，范围是0-100之间</span><br><span class="hljs-variable">$randomLetter</span> = <span class="hljs-variable">$faker</span>-&gt;randomLetter;<span class="hljs-comment">//返回a-z之间任意的一个小写字符</span><br><span class="hljs-variable">$randomElements</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">randomElements</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-number">2</span>);<span class="hljs-comment">//返回数组中的随机两个元素</span><br><span class="hljs-variable">$randomElement</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">randomElement</span>([<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;dd&#x27;</span>]);<span class="hljs-comment">//随机返回数组中的一个元素</span><br><span class="hljs-variable">$suffle</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">shuffle</span>(<span class="hljs-string">&#x27;hello, world&#x27;</span>); <span class="hljs-comment">//将字串中的字符打乱返回</span><br><span class="hljs-variable">$suffle</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">shuffle</span>([<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;dd&#x27;</span>]); <span class="hljs-comment">//将数组中的元素打乱返回</span><br><span class="hljs-variable">$numerify</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">numerify</span>(<span class="hljs-string">&#x27;Hello #####&#x27;</span>);<span class="hljs-comment">//#####替换为随机数字，输出类似：Hello 03501</span><br><span class="hljs-variable">$lexify</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">lexify</span>(<span class="hljs-string">&#x27;Hello ???&#x27;</span>);<span class="hljs-comment">//???替换为3个随机小写字符，输出类似：Hello krg</span><br><span class="hljs-variable">$bothify</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">bothify</span>(<span class="hljs-string">&#x27;hello ##??&#x27;</span>);<span class="hljs-comment">//#替换为随机数字,?替换为随机小写字符.输出类似：hello 15cr</span><br><span class="hljs-variable">$asciify</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">asciify</span>(<span class="hljs-string">&#x27;hello *****&#x27;</span>);<span class="hljs-comment">//*替换为随机字符，输出类似：hello 5Ynt[</span><br><span class="hljs-variable">$regexify</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">regexify</span>(<span class="hljs-string">&#x27;[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]&#123;2,4&#125;&#x27;</span>);<span class="hljs-comment">//根据正则表达式返回字串</span><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Lorem-文本"><a href="#Faker-Provider-Lorem-文本" class="headerlink" title="Faker\Provider\Lorem 文本"></a>Faker\Provider\Lorem 文本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$word</span> = <span class="hljs-variable">$faker</span>-&gt;word;<span class="hljs-comment">//返回一个单词</span><br><span class="hljs-variable">$words</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">words</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//返回3个单词，false表示返回一个数组；true表示返回一个字符串，单词之间用空格分开</span><br><span class="hljs-variable">$sentence</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">sentence</span>(<span class="hljs-number">5</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//返回一个句子，false表示只能含有5个单词，true表示可以在5个单词左右</span><br><span class="hljs-variable">$sentences</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">sentences</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//返回3条句子，false表示返回一个数组，true表示将三条句子拼成一条返回</span><br><span class="hljs-variable">$paragraph</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">paragraph</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//返回一个段落，由3条句子组成。false表示只能有3条句子，true表示可以在3条句子左右</span><br><span class="hljs-variable">$paragraphs</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">paragraphs</span>(<span class="hljs-number">4</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//返回4个段落。false表示返回一个数组，true表示将段落拼接在一起，并且用换行符分割</span><br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">text</span>(<span class="hljs-number">200</span>);<span class="hljs-comment">//返回一段文本，最多只能含有200个字符</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-en-US-Person-人物"><a href="#Faker-Provider-en-US-Person-人物" class="headerlink" title="Faker\Provider\en_US\Person 人物"></a>Faker\Provider\en_US\Person 人物</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$title</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">title</span>(<span class="hljs-string">&#x27;female&#x27;</span>);<span class="hljs-comment">//参数：title($gender = null|&#x27;male&#x27;|&#x27;female&#x27;) .返回称呼。例如：Mrs.|Prof.|Dr.</span><br><span class="hljs-variable">$titleMale</span> = <span class="hljs-variable">$faker</span>-&gt;titleMale;<span class="hljs-comment">//返回男性称呼</span><br><span class="hljs-variable">$titleFemale</span> = <span class="hljs-variable">$faker</span>-&gt;titleFemale;<span class="hljs-comment">//返回女性称呼</span><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">&#x27;female&#x27;</span>);<span class="hljs-comment">//参数：name($gender = null|&#x27;male&#x27;|&#x27;female&#x27;) .返回姓名</span><br><span class="hljs-variable">$firstName</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">firstName</span>(<span class="hljs-string">&#x27;female&#x27;</span>);<span class="hljs-comment">//参数：firstName($gender = null|&#x27;male&#x27;|&#x27;female&#x27;) .返回名</span><br><span class="hljs-variable">$firstNameMale</span> = <span class="hljs-variable">$faker</span>-&gt;firstNameMale;<span class="hljs-comment">//男性名字</span><br><span class="hljs-variable">$firstNameFemale</span> = <span class="hljs-variable">$faker</span>-&gt;firstNameFemale;<span class="hljs-comment">//女性名字</span><br><span class="hljs-variable">$lastName</span> = <span class="hljs-variable">$faker</span>-&gt;lastName;<span class="hljs-comment">//姓</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-en-US-Address-地址"><a href="#Faker-Provider-en-US-Address-地址" class="headerlink" title="Faker\Provider\en_US\Address 地址"></a>Faker\Provider\en_US\Address 地址</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cityPrefix</span> = <span class="hljs-variable">$faker</span>-&gt;cityPrefix;<span class="hljs-comment">//城市前缀.如：Lake</span><br><span class="hljs-variable">$secondaryAddress</span> = <span class="hljs-variable">$faker</span>-&gt;secondaryAddress;<span class="hljs-comment">//二级地址.如：Suite 061</span><br><span class="hljs-variable">$state</span> = <span class="hljs-variable">$faker</span>-&gt;state;<span class="hljs-comment">//州、省（如：Colorado、四川省）</span><br><span class="hljs-variable">$stateAbbr</span> = <span class="hljs-variable">$faker</span>-&gt;stateAbbr;<span class="hljs-comment">//省份简称.如：晋、蒙、浙、冀</span><br><span class="hljs-variable">$citySuffix</span> = <span class="hljs-variable">$faker</span>-&gt;citySuffix;<span class="hljs-comment">//城市后缀.如：side、land、port、Ville</span><br><span class="hljs-variable">$streetSuffix</span> = <span class="hljs-variable">$faker</span>-&gt;streetSuffix;<span class="hljs-comment">//街道后缀.如：Ramp、Plains</span><br><span class="hljs-variable">$buildingNumber</span> = <span class="hljs-variable">$faker</span>-&gt;buildingNumber;<span class="hljs-comment">//建筑物编号</span><br><span class="hljs-variable">$city</span> = <span class="hljs-variable">$faker</span>-&gt;city;<span class="hljs-comment">//城市</span><br><span class="hljs-variable">$streetName</span> = <span class="hljs-variable">$faker</span>-&gt;streetName;<span class="hljs-comment">//街道名称</span><br><span class="hljs-variable">$streetAddress</span> = <span class="hljs-variable">$faker</span>-&gt;streetAddress;<span class="hljs-comment">//街道地址</span><br><span class="hljs-variable">$postcode</span> = <span class="hljs-variable">$faker</span>-&gt;postcode;<span class="hljs-comment">//邮政编码</span><br><span class="hljs-variable">$address</span> = <span class="hljs-variable">$faker</span>-&gt;address;<span class="hljs-comment">//地址（城市+区）</span><br><span class="hljs-variable">$country</span> = <span class="hljs-variable">$faker</span>-&gt;country;<span class="hljs-comment">//国家</span><br><span class="hljs-variable">$latitude</span> = <span class="hljs-variable">$faker</span>-&gt;latitude;<span class="hljs-comment">//纬度 latitude($min = -90, $max = 90)</span><br><span class="hljs-variable">$longitude</span> = <span class="hljs-variable">$faker</span>-&gt;longitude;<span class="hljs-comment">//经度 longitude($min = -180, $max = 180)</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-en-US-PhoneNumber-电话号码"><a href="#Faker-Provider-en-US-PhoneNumber-电话号码" class="headerlink" title="Faker\Provider\en_US\PhoneNumber 电话号码"></a>Faker\Provider\en_US\PhoneNumber 电话号码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phoneNumber</span> = <span class="hljs-variable">$faker</span>-&gt;phoneNumber;<span class="hljs-comment">//手机号码</span><br><span class="hljs-variable">$tollFreePhoneNumber</span> = <span class="hljs-variable">$faker</span>-&gt;tollFreePhoneNumber;<br><span class="hljs-variable">$e164PhoneNumber</span> = <span class="hljs-variable">$faker</span>-&gt;e164PhoneNumber;<br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-en-US-Company-公司"><a href="#Faker-Provider-en-US-Company-公司" class="headerlink" title="Faker\Provider\en_US\Company 公司"></a>Faker\Provider\en_US\Company 公司</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$catchPhrase</span> = <span class="hljs-variable">$faker</span>-&gt;catchPhrase;<span class="hljs-comment">//口号</span><br><span class="hljs-variable">$bs</span> = <span class="hljs-variable">$faker</span>-&gt;bs;<br><span class="hljs-variable">$company</span> = <span class="hljs-variable">$faker</span>-&gt;company;<span class="hljs-comment">//公司名称</span><br><span class="hljs-variable">$companySuffix</span> = <span class="hljs-variable">$faker</span>-&gt;companySuffix;<span class="hljs-comment">//公司名称后缀</span><br><span class="hljs-variable">$jobTitle</span> = <span class="hljs-variable">$faker</span>-&gt;jobTitle;<span class="hljs-comment">//职称</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-en-US-Text-文本"><a href="#Faker-Provider-en-US-Text-文本" class="headerlink" title="Faker\Provider\en_US\Text 文本"></a>Faker\Provider\en_US\Text 文本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$realText</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">realText</span>();<span class="hljs-comment">//一段叙事文本</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-DateTime-日期时间"><a href="#Faker-Provider-DateTime-日期时间" class="headerlink" title="Faker\Provider\DateTime 日期时间"></a>Faker\Provider\DateTime 日期时间</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$unixTime</span> = <span class="hljs-variable">$faker</span>-&gt;unixTime;<span class="hljs-comment">//返回随机时间戳</span><br><span class="hljs-variable">$unixTime</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">unixTime</span>(<span class="hljs-string">&#x27;now&#x27;</span>);<span class="hljs-comment">//返回随机时间戳 可选最后截止时间</span><br><span class="hljs-variable">$dateTime</span> = <span class="hljs-variable">$faker</span>-&gt;dateTime;<span class="hljs-comment">//返回一个随机的DateTime对象</span><br><span class="hljs-variable">$dateTime</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTime</span>(<span class="hljs-string">&#x27;now&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个随机的DateTime对象，可选择最后截止时间和时区</span><br><span class="hljs-variable">$dateTimeAD</span> = <span class="hljs-variable">$faker</span>-&gt;dateTimeAD;<span class="hljs-comment">//返回一个随机的DateTime对象</span><br><span class="hljs-variable">$dateTimeAD</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeAD</span>(<span class="hljs-string">&#x27;now&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个随机的DateTime对象，可选择最后截止时间和时区</span><br><span class="hljs-variable">$iso8601</span> = <span class="hljs-variable">$faker</span>-&gt;iso8601;<span class="hljs-comment">//返回一个随机的字符串形式的时间</span><br><span class="hljs-variable">$iso8601</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">iso8601</span>(<span class="hljs-string">&#x27;now&#x27;</span>);<span class="hljs-comment">//返回一个随机的字符串形式的时间,可选择最后截止时间</span><br><span class="hljs-variable">$date</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>, <span class="hljs-string">&#x27;now&#x27;</span>);<span class="hljs-comment">//指定格式返回时间,可选择最后截止时间</span><br><span class="hljs-variable">$time</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">time</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="hljs-string">&#x27;now&#x27;</span>);<span class="hljs-comment">//(同上)指定格式返回时间,可选择最后截止时间</span><br><span class="hljs-variable">$dateTimeBetween</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeBetween</span>(<span class="hljs-string">&#x27;2019-01-01&#x27;</span>, <span class="hljs-string">&#x27;now&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回指定时间区间的DateTime对象，可选时区</span><br><span class="hljs-variable">$dateTimeInInterval</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeInInterval</span>(<span class="hljs-string">&#x27;-5 years&#x27;</span>, <span class="hljs-string">&#x27;+5 days&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回指定时间区间的DateTime对象，可选时区(第一个参数：开始时间，第二个参数：时间范围)</span><br><span class="hljs-variable">$dateTimeThisCentury</span> = <span class="hljs-variable">$faker</span>-&gt;dateTimeThisCentury;<span class="hljs-comment">//返回一个本世纪内的DateTime对象</span><br><span class="hljs-variable">$dateTimeThisCentury</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeThisCentury</span>(<span class="hljs-string">&#x27;1950-01-01&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个本世纪内的DateTime对象.指定截止时间和时区</span><br><span class="hljs-variable">$dateTimeThisDecade</span> = <span class="hljs-variable">$faker</span>-&gt;dateTimeThisDecade;<span class="hljs-comment">//返回一个前十年内的DateTime对象</span><br><span class="hljs-variable">$dateTimeThisDecade</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeThisDecade</span>(<span class="hljs-string">&#x27;2015-01-01&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个前十年内的DateTime对象.指定允许的最后时间和时区</span><br><span class="hljs-variable">$dateTimeThisYear</span> = <span class="hljs-variable">$faker</span>-&gt;dateTimeThisYear;<span class="hljs-comment">//返回一个前一年内的DateTime对象</span><br><span class="hljs-variable">$dateTimeThisYear</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeThisYear</span>(<span class="hljs-string">&#x27;now&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个前一年内的DateTime对象.指定允许的最后时间和时区</span><br><span class="hljs-variable">$dateTimeThisMonth</span> = <span class="hljs-variable">$faker</span>-&gt;dateTimeThisMonth;<span class="hljs-comment">//返回一个前一个月内的DateTime对象</span><br><span class="hljs-variable">$dateTimeThisMonth</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">dateTimeThisMonth</span>(<span class="hljs-string">&#x27;-15 days&#x27;</span>, <span class="hljs-string">&#x27;PRC&#x27;</span>);<span class="hljs-comment">//返回一个前一个月内的DateTime对象.指定允许的最后时间和时区</span><br><span class="hljs-variable">$amPm</span> = <span class="hljs-variable">$faker</span>-&gt;amPm;<span class="hljs-comment">//上午/下午</span><br><span class="hljs-variable">$dayOfMonth</span> = <span class="hljs-variable">$faker</span>-&gt;dayOfMonth;<span class="hljs-comment">//返回几号</span><br><span class="hljs-variable">$dayOfWeek</span> = <span class="hljs-variable">$faker</span>-&gt;dayOfWeek;<span class="hljs-comment">//返回星期几</span><br><span class="hljs-variable">$month</span> = <span class="hljs-variable">$faker</span>-&gt;month;<span class="hljs-comment">//返回月份</span><br><span class="hljs-variable">$monthName</span> = <span class="hljs-variable">$faker</span>-&gt;monthName;<span class="hljs-comment">//返回月份名称</span><br><span class="hljs-variable">$year</span> = <span class="hljs-variable">$faker</span>-&gt;year;<span class="hljs-comment">//返回年份</span><br><span class="hljs-variable">$year</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">year</span>(<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<span class="hljs-comment">//返回年份.可指定最后截止日期</span><br><span class="hljs-variable">$timezone</span> = <span class="hljs-variable">$faker</span>-&gt;timezone;<span class="hljs-comment">//返回时区</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Internet-互联网"><a href="#Faker-Provider-Internet-互联网" class="headerlink" title="Faker\Provider\Internet 互联网"></a>Faker\Provider\Internet 互联网</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$email</span> = <span class="hljs-variable">$faker</span>-&gt;email;<span class="hljs-comment">//返回一个随机邮箱</span><br><span class="hljs-variable">$safeEmail</span> = <span class="hljs-variable">$faker</span>-&gt;safeEmail;<span class="hljs-comment">//返回一个以@example.com结尾的安全邮箱</span><br><span class="hljs-variable">$freeEmail</span> = <span class="hljs-variable">$faker</span>-&gt;freeEmail;<span class="hljs-comment">//返回一个随机邮箱</span><br><span class="hljs-variable">$companyEmail</span> = <span class="hljs-variable">$faker</span>-&gt;companyEmail;<span class="hljs-comment">//返回企业邮箱（中文语言包下不可用）</span><br><span class="hljs-variable">$freeEmailDomain</span> = <span class="hljs-variable">$faker</span>-&gt;freeEmailDomain;<span class="hljs-comment">//返回一个邮件域名</span><br><span class="hljs-variable">$safeEmailDomain</span> = <span class="hljs-variable">$faker</span>-&gt;safeEmailDomain;<span class="hljs-comment">//返回安全的邮件域名</span><br><span class="hljs-variable">$userName</span> = <span class="hljs-variable">$faker</span>-&gt;userName;<span class="hljs-comment">//用户名</span><br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$faker</span>-&gt;password;<span class="hljs-comment">//密码</span><br><span class="hljs-variable">$domainName</span> = <span class="hljs-variable">$faker</span>-&gt;domainName;<span class="hljs-comment">//域名（中文语言包下不可用）</span><br><span class="hljs-variable">$domainWord</span> = <span class="hljs-variable">$faker</span>-&gt;domainWord;<span class="hljs-comment">//不带后缀的域名（中文语言包下不可用）</span><br><span class="hljs-variable">$tld</span> = <span class="hljs-variable">$faker</span>-&gt;tld;<span class="hljs-comment">//域名后缀：如com、org（中文语言包下不可用）</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$faker</span>-&gt;url;<span class="hljs-comment">//返回一个随机url（中文语言包下不可用）</span><br><span class="hljs-variable">$slug</span> = <span class="hljs-variable">$faker</span>-&gt;slug;<br><span class="hljs-variable">$ipv4</span> = <span class="hljs-variable">$faker</span>-&gt;ipv4;<span class="hljs-comment">//返回一个ipv4地址</span><br><span class="hljs-variable">$ipv6</span> = <span class="hljs-variable">$faker</span>-&gt;ipv6;<span class="hljs-comment">//返回一个ipv6地址</span><br><span class="hljs-variable">$localIpv4</span> = <span class="hljs-variable">$faker</span>-&gt;localIpv4;<br><span class="hljs-variable">$macAddress</span> = <span class="hljs-variable">$faker</span>-&gt;macAddress;<span class="hljs-comment">//mac地址</span><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-UserAgent-用户代理"><a href="#Faker-Provider-UserAgent-用户代理" class="headerlink" title="Faker\Provider\UserAgent 用户代理"></a>Faker\Provider\UserAgent 用户代理</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-variable">$userAgent</span> = <span class="hljs-variable">$faker</span>-&gt;userAgent;<span class="hljs-comment">//返回一个随机的用户代理信息</span><br><span class="hljs-variable">$chrome</span> = <span class="hljs-variable">$faker</span>-&gt;chrome;<span class="hljs-comment">//返回一个chrome浏览器的用户代理信息</span><br><span class="hljs-variable">$firefox</span> = <span class="hljs-variable">$faker</span>-&gt;firefox;<span class="hljs-comment">//返回一个firefox浏览器的用户代理信息</span><br><span class="hljs-variable">$safari</span> = <span class="hljs-variable">$faker</span>-&gt;safari;<span class="hljs-comment">//返回一个safari浏览器的用户代理信息</span><br><span class="hljs-variable">$opera</span> = <span class="hljs-variable">$faker</span>-&gt;opera;<span class="hljs-comment">//返回一个opera浏览器的用户代理信息</span><br><span class="hljs-variable">$internetExplorer</span> = <span class="hljs-variable">$faker</span>-&gt;internetExplorer;<span class="hljs-comment">//返回一个internetExplorer浏览器的用户代理信息</span><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Payment-支付"><a href="#Faker-Provider-Payment-支付" class="headerlink" title="Faker\Provider\Payment 支付"></a>Faker\Provider\Payment 支付</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$creditCardType</span> = <span class="hljs-variable">$faker</span>-&gt;creditCardType;<span class="hljs-comment">//信用卡类型</span><br><span class="hljs-variable">$creditCardNumber</span> = <span class="hljs-variable">$faker</span>-&gt;creditCardNumber;<span class="hljs-comment">//信用卡号</span><br><span class="hljs-variable">$creditCardExpirationDate</span> = <span class="hljs-variable">$faker</span>-&gt;creditCardExpirationDate;<span class="hljs-comment">//信用卡到期日 (DateTime对象)</span><br><span class="hljs-variable">$creditCardExpirationDateString</span> = <span class="hljs-variable">$faker</span>-&gt;creditCardExpirationDateString;<span class="hljs-comment">//信用卡到期日期字符串</span><br><span class="hljs-variable">$creditCardDetails</span> = <span class="hljs-variable">$faker</span>-&gt;creditCardDetails;<span class="hljs-comment">//信用卡详情（数组）</span><br><span class="hljs-variable">$swiftBicNumber</span> = <span class="hljs-variable">$faker</span>-&gt;swiftBicNumber;<br><span class="hljs-variable">$iban</span> = <span class="hljs-variable">$faker</span>-&gt;iban;<span class="hljs-comment">//国际银行账户</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Color-颜色"><a href="#Faker-Provider-Color-颜色" class="headerlink" title="Faker\Provider\Color 颜色"></a>Faker\Provider\Color 颜色</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$hexcolor</span> = <span class="hljs-variable">$faker</span>-&gt;hexcolor;<span class="hljs-comment">//十六进制的随机色：&#x27;#fa3cc2&#x27;</span><br><span class="hljs-variable">$rgbcolor</span> = <span class="hljs-variable">$faker</span>-&gt;rgbcolor;<span class="hljs-comment">//RGB格式的随机色（字串形式）：&#x27;0,255,122&#x27;</span><br><span class="hljs-variable">$rgbColorAsArray</span> = <span class="hljs-variable">$faker</span>-&gt;rgbColorAsArray;<span class="hljs-comment">//RGB格式的随机色（数组形式）：array(0,255,122)</span><br><span class="hljs-variable">$rgbCssColor</span> = <span class="hljs-variable">$faker</span>-&gt;rgbCssColor;<span class="hljs-comment">//RGB格式的随机色的css表示：&#x27;rgb(0,255,122)&#x27;</span><br><span class="hljs-variable">$safeColorName</span> = <span class="hljs-variable">$faker</span>-&gt;safeColorName;<span class="hljs-comment">//一个安全的随机色名称</span><br><span class="hljs-variable">$colorName</span> = <span class="hljs-variable">$faker</span>-&gt;colorName;<span class="hljs-comment">//随机色名称</span><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-File-文件"><a href="#Faker-Provider-File-文件" class="headerlink" title="Faker\Provider\File 文件"></a>Faker\Provider\File 文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fileExtension</span> = <span class="hljs-variable">$faker</span>-&gt;fileExtension;<span class="hljs-comment">//文件后缀</span><br><span class="hljs-variable">$mimeType</span> = <span class="hljs-variable">$faker</span>-&gt;mimeType;<span class="hljs-comment">//mime类型</span><br><span class="hljs-comment">// 将一个随机文件从源文件复制到目标目录，并返回fullpath</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$sourceDir</span> = <span class="hljs-string">&#x27;./up1&#x27;</span>, <span class="hljs-variable">$targetDir</span> = <span class="hljs-string">&#x27;./up2&#x27;</span>);<br><span class="hljs-comment">// 将一个随机文件从源文件复制到目标目录，并返回basename</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$sourceDir</span> = <span class="hljs-string">&#x27;./up1&#x27;</span>, <span class="hljs-variable">$targetDir</span> = <span class="hljs-string">&#x27;./up2&#x27;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Image-图片"><a href="#Faker-Provider-Image-图片" class="headerlink" title="Faker\Provider\Image 图片"></a>Faker\Provider\Image 图片</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$imageUrl</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">imageUrl</span>();<span class="hljs-comment">//https://lorempixel.com/640/480/?93028</span><br><span class="hljs-variable">$imageUrl</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">imageUrl</span>(<span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>);<span class="hljs-comment">//https://lorempixel.com/320/320/cats/?68416</span><br><span class="hljs-variable">$imageUrl</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">imageUrl</span>(<span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;Faker&#x27;</span>);<span class="hljs-comment">//https://lorempixel.com/320/320/cats/Faker/?68118</span><br><span class="hljs-variable">$imageUrl</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">imageUrl</span>(<span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;Faker&#x27;</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//https://lorempixel.com/gray/320/320/cats/Faker/?28732</span><br><span class="hljs-comment">//生成图片并保存到本地 &#x27;/tmp/13b73edae8443990be1aa8f1a483bc27.jpg&#x27;</span><br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">image</span>(<span class="hljs-string">&#x27;./tmp&#x27;</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>);<br><span class="hljs-comment">//设置类别并生成图片保存到本地  &#x27;tmp/13b73edae8443990be1aa8f1a483bc27.jpg&#x27;</span><br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">image</span>(<span class="hljs-string">&#x27;./tmp&#x27;</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>);<br><span class="hljs-comment">//设置类别并生成图片保存到本地，只返回文件名 &#x27;13b73edae8443990be1aa8f1a483bc27.jpg&#x27;</span><br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">image</span>(<span class="hljs-string">&#x27;./tmp&#x27;</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 生成没有随机化的图像</span><br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">image</span>(<span class="hljs-string">&#x27;./tmp&#x27;</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//生成图片并加上水印字体  &#x27;tmp/13b73edae8443990be1aa8f1a483bc27.jpg&#x27;</span><br><span class="hljs-variable">$image</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">image</span>(<span class="hljs-string">&#x27;./tmp&#x27;</span>, <span class="hljs-number">320</span>, <span class="hljs-number">320</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;Faker&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Uuid-UUID"><a href="#Faker-Provider-Uuid-UUID" class="headerlink" title="Faker\Provider\Uuid UUID"></a>Faker\Provider\Uuid UUID</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uuid</span> = <span class="hljs-variable">$faker</span>-&gt;uuid;<span class="hljs-comment">//生成一个uuid</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Barcode-条形码"><a href="#Faker-Provider-Barcode-条形码" class="headerlink" title="Faker\Provider\Barcode 条形码"></a>Faker\Provider\Barcode 条形码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ean13</span> = <span class="hljs-variable">$faker</span>-&gt;ean13;<span class="hljs-comment">//8105964964473</span><br><span class="hljs-variable">$ean8</span> = <span class="hljs-variable">$faker</span>-&gt;ean8;<span class="hljs-comment">//05994441</span><br><span class="hljs-variable">$isbn13</span> = <span class="hljs-variable">$faker</span>-&gt;isbn13;<span class="hljs-comment">//9780971408739</span><br><span class="hljs-variable">$isbn10</span> = <span class="hljs-variable">$faker</span>-&gt;isbn10;<span class="hljs-comment">//0813387299</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Miscellaneous-各种各样的"><a href="#Faker-Provider-Miscellaneous-各种各样的" class="headerlink" title="Faker\Provider\Miscellaneous 各种各样的"></a>Faker\Provider\Miscellaneous 各种各样的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$boolean</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-keyword">boolean</span>;<span class="hljs-comment">//生成一个布尔值</span><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$faker</span>-&gt;md5;<span class="hljs-comment">//生成一个md5码</span><br><span class="hljs-variable">$sha1</span> = <span class="hljs-variable">$faker</span>-&gt;sha1;<span class="hljs-comment">//生成一个sha1</span><br><span class="hljs-variable">$sha256</span> = <span class="hljs-variable">$faker</span>-&gt;sha256;<span class="hljs-comment">//生成一个sha256</span><br><span class="hljs-variable">$locale</span> = <span class="hljs-variable">$faker</span>-&gt;locale;<span class="hljs-comment">//生成一个地区编码：如zh_CN</span><br><span class="hljs-variable">$countryCode</span> = <span class="hljs-variable">$faker</span>-&gt;countryCode;<span class="hljs-comment">//生成一个国家编码。如：UK</span><br><span class="hljs-variable">$languageCode</span> = <span class="hljs-variable">$faker</span>-&gt;languageCode;<span class="hljs-comment">//生成一个语言编码.如：en</span><br><span class="hljs-variable">$currencyCode</span> = <span class="hljs-variable">$faker</span>-&gt;currencyCode;<span class="hljs-comment">//生成一个货币代码.如：EUR</span><br><span class="hljs-variable">$emoji</span> = <span class="hljs-variable">$faker</span>-&gt;emoji;<span class="hljs-comment">//生成一个emoji表情</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-Biased-偏向的"><a href="#Faker-Provider-Biased-偏向的" class="headerlink" title="Faker\Provider\Biased 偏向的"></a>Faker\Provider\Biased 偏向的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//得到10到20之间的随机数，并且更多机会接近20</span><br><span class="hljs-variable">$biasedNumberBetween</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">biasedNumberBetween</span>(<span class="hljs-variable">$min</span> = <span class="hljs-number">10</span>, <span class="hljs-variable">$max</span> = <span class="hljs-number">20</span>, <span class="hljs-variable">$function</span> = <span class="hljs-string">&#x27;sqrt&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-HtmlLorem-html-文本"><a href="#Faker-Provider-HtmlLorem-html-文本" class="headerlink" title="Faker\Provider\HtmlLorem html 文本"></a>Faker\Provider\HtmlLorem html 文本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//生成不超过2级深度的HTML文档，并且在任何级别上都不超过3个元素。</span><br><span class="hljs-variable">$randomHtml</span> = <span class="hljs-variable">$faker</span>-&gt;<span class="hljs-title function_ invoke__">randomHtml</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-zh-CN-Payment"><a href="#Faker-Provider-zh-CN-Payment" class="headerlink" title="Faker\Provider\zh_CN\Payment"></a>Faker\Provider\zh_CN\Payment</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 生成一个随机的银行名称(基于真实的中国银行的列表)</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$faker</span>-&gt;bank; <span class="hljs-comment">// &#x27;中国建设银行&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-zh-TW-Person"><a href="#Faker-Provider-zh-TW-Person" class="headerlink" title="Faker\Provider\zh_TW\Person"></a>Faker\Provider\zh_TW\Person</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// Generates a random personal identify number</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$faker</span>-&gt;personalIdentityNumber; <span class="hljs-comment">// A223456789</span><br><br></code></pre></td></tr></table></figure><h4 id="Faker-Provider-zh-TW-Company"><a href="#Faker-Provider-zh-TW-Company" class="headerlink" title="Faker\Provider\zh_TW\Company"></a>Faker\Provider\zh_TW\Company</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// Generates a random VAT / Company Tax number</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$faker</span>-&gt;VAT; <span class="hljs-comment">//23456789### `Faker\Provider\Base 基本`</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> Faker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
            <tag> 模型工厂 </tag>
            
            <tag> 数据填充 </tag>
            
            <tag> faker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀、抽奖系统设计</title>
      <link href="/posts/7206c742.html"/>
      <url>/posts/7206c742.html</url>
      
        <content type="html"><![CDATA[<h1 id="秒杀系统"><a href="#秒杀系统" class="headerlink" title="秒杀系统"></a>秒杀系统</h1><hr><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="1-防止用户重复抽奖"><a href="#1-防止用户重复抽奖" class="headerlink" title="1. 防止用户重复抽奖"></a>1. 防止用户重复抽奖</h3><h4 id="方案"><a href="#方案" class="headerlink" title="方案:"></a>方案:</h4><p>在负载均衡设备中做一些配置，判断如果同一个用户在1分钟之内多次发送请求来进行抽奖，就认为是恶意<strong>重复抽奖</strong>，或者是他们自己写的脚本在刷奖，这种流量一律认为是无效流量，在负载均衡设备那个层次就给直接屏蔽掉</p><h3 id="2-全部开奖后暴力拦截流量"><a href="#2-全部开奖后暴力拦截流量" class="headerlink" title="2.全部开奖后暴力拦截流量"></a>2.全部开奖后暴力拦截流量</h3><h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>假设有50万请求涌入进来，可能前5万请求就直接把事儿干完了，甚至是前500请求就把事儿干完了，后续的几十万流量是无效的，不需要让他们进入后台系统执行业务逻辑</p><h4 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h4><p>必须让<strong>抽奖服务</strong>跟<strong>负载均衡</strong>之间有一个状态共享的机制<br>抽奖服务一旦全部开奖完毕，直接更新一个<strong>共享状态</strong>。然后<strong>负载均衡</strong>感知到了之后，后续请求全部拦截掉返回一个抽奖结束的标识就可以了<br>基于<code>Redis</code>来实现这种共享抽奖状态</p><h3 id="3、发放礼品环节进行限流削峰"><a href="#3、发放礼品环节进行限流削峰" class="headerlink" title="3、发放礼品环节进行限流削峰"></a>3、发放礼品环节进行限流削峰</h3><h4 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h4><p>假设抽奖服务在2万请求中有1万请求抽中了奖品，那么势必会造成抽奖服务对礼品服务调用1万次。</p><h4 id="方案：-1"><a href="#方案：-1" class="headerlink" title="方案："></a>方案：</h4><ol><li>抽奖之后完全可以让礼品服务在后台慢慢的把中奖的礼品给发放出去，不需要一下子就立马对1万个请求完成礼品的发放逻辑</li><li>可以在抽奖服务和礼品服务之间，引入消息中间件，进行<strong>限流削峰</strong></li><li>抽奖服务把中奖信息发送到MQ，然后礼品服务，慢慢的从MQ中消费中奖消息</li></ol><h2 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h2><p>秒杀业务，可以使用典型的服务化分层架构：</p><ul><li>端（浏览器/APP），最上层，面向用户</li><li>站点层，访问后端数据，拼装html/json返回</li><li>服务层，屏蔽底层数据细节，提供数据访问</li><li>数据层，DB存储库存，当然也有缓存</li></ul><h3 id="1、端上的请求拦截（浏览器-APP）"><a href="#1、端上的请求拦截（浏览器-APP）" class="headerlink" title="1、端上的请求拦截（浏览器/APP）"></a>1、端上的请求拦截（浏览器/APP）</h3><ul><li>JS层面</li></ul><p><strong>可以限制用户在x秒之内只能提交一次请求</strong>，从而降低系统负载。<br>频繁提交，可以友好提示“频率过快”。</p><ul><li>APP层面<br>可以做类似的事情，虽然用户疯狂的在摇微信抢红包，但其实x秒才向后端发起一次请求。<br>将请求尽量拦截在系统上游”，浏览器/APP层就能拦截80%+的请求。</li></ul><p>端上的拦截只能挡住普通用户（99%的用户是普通用户），程序员firebug一抓包，写个for循环直接调用后端http接口，js拦截根本不起作用</p><h3 id="2、站点层的请求拦截"><a href="#2、站点层的请求拦截" class="headerlink" title="2、站点层的请求拦截"></a>2、站点层的请求拦截</h3><ul><li>用<code>uid</code>做唯一标识。</li><li>在站点层，<strong>对同一个uid的请求进行计数和限速</strong>，例如：一个uid，5秒只准透过1个请求，这样能拦住99%的for循环请求。</li><li>缓存，页面缓存，5秒内到达站点层的其他请求，均返回上次返回的页面。</li></ul><p>解决方向：</p><ol><li><strong>站点层水平扩展</strong>，通过加机器扩容，一台抗5000，200台搞定；</li><li><strong>服务降级</strong>，抛弃请求，例如抛弃50%；</li></ol><p>同一个uid计数与限速，如果担心访问redis带宽成为瓶颈，可以这么优化：</p><ol><li>计数直接放在内存，这样就省去了网络请求；</li><li>在nginx层做7层均衡，让一个uid的请求落到同一个机器上；</li></ol><h3 id="3、服务层的请求拦截"><a href="#3、服务层的请求拦截" class="headerlink" title="3、服务层的请求拦截"></a>3、服务层的请求拦截</h3><ul><li>削峰限速</li><li>假如数据库每秒只能抗500个写请求，就只透传500个（请求<strong>队列</strong>）</li><li>读请求优化（不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题。缓存做水平扩展，很容易线性扩容）</li></ul><h3 id="4、数据库层"><a href="#4、数据库层" class="headerlink" title="4、数据库层"></a>4、数据库层</h3><p>经过前三层的优化：</p><ul><li>浏览器拦截了80%请求</li><li>站点层拦截了99%请求，并做了页面缓存</li><li>服务层根据业务库存，以及数据库抗压能力，做了写请求队列与数据缓存</li></ul><p>db无需分库，数据库做一个高可用就行</p><h2 id="实现【Redis】"><a href="#实现【Redis】" class="headerlink" title="实现【Redis】"></a>实现【Redis】</h2><p>基于Redis实现抽奖业务逻辑</p><h3 id="1-初始化："><a href="#1-初始化：" class="headerlink" title="1.初始化："></a>1.初始化：</h3><p>秒杀商品，将商品以list数据类型存入redis（每个数量为一个元素）</p><h3 id="2-购买："><a href="#2-购买：" class="headerlink" title="2.购买："></a>2.购买：</h3><p>1）购买用户入队列，如果用户队列长度超过指定的排队长度，则返回排队数过多<br>2）如果用户队列长度小于指定的排队长度，然后生成订单，减去库存。下单完成</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>    <span class="hljs-comment">//排队人数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$listNumber</span> = <span class="hljs-number">50</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置库存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setGoodsCount</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$gid</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;gid&#x27;</span>] ?? <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$count</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;count&#x27;</span>] ?? <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$good</span> = <span class="hljs-title class_">Goods</span>::<span class="hljs-title function_ invoke__">query</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-variable">$gid</span>)-&gt;<span class="hljs-title function_ invoke__">first</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$good</span> &amp;&amp; <span class="hljs-variable">$count</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//更新商品库存</span><br>            <span class="hljs-variable">$good</span>-&gt;store = <span class="hljs-variable">$count</span>;<br>            <span class="hljs-variable">$good</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>            <span class="hljs-variable">$queueKey</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;goods:count:good_%s&quot;</span>, <span class="hljs-variable">$gid</span>);<br>            <span class="hljs-variable">$len</span> = <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">llen</span>(<span class="hljs-variable">$queueKey</span>);<br>            <span class="hljs-variable">$num</span> = <span class="hljs-variable">$count</span> - <span class="hljs-variable">$len</span>;<br>            <span class="hljs-comment">//更新redis list</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$num</span> &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$num</span>; <span class="hljs-variable">$i</span>++) &#123;<br>                    <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">lpush</span>(<span class="hljs-variable">$queueKey</span>, <span class="hljs-variable">$gid</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-variable">$num</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>++) &#123;<br>                    <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">lPop</span>(<span class="hljs-variable">$queueKey</span>);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$count</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于redis队列验证库存信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@desc</span> Redis是底层是单线程的,命令执行是原子操作,包括lPush,rPop等.高并发下不会导致超卖</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $gid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BusinessException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seckill</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$gid</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;gid&#x27;</span>] ?? <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$userId</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] ?? <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$good</span> = <span class="hljs-title class_">Goods</span>::<span class="hljs-title function_ invoke__">query</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-variable">$gid</span>)-&gt;<span class="hljs-title function_ invoke__">first</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$good</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-title class_">CodeResponse</span>::<span class="hljs-variable constant_">FAIL</span>, <span class="hljs-string">&#x27;商品不存在&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">#访问用户入队接口</span><br>        <span class="hljs-variable">$checkUserRes</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkUserNum</span>(<span class="hljs-variable">$userId</span>, <span class="hljs-variable">$gid</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$checkUserRes</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-title class_">CodeResponse</span>::<span class="hljs-variable constant_">FAIL</span>, <span class="hljs-string">&#x27;排队数大于商品总数&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$queueKey</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;goods:count:good_%s&quot;</span>, <span class="hljs-variable">$gid</span>);<br>        <span class="hljs-comment">#消费商品,从队列中取出商品</span><br>        <span class="hljs-variable">$count</span> = <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">lPop</span>(<span class="hljs-variable">$queueKey</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$count</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-title class_">CodeResponse</span>::<span class="hljs-variable constant_">FAIL</span>, <span class="hljs-string">&#x27;商品已抢光&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 进入redis锁 锁住这个key 10秒的时间</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Cache</span>::<span class="hljs-title function_ invoke__">lock</span>(<span class="hljs-string">&#x27;order:lock&#x27;</span>, <span class="hljs-number">10</span>)-&gt;<span class="hljs-title function_ invoke__">get</span>()) &#123;<br>            <span class="hljs-comment">//业务逻辑</span><br>            <span class="hljs-variable">$orderRes</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">storeOrder</span>(<span class="hljs-variable">$userId</span>, <span class="hljs-variable">$gid</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$orderRes</span>) &#123;<br>                <span class="hljs-comment">//释放</span><br>                <span class="hljs-title class_">Cache</span>::<span class="hljs-title function_ invoke__">lock</span>(<span class="hljs-string">&#x27;order:lock&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">release</span>();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-title class_">CodeResponse</span>::<span class="hljs-variable constant_">FAIL</span>, <span class="hljs-string">&#x27;生成订单失败&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">#释放锁</span><br>                <span class="hljs-title class_">Cache</span>::<span class="hljs-title function_ invoke__">lock</span>(<span class="hljs-string">&#x27;order:lock&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">release</span>();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将用户也存入队列中（就是将访问请求数据）(此处没有进行用户过滤，同一个用户进行多次请求也会进入队列)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkUserNum</span>(<span class="hljs-params"><span class="hljs-variable">$userId</span>, <span class="hljs-variable">$gid</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$userKey</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;goods:user_list_%s&quot;</span>, <span class="hljs-variable">$gid</span>);<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">llen</span>(<span class="hljs-variable">$userKey</span>);<br>        <span class="hljs-comment">#判断排队数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span> = <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">llen</span>(<span class="hljs-variable">$userKey</span>) &gt; <span class="hljs-variable language_">$this</span>-&gt;listNumber) &#123;<br>            <span class="hljs-comment">// return &#x27;排队数大于商品总数&#x27;;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">#添加数据</span><br>        <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">lpush</span>(<span class="hljs-variable">$userKey</span>, <span class="hljs-variable">$userId</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $gid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $number</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> \Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">storeOrder</span>(<span class="hljs-params"><span class="hljs-variable">$userId</span>, <span class="hljs-variable">$gid</span>, <span class="hljs-variable">$number</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">#开启事务</span><br>            DB::<span class="hljs-title function_ invoke__">beginTransaction</span>();<br>            <span class="hljs-comment">#查询库存sharedLock()共享锁，可以读取到数据，事务未提交不能修改，直到事务提交</span><br>            <span class="hljs-comment">#lockForUpdate()不能读取到数据</span><br>            <span class="hljs-variable">$resutl</span> = <span class="hljs-title class_">Goods</span>::<span class="hljs-title function_ invoke__">query</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$gid</span>])-&gt;<span class="hljs-title function_ invoke__">lockForUpdate</span>()-&gt;<span class="hljs-title function_ invoke__">first</span>();<br>            <span class="hljs-comment">#添加订单</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resutl</span>) &#123;<br>                <span class="hljs-variable">$orderRes</span> = <span class="hljs-title class_">Order</span>::<span class="hljs-title function_ invoke__">query</span>()-&gt;<span class="hljs-title function_ invoke__">create</span>([<br>                    <span class="hljs-string">&#x27;user_id&#x27;</span> =&gt; <span class="hljs-variable">$userId</span>,<br>                    <span class="hljs-string">&#x27;goods_id&#x27;</span> =&gt; <span class="hljs-variable">$gid</span>,<br>//                    <span class="hljs-string">&#x27;goods_number&#x27;</span> =&gt; <span class="hljs-variable">$number</span>,<br>//                    <span class="hljs-string">&#x27;ordersn&#x27;</span> =&gt; <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildOrderNo</span>(),<br>//                    <span class="hljs-string">&#x27;price&#x27;</span> =&gt; <span class="hljs-variable">$resutl</span>-&gt;price,<br>                ]);<br>                <span class="hljs-comment">#减少库存</span><br>                <span class="hljs-variable">$goodsRes</span> = <span class="hljs-title class_">Goods</span>::<span class="hljs-title function_ invoke__">query</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-variable">$gid</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;store&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-number">0</span>)-&gt;<span class="hljs-title function_ invoke__">decrement</span>(<span class="hljs-string">&#x27;store&#x27;</span>);<br>                <span class="hljs-comment">#将用户从队列里面弹出,允许下一个用户进来</span><br>                <span class="hljs-variable">$userKey</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;goods:user_list_%s&quot;</span>, <span class="hljs-variable">$gid</span>);<br>                <span class="hljs-title class_">Redis</span>::<span class="hljs-title function_ invoke__">rpop</span>(<span class="hljs-variable">$userKey</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$orderRes</span>-&gt;id &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$goodsRes</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    DB::<span class="hljs-title function_ invoke__">commit</span>();<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            DB::<span class="hljs-title function_ invoke__">rollBack</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-variable">$e</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成唯一订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildOrderNo</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;ymd&#x27;</span>) . <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">uniqid</span>(), <span class="hljs-number">7</span>, <span class="hljs-number">13</span>), <span class="hljs-number">1</span>))), <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ab -n 40 -c 30 -k localhost:8105/api/goods/seckill/1006002<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##服务器软件和版本</span><br>Server Software:        nginx/1.21.6<br><span class="hljs-comment">##请求的地址/域名</span><br>Server Hostname:        localhost<br><span class="hljs-comment">##端口</span><br>Server Port:            8105<br><br><span class="hljs-comment">##请求的路径</span><br>Document Path:          /api/goods/seckill/1006002<br><span class="hljs-comment">##页面数据/返回的数据量</span><br>Document Length:        47 bytes<br><br><span class="hljs-comment">##并发数</span><br>Concurrency Level:      30<br><span class="hljs-comment">##共使用了多少时间 </span><br>Time taken <span class="hljs-keyword">for</span> tests:   7.030 seconds<br><span class="hljs-comment">##请求数 </span><br>Complete requests:      40<br><span class="hljs-comment">##失败请求</span><br>Failed requests:        20<br>   (Connect: 0, Receive: 0, Length: 20, Exceptions: 0)<br>Keep-Alive requests:    0<br><span class="hljs-comment">##总共传输字节数，包含http的头信息等 </span><br>Total transferred:      13100 bytes<br><span class="hljs-comment">##html字节数，实际的页面传递字节数 </span><br>HTML transferred:       2020 bytes<br> <span class="hljs-comment">##每秒多少请求，这个是非常重要的参数数值，服务器的吞吐量 </span><br>Requests per second:    5.69 [<span class="hljs-comment">#/sec] (mean)</span><br><span class="hljs-comment">##用户平均请求等待时间 </span><br>Time per request:       5272.218 [ms] (mean)<br><span class="hljs-comment">##服务器平均处理时间，也就是服务器吞吐量的倒数 </span><br>Time per request:       175.741 [ms] (mean, across all concurrent requests)<br> <span class="hljs-comment">##每秒获取的数据长度</span><br>Transfer rate:          1.82 [Kbytes/sec] received<br><br><span class="hljs-comment">##连接的最小时间，平均值，中值，最大值</span><br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0    2   1.2      2       3<br><span class="hljs-comment">##处理时间</span><br>Processing:   671 3200 1388.0   3591    5231<br><span class="hljs-comment">##等待时间</span><br>Waiting:      668 3198 1388.3   3591    5230<br><span class="hljs-comment">##合计时间</span><br>Total:        671 3201 1387.3   3592    5232<br><br>Percentage of the requests served within a certain time (ms)<br>  50%   3592<br>  <span class="hljs-comment">## 50%的请求在373ms内返回 </span><br>  66%   4255<br>  <span class="hljs-comment">## 60%的请求在400ms内返回 </span><br>  75%   4454<br>  80%   4499<br>  90%   4756<br>  95%   5006<br>  98%   5232<br>  99%   5232<br> 100%   5232 (longest request)<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心思路都是对于这种瞬时超高流量的系统，尽可能在负载均衡层就把99%的无效流量拦截掉（<strong>尽量将请求拦截在系统上游</strong>）<br>然后在1%的流量进入核心业务服务后，此时每秒并发还是可能会上万，那么可以基于Redis实现核心业务逻辑 ，抗住上万并发（<strong>读多写少用缓存</strong>）<br>最后对于类似秒杀商品发货、抽奖商品发货、红包资金转账之类的非常耗时的操作，完全可以基于MQ消息队列队列来限流削峰，后台有一个服务慢慢执行即可</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>抽奖的话，可以先在nginx层，或者是网关层，随机拒绝大部分请求，能进入到业务逻辑里面的，都是中了奖的，</p><h2 id="业务折中方案"><a href="#业务折中方案" class="headerlink" title="业务折中方案"></a>业务折中方案</h2><h3 id="下单流程和支付流程异步"><a href="#下单流程和支付流程异步" class="headerlink" title="下单流程和支付流程异步"></a>下单流程和支付流程异步</h3><p>下单成功后，系统占住库存，45分钟之内支付即可</p><h3 id="不同地域分时抢购"><a href="#不同地域分时抢购" class="headerlink" title="不同地域分时抢购"></a>不同地域分时抢购</h3><h3 id="一旦点击，不管系统是否返回，按钮立刻置灰"><a href="#一旦点击，不管系统是否返回，按钮立刻置灰" class="headerlink" title="一旦点击，不管系统是否返回，按钮立刻置灰"></a>一旦点击，不管系统是否返回，按钮立刻置灰</h3><h3 id="降低缓存淘汰率"><a href="#降低缓存淘汰率" class="headerlink" title="降低缓存淘汰率"></a>降低缓存淘汰率</h3><p>显示库存会淘汰N次，显示有无只会淘汰1次。更多的，用户关注是否有票，而不是票有几张</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> reids </tag>
            
            <tag> 秒杀 </tag>
            
            <tag> 抢购 </tag>
            
            <tag> 抽奖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios内购续订服务端</title>
      <link href="/posts/23b26f62.html"/>
      <url>/posts/23b26f62.html</url>
      
        <content type="html"><![CDATA[<h1 id="ios内购续订服务端"><a href="#ios内购续订服务端" class="headerlink" title="ios内购续订服务端"></a>ios内购续订服务端</h1><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.apple.com/documentation/appstoreservernotifications/notificationtype">服务器通知类型</a></li><li><a href="https://appstoreconnect.apple.com/apps/1540485581/appstore/info">服务器通知网址设置</a></li></ul><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p><img src="/images/iospay.png" alt="业务逻辑"></p><blockquote><ul><li>同一Apple 账号生成续订订单的原始交易ID（original_transaction_id）一致</li><li>服务端处理交易过程 ：要确定一个交易ID(transaction_id)只能完成一笔订单，处理完该交易的订单之后，该交易ID记录标识为处理完成状态</li><li>服务端可以通过用户购买凭证（receipt_data）查询用户所有交易记录 查询到的数据有in_app、latest_receipt_info、pending_renewal_info</li><li>连续订阅主要用到数据是latest_receipt_info，里面有所有的续订记录。</li><li>如果里面的交易有cancellation_date字段，说明该交易已经被退款。</li><li>pending_renewal_info里面的auto_renew_status字段用于标识用户是否开通自动订阅；0:已关闭；1:已开通。</li></ul></blockquote><p>在接收 App Store的续订、取消、退款通知时，因为选择的版本2（version 2 notification）的通知，版本二通知是jwt编码实现。<br>所以需要解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>    <span class="hljs-comment">// 支付回调</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validatePay</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//苹果内购的验证收据</span><br>        <span class="hljs-variable">$param</span> = <span class="hljs-variable language_">$this</span>-&gt;param;<br>        <span class="hljs-variable">$receipt_data</span> = <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;receipt_data&#x27;</span>];<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;内购receipt_data_old:&#x27;</span> . <span class="hljs-variable">$receipt_data</span>);<br>        <span class="hljs-variable">$receipt_data</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-variable">$receipt_data</span>);<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;内购receipt_data:&#x27;</span> . <span class="hljs-variable">$receipt_data</span>);<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;内购receipt_data_json:&#x27;</span> . <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$receipt_data</span>));<br>        <span class="hljs-variable">$orderSn</span> = <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;order_sn&#x27;</span>] ?? <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$sandbox</span> = <span class="hljs-title class_">Env</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;APP_ENV&#x27;</span>) != <span class="hljs-string">&#x27;prod&#x27;</span>;<br>        <span class="hljs-comment">// 验证支付状态</span><br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">validate_apple_pay</span>(<span class="hljs-variable">$receipt_data</span>, <span class="hljs-variable">$sandbox</span>);<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;内购回调res:&#x27;</span> . <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;status&#x27;</span>]) &#123;<br>            <span class="hljs-comment">// 验证通过 此处可以是修改数据库订单状态等操作</span><br>            <span class="hljs-variable">$payId</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;transactionId&#x27;</span>];<br>            <span class="hljs-variable">$time</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;purchaseTime&#x27;</span>] / <span class="hljs-number">1000</span>;<br>            <span class="hljs-variable">$order</span> = <span class="hljs-variable language_">$this</span>-&gt;orderService-&gt;<span class="hljs-title function_ invoke__">getOrderBySn</span>(<span class="hljs-variable">$orderSn</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$order</span>)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&#x27;无此订单&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$isHasPaid</span> = <span class="hljs-variable language_">$this</span>-&gt;orderService-&gt;<span class="hljs-title function_ invoke__">isHasPaid</span>(<span class="hljs-variable">$orderSn</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isHasPaid</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">dataToJson</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$isHasPaid</span>);<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;orderService-&gt;<span class="hljs-title function_ invoke__">payOrder</span>(<span class="hljs-variable">$order</span>, <span class="hljs-variable">$payId</span>, <span class="hljs-variable">$time</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">dataToJson</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$res</span>);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 验证不通过</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">dataToJson</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;message&#x27;</span>]);<br><br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 自动续费订阅回调</span><br><span class="hljs-comment">    * Doc: https://developer.apple.com/documentation/appstoreservernotifications/notification_type</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renew</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$resp_str</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>();<br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;resp_str&#x27;</span> . <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$resp_str</span>));<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$resp_str</span>[<span class="hljs-string">&#x27;signedPayload&#x27;</span>];<br>        <span class="hljs-variable">$data</span> = <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">verifyToken</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;signedTransactionInfo&#x27;</span>] = <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">verifyToken</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;signedTransactionInfo&#x27;</span>]);<br>        <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;signedRenewalInfo&#x27;</span>] = <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">verifyToken</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;signedRenewalInfo&#x27;</span>]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$data</span>) &#123;<br>            <span class="hljs-comment">/*通知类型</span><br><span class="hljs-comment">            https://developer.apple.com/documentation/appstoreservernotifications/notificationtype</span><br><span class="hljs-comment">            CONSUMPTION_REQUEST 表示客户针对消耗品内购发起退款申请</span><br><span class="hljs-comment">            DID_CHANGE_RENEWAL_PREF 对其订阅计划进行了更改 如果subtype是UPGRADE，则用户升级了他们的订阅;如果subtype是DOWNGRADE，则用户将其订阅降级或交叉分级</span><br><span class="hljs-comment">            DID_CHANGE_RENEWAL_STATUS 通知类型及其subtype指示用户对订阅续订状态进行了更改</span><br><span class="hljs-comment">            DID_FAIL_TO_RENEW 一种通知类型及其subtype指示订阅由于计费问题而未能续订</span><br><span class="hljs-comment">            DID_RENEW 一种通知类型，连同其subtype指示订阅成功续订</span><br><span class="hljs-comment">            EXPIRED 一种通知类型及其subtype指示订阅已过期</span><br><span class="hljs-comment">            GRACE_PERIOD_EXPIRED 表示计费宽限期已结束，无需续订，因此您可以关闭对服务或内容的访问</span><br><span class="hljs-comment">            OFFER_REDEEMED 一种通知类型，连同其subtype指示用户兑换了促销优惠或优惠代码。 subtype DID_RENEW</span><br><span class="hljs-comment">            PRICE_INCREASE 一种通知类型，连同其subtype指示系统已通知用户订阅价格上涨</span><br><span class="hljs-comment">            REFUND 表示 App Store 成功为消耗性应用内购买、非消耗性应用内购买、自动续订订阅或非续订订阅的交易退款</span><br><span class="hljs-comment">            REFUND_DECLINED 表示 App Store 拒绝了应用开发者发起的退款请求</span><br><span class="hljs-comment">            RENEWAL_EXTENDED 表示 App Store 延长了开发者要求的订阅续订日期</span><br><span class="hljs-comment">            REVOKE表示 用户有权通过家庭共享获得的应用内购买不再通过共享获得</span><br><span class="hljs-comment">            SUBSCRIBED 一种通知类型，连同其subtype指示用户订阅了产品</span><br><span class="hljs-comment">            1. 用户主动取消订阅notificationType:DID_CHANGE_RENEWAL_STATUS</span><br><span class="hljs-comment">            2. 用户取消订阅，又重新开通连续订阅notificationType: SUBSCRIBED  subtype: RESUBSCRIBE</span><br><span class="hljs-comment">            3. 用户首次开通订阅notificationType: SUBSCRIBED  subtype: INITIAL_BUY</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-variable">$notification_type</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;notificationType&#x27;</span>];<br>            <span class="hljs-variable">$transactionData</span> = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;signedTransactionInfo&#x27;</span>];<br>            <span class="hljs-variable">$product_id</span> = <span class="hljs-variable">$transactionData</span>[<span class="hljs-string">&#x27;productId&#x27;</span>];<br>            <span class="hljs-variable">$sub_type</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subtype&#x27;</span>]) ? <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subtype&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable">$original_transaction_id</span> = <span class="hljs-variable">$transactionData</span>[<span class="hljs-string">&#x27;originalTransactionId&#x27;</span>];  <span class="hljs-comment">// //原始交易ID</span><br>            <span class="hljs-variable">$transaction_id</span> = <span class="hljs-variable">$transactionData</span>[<span class="hljs-string">&#x27;transactionId&#x27;</span>];  <span class="hljs-comment">//  //交易的标识</span><br>            <span class="hljs-variable">$expires_date</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="hljs-variable">$transactionData</span>[<span class="hljs-string">&#x27;expiresDate&#x27;</span>] / <span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">//todo 记录通知log</span><br>            <span class="hljs-variable">$orderinfo</span> = <span class="hljs-variable language_">$this</span>-&gt;orderModel-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;pay_id&#x27;</span>, <span class="hljs-variable">$original_transaction_id</span>)-&gt;<span class="hljs-title function_ invoke__">find</span>();<br><br>            <span class="hljs-comment">//查询原始交易绑定的用户ID</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$notification_type</span>, [<span class="hljs-string">&#x27;DID_RENEW&#x27;</span>, <span class="hljs-string">&#x27;SUBSCRIBED&#x27;</span>])) &#123;<br>                <span class="hljs-comment">//开通成功以及续订成功处理交易</span><br>                <span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">time</span>();<br>                <span class="hljs-variable language_">$this</span>-&gt;orderService-&gt;<span class="hljs-title function_ invoke__">payOrder</span>(<span class="hljs-variable">$orderinfo</span>, <span class="hljs-variable">$transaction_id</span>, <span class="hljs-variable">$time</span>);<br>                <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;开通成功以及续订成功处理交易, 续订成功userid--&#x27;</span> . <span class="hljs-variable">$orderinfo</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br>            &#125;<br><br>            <span class="hljs-comment">//用户退款处理交易</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$notification_type</span>, [<span class="hljs-string">&#x27;REFUND&#x27;</span>])) &#123;<br>                <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;用户退款, userid--&#x27;</span> . <span class="hljs-variable">$orderinfo</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br><br>            &#125;<br><br>            <span class="hljs-comment">//用户取消订阅或者订阅过期</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$notification_type</span>, [<span class="hljs-string">&#x27;EXPIRED&#x27;</span>, <span class="hljs-string">&#x27;DID_FAIL_TO_RENEW&#x27;</span>]) || (<span class="hljs-variable">$notification_type</span> == <span class="hljs-string">&#x27;DID_CHANGE_RENEWAL_STATUS&#x27;</span>)) &#123;<br>                <span class="hljs-variable">$is_renew</span> = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$notification_type</span> == <span class="hljs-string">&#x27;DID_CHANGE_RENEWAL_STATUS&#x27;</span>) &amp;&amp; <span class="hljs-variable">$sub_type</span> == <span class="hljs-string">&#x27;AUTO_RENEW_ENABLED&#x27;</span>) &#123;<br>                    <span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">time</span>();<br>                    <span class="hljs-variable language_">$this</span>-&gt;orderService-&gt;<span class="hljs-title function_ invoke__">payOrder</span>(<span class="hljs-variable">$orderinfo</span>, <span class="hljs-variable">$transaction_id</span>, <span class="hljs-variable">$time</span>);<br>                    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;开通订阅成功, 续订成功userid--&#x27;</span> . <span class="hljs-variable">$orderinfo</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br>                    <span class="hljs-comment">//开通订阅成功</span><br>                &#125; <span class="hljs-keyword">elseif</span> ((<span class="hljs-variable">$notification_type</span> == <span class="hljs-string">&#x27;DID_CHANGE_RENEWAL_STATUS&#x27;</span>) &amp;&amp; <span class="hljs-variable">$sub_type</span> == <span class="hljs-string">&#x27;AUTO_RENEW_DISABLED&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//取消订阅成功</span><br>                    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;取消订阅成功,userid--&#x27;</span> . <span class="hljs-variable">$orderinfo</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br><br>                &#125; <span class="hljs-keyword">elseif</span> ((<span class="hljs-variable">$notification_type</span> == <span class="hljs-string">&#x27;EXPIRED&#x27;</span>) &amp;&amp; <span class="hljs-variable">$sub_type</span> == <span class="hljs-string">&#x27;VOLUNTARY&#x27;</span>) &#123;<br>                    <span class="hljs-comment">//订阅在用户禁用订阅续订后过期</span><br>                    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&#x27;订阅在用户禁用订阅续订后过期,userid--&#x27;</span> . <span class="hljs-variable">$orderinfo</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br><br>                &#125;<br>                <span class="hljs-comment">//更新用户订阅状态</span><br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证token是否有效,默认验证exp,nbf,iat时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $Token 需要验证的token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool|string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verifyToken</span>(<span class="hljs-params"><span class="hljs-variable">$Token</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$tokens</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$Token</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$tokens</span>) != <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$base64header</span>, <span class="hljs-variable">$base64payload</span>) = <span class="hljs-variable">$tokens</span>;<br><br>        <span class="hljs-comment">//获取jwt算法</span><br>        <span class="hljs-variable">$base64decodeheader</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">base64UrlDecode</span>(<span class="hljs-variable">$base64header</span>), <span class="hljs-literal">true</span>, <span class="hljs-number">512</span>, JSON_OBJECT_AS_ARRAY);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$base64decodeheader</span>[<span class="hljs-string">&#x27;alg&#x27;</span>]) || <span class="hljs-variable">$base64decodeheader</span>[<span class="hljs-string">&#x27;alg&#x27;</span>] != <span class="hljs-string">&#x27;ES256&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">base64UrlDecode</span>(<span class="hljs-variable">$base64payload</span>), <span class="hljs-literal">true</span>, <span class="hljs-number">512</span>, JSON_OBJECT_AS_ARRAY);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$payload</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * base64UrlEncode   https://jwt.io/  中base64UrlEncode编码实现</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $input 需要编码的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64UrlEncode</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$input</span>), <span class="hljs-string">&#x27;+/&#x27;</span>, <span class="hljs-string">&#x27;-_&#x27;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * base64UrlEncode  https://jwt.io/  中base64UrlEncode解码实现</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $input 需要解码的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool|string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64UrlDecode</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$remainder</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$input</span>) % <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$remainder</span>) &#123;<br>            <span class="hljs-variable">$addlen</span> = <span class="hljs-number">4</span> - <span class="hljs-variable">$remainder</span>;<br>            <span class="hljs-variable">$input</span> .= <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-variable">$addlen</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-variable">$input</span>, <span class="hljs-string">&#x27;-_&#x27;</span>, <span class="hljs-string">&#x27;+/&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> iap </tag>
            
            <tag> 连续订阅 </tag>
            
            <tag> jwt </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go入门</title>
      <link href="/posts/3e80a85d.html"/>
      <url>/posts/3e80a85d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Go学习"><a href="#Go学习" class="headerlink" title="Go学习"></a>Go学习</h1><h2 id="1、环境安装"><a href="#1、环境安装" class="headerlink" title="1、环境安装"></a>1、环境安装</h2><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用 brew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install go<br></code></pre></td></tr></table></figure><p>升级命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew upgrade go<br></code></pre></td></tr></table></figure><p>控制台输入<code>go version</code>，若输出版本号则<strong>安装成功</strong>。</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>通过安装包装</p><p>地址：<a href="https://dl.google.com/go/go1.12.darwin-amd64.pkg">https://dl.google.com/go/go1.12.darwin-amd64.pkg</a><br>下载之后直接点击安装</p><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi ~/.bashrc<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPATH</span>=/Users/Calm/go/code1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOBIN</span>=<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$GOBIN<br><br></code></pre></td></tr></table></figure><p><strong>如果命令行使用的是zsh，请修改 <code>.zshrc </code>文件。</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vi ~/.zshrc<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPATH</span>=/Users/Calm/go/code1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOBIN</span>=<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$GOBIN<br><br></code></pre></td></tr></table></figure><p>及时生效，请执行命令：<code>source ~/.zshrc</code><br>验证是否安装成功，命令行下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">go version<br>go version go1.12 darwin/amd64<br></code></pre></td></tr></table></figure><blockquote><p>出现错误 <code>zsh: command not found: go</code>  原因是 <strong>oh my zsh</strong> 所加载的环境变量与 Mac 本身自带的环境变量不同<br>利用 ln 命令，在终端设置建立一个同步的链接<br>运行 <code>sudo ln -fs /usr/local/go/bin/go /usr/local/bin/go</code></p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><p>存放编译后可执行的文件。</p><h4 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h4><p>存放编译后的应用包。</p><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p>存放应用源代码。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a><code>go build</code></h4><p>生成二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go build hello.go <br>$ <span class="hljs-built_in">ls</span><br>hello    hello.go<br>$ ./hello <br>Hello, World!<br></code></pre></td></tr></table></figure><h4 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a><code>go clean</code></h4><p>移除当前源码包和关联源码包里面编译生成的文件</p><p>参数</p><ul><li>-i 清除关联的安装的包和可运行文件，也就是通过 go install 安装的文件</li><li>-n 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li><li>-r 循环的清除在 import 中引入的包</li><li>-x 打印出来执行的详细命令，其实就是 -n 打印的执行版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go clean -i -n<br><span class="hljs-built_in">cd</span> /Users/astaxie/develop/gopath/src/mathapp<br><span class="hljs-built_in">rm</span> -f mathapp mathapp.exe mathapp.test mathapp.test.exe app app.exe<br><span class="hljs-built_in">rm</span> -f /Users/astaxie/develop/gopath/bin/mathapp<br></code></pre></td></tr></table></figure><h4 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a><code>go install</code></h4><p>会把编译好的结果移动到 $GOPATH/bin。</p><h4 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a><code>go run</code></h4><p>编译并运行 Go 程序</p><h4 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a><code>go test</code></h4><p>会自动读取源码目录下面名为 <code>*_test.go</code> 的文件，生成并运行测试用的可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ok   archive/tar   0.011s<br>FAIL archive/zip   0.022s<br>ok   compress/gzip 0.033s<br>...<br></code></pre></td></tr></table></figure><h4 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a><code>go fmt</code></h4><p>格式化代码，将代码修改成标准格式</p><h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> version 查看 <span class="hljs-keyword">go</span> 当前的版本<br><span class="hljs-keyword">go</span> env 查看当前 <span class="hljs-keyword">go</span> 的环境变量<br><span class="hljs-keyword">go</span> list 列出当前全部安装的 <span class="hljs-keyword">package</span><br><span class="hljs-keyword">go</span> run 编译并运行 Go 程序<br></code></pre></td></tr></table></figure><h2 id="2、语言基础"><a href="#2、语言基础" class="headerlink" title="2、语言基础"></a>2、语言基础</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 定义一个名称为 “variableName”，类型为 &quot;type&quot; 的变量</span><br><span class="hljs-keyword">var</span> variableName <span class="hljs-keyword">type</span><br><span class="hljs-comment">// 定义三个类型都是 “type” 的变量</span><br><span class="hljs-keyword">var</span> vname1, vname2, vname3 <span class="hljs-keyword">type</span><br><span class="hljs-comment">// 初始化 “variableName” 的变量为 “value” 值，类型是 “type”</span><br><span class="hljs-keyword">var</span> variableName <span class="hljs-keyword">type</span> = value<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    定义三个类型都是 &quot;type&quot; 的变量, 并且分别初始化为相应的值</span><br><span class="hljs-comment">    vname1 为 v1，vname2 为 v2，vname3 为 v3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> vname1, vname2, vname3 <span class="hljs-keyword">type</span>= v1, v2, v3<br><br><span class="hljs-comment">//:= 这个符号直接取代了 var 和 type 这种形式叫做简短声明</span><br>vname1, vname2, vname3 := v1, v2, v3<br><br>#Go 对于已声明但未使用的变量会在编译阶段报错<br><br></code></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> constantName = value<br></code></pre></td></tr></table></figure><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>整数类型<br>直接定义好位数的类型：<code>rune</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code> 和 <code>byte</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>。<br>其中 <code>rune</code> 是 <code>int32</code> 的别称，<code>byte</code> 是 <code>uint8</code> 的别称。</p><p>浮点类型<br><code>float32</code> 和 <code>float64</code> 两种（没有 <code>float</code> 类型），默认是 <code>float64</code>。<br><code>complex64</code></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go 中的字符串都是采用 <code>UTF-8</code> 字符集编码。字符串是用一对双引号（<code>&quot;&quot;</code>）或<code>反引号</code>括起来定义，它的类型是 <code>string</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github开源项目传送门【整理ing】</title>
      <link href="/posts/3b686fb2.html"/>
      <url>/posts/3b686fb2.html</url>
      
        <content type="html"><![CDATA[<h1 id="github开源项目传送门"><a href="#github开源项目传送门" class="headerlink" title="github开源项目传送门"></a>github开源项目传送门</h1><hr><blockquote><p>提高自己的编程技巧 发现编程的乐趣</p></blockquote><h2 id="1、dompdf"><a href="#1、dompdf" class="headerlink" title="1、dompdf   "></a>1、<a href="https://github.com/dompdf/dompdf">dompdf</a> <img src="https://img.shields.io/github/stars/dompdf/dompdf?style=plastic"> <img src="https://img.shields.io/github/watchers/dompdf/dompdf?style=plastic"> <img src="https://img.shields.io/github/forks/dompdf/dompdf?style=plastic"></h2><blockquote><p>一个 HTML 转 PDF 的 PHP 库</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// reference the Dompdf namespace</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">Dompdf</span>\<span class="hljs-title">Dompdf</span>;<br><br><span class="hljs-comment">// instantiate and use the dompdf class</span><br><span class="hljs-variable">$dompdf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dompdf</span>();<br><span class="hljs-variable">$dompdf</span>-&gt;<span class="hljs-title function_ invoke__">loadHtml</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br><br><span class="hljs-comment">// (Optional) Setup the paper size and orientation</span><br><span class="hljs-variable">$dompdf</span>-&gt;<span class="hljs-title function_ invoke__">setPaper</span>(<span class="hljs-string">&#x27;A4&#x27;</span>, <span class="hljs-string">&#x27;landscape&#x27;</span>);<br><br><span class="hljs-comment">// Render the HTML as PDF</span><br><span class="hljs-variable">$dompdf</span>-&gt;<span class="hljs-title function_ invoke__">render</span>();<br><br><span class="hljs-comment">// Output the generated PDF to Browser</span><br><span class="hljs-variable">$dompdf</span>-&gt;<span class="hljs-title function_ invoke__">stream</span>();<br></code></pre></td></tr></table></figure><h2 id="2、laravel-tips"><a href="#2、laravel-tips" class="headerlink" title="2、laravel-tips   "></a>2、<a href="https://github.com/LaravelDaily/laravel-tips">laravel-tips</a> <img src="https://img.shields.io/github/stars/LaravelDaily/laravel-tips?style=plastic"> <img src="https://img.shields.io/github/watchers/LaravelDaily/laravel-tips?style=plastic"> <img src="https://img.shields.io/github/forks/LaravelDaily/laravel-tips?style=plastic"></h2><blockquote><p>Laravel 编码技巧集合 <a href="https://github.com/LaravelDaily/laravel-tips">中文</a></p></blockquote><h2 id="3、video-spider"><a href="#3、video-spider" class="headerlink" title="3、video_spider   "></a>3、<a href="https://github.com/5ime/video_spider">video_spider</a> <img src="https://img.shields.io/github/stars/5ime/video_spider?style=plastic"> <img src="https://img.shields.io/github/watchers/5ime/video_spider?style=plastic"> <img src="https://img.shields.io/github/forks/5ime/video_spider?style=plastic"></h2><blockquote><p>视频去水印工具。原理很简单就是根据输入的视频的地址，返回原平台无水印的视频源地址。目前支持 15 个视频平台，<a href="https://lab.5ime.cn/video/">在线尝试</a></p></blockquote><h2 id="4、PHPMailer"><a href="#4、PHPMailer" class="headerlink" title="4、PHPMailer   "></a>4、<a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a> <img src="https://img.shields.io/github/stars/PHPMailer/PHPMailer?style=plastic"> <img src="https://img.shields.io/github/watchers/PHPMailer/PHPMailer?style=plastic"> <img src="https://img.shields.io/github/forks/PHPMailer/PHPMailer?style=plastic"></h2><blockquote><p>最流行的 PHP 发邮件的开源库。很多知名 PHP 开源项目中都有它的身影，比如：WordPress、Yii 等，支持你对发邮件的所有开发需求。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//Import PHPMailer classes into the global namespace</span><br><span class="hljs-comment">//These must be at the top of your script, not inside a function</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>\<span class="hljs-title">SMTP</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>\<span class="hljs-title">Exception</span>;<br><br><span class="hljs-comment">//Load Composer&#x27;s autoloader</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;vendor/autoload.php&#x27;</span>;<br><br><span class="hljs-comment">//Instantiation and passing `true` enables exceptions</span><br><span class="hljs-variable">$mail</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PHPMailer</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//Server settings</span><br>    <span class="hljs-variable">$mail</span>-&gt;SMTPDebug = SMTP::<span class="hljs-variable constant_">DEBUG_SERVER</span>;                      <span class="hljs-comment">//Enable verbose debug output</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">isSMTP</span>();                                            <span class="hljs-comment">//Send using SMTP</span><br>    <span class="hljs-variable">$mail</span>-&gt;Host       = <span class="hljs-string">&#x27;smtp.example.com&#x27;</span>;                     <span class="hljs-comment">//Set the SMTP server to send through</span><br>    <span class="hljs-variable">$mail</span>-&gt;SMTPAuth   = <span class="hljs-literal">true</span>;                                   <span class="hljs-comment">//Enable SMTP authentication</span><br>    <span class="hljs-variable">$mail</span>-&gt;Username   = <span class="hljs-string">&#x27;user@example.com&#x27;</span>;                     <span class="hljs-comment">//SMTP username</span><br>    <span class="hljs-variable">$mail</span>-&gt;Password   = <span class="hljs-string">&#x27;secret&#x27;</span>;                               <span class="hljs-comment">//SMTP password</span><br>    <span class="hljs-variable">$mail</span>-&gt;SMTPSecure = <span class="hljs-title class_">PHPMailer</span>::<span class="hljs-variable constant_">ENCRYPTION_STARTTLS</span>;         <span class="hljs-comment">//Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged</span><br>    <span class="hljs-variable">$mail</span>-&gt;Port       = <span class="hljs-number">587</span>;                                    <span class="hljs-comment">//TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above</span><br><br>    <span class="hljs-comment">//Recipients</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">setFrom</span>(<span class="hljs-string">&#x27;from@example.com&#x27;</span>, <span class="hljs-string">&#x27;Mailer&#x27;</span>);<br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addAddress</span>(<span class="hljs-string">&#x27;joe@example.net&#x27;</span>, <span class="hljs-string">&#x27;Joe User&#x27;</span>);     <span class="hljs-comment">//Add a recipient</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addAddress</span>(<span class="hljs-string">&#x27;ellen@example.com&#x27;</span>);               <span class="hljs-comment">//Name is optional</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addReplyTo</span>(<span class="hljs-string">&#x27;info@example.com&#x27;</span>, <span class="hljs-string">&#x27;Information&#x27;</span>);<br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addCC</span>(<span class="hljs-string">&#x27;cc@example.com&#x27;</span>);<br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addBCC</span>(<span class="hljs-string">&#x27;bcc@example.com&#x27;</span>);<br><br>    <span class="hljs-comment">//Attachments</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addAttachment</span>(<span class="hljs-string">&#x27;/var/tmp/file.tar.gz&#x27;</span>);         <span class="hljs-comment">//Add attachments</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">addAttachment</span>(<span class="hljs-string">&#x27;/tmp/image.jpg&#x27;</span>, <span class="hljs-string">&#x27;new.jpg&#x27;</span>);    <span class="hljs-comment">//Optional name</span><br><br>    <span class="hljs-comment">//Content</span><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">isHTML</span>(<span class="hljs-literal">true</span>);                                  <span class="hljs-comment">//Set email format to HTML</span><br>    <span class="hljs-variable">$mail</span>-&gt;Subject = <span class="hljs-string">&#x27;Here is the subject&#x27;</span>;<br>    <span class="hljs-variable">$mail</span>-&gt;Body    = <span class="hljs-string">&#x27;This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;&#x27;</span>;<br>    <span class="hljs-variable">$mail</span>-&gt;AltBody = <span class="hljs-string">&#x27;This is the body in plain text for non-HTML mail clients&#x27;</span>;<br><br>    <span class="hljs-variable">$mail</span>-&gt;<span class="hljs-title function_ invoke__">send</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Message has been sent&#x27;</span>;<br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Message could not be sent. Mailer Error: <span class="hljs-subst">&#123;$mail-&gt;ErrorInfo&#125;</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、easy-sms"><a href="#5、easy-sms" class="headerlink" title="5、easy-sms   "></a>5、<a href="https://github.com/overtrue/easy-sms">easy-sms</a> <img src="https://img.shields.io/github/stars/overtrue/easy-sms?style=plastic"> <img src="https://img.shields.io/github/watchers/overtrue/easy-sms?style=plastic"> <img src="https://img.shields.io/github/forks/overtrue/easy-sms?style=plastic"></h2><blockquote><p>短信发送 PHP 组件。特点：</p><ul><li>支持目前市面多家服务商</li><li>一套写法兼容所有平台</li><li>简单配置即可灵活增减服务商</li><li>内置多种服务商轮询策略、支持自定义轮询策略</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Overtrue</span>\<span class="hljs-title">EasySms</span>\<span class="hljs-title">EasySms</span>;<br><br><span class="hljs-variable">$config</span> = [<br>    <span class="hljs-comment">// HTTP 请求的超时时间（秒）</span><br>    <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">5.0</span>,<br><br>    <span class="hljs-comment">// 默认发送配置</span><br>    <span class="hljs-string">&#x27;default&#x27;</span> =&gt; [<br>        <span class="hljs-comment">// 网关调用策略，默认：顺序调用</span><br>        <span class="hljs-string">&#x27;strategy&#x27;</span> =&gt; <span class="hljs-title class_">\Overtrue\EasySms\Strategies\OrderStrategy</span>::<span class="hljs-variable language_">class</span>,<br><br>        <span class="hljs-comment">// 默认可用的发送网关</span><br>        <span class="hljs-string">&#x27;gateways&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;yunpian&#x27;</span>, <span class="hljs-string">&#x27;aliyun&#x27;</span>,<br>        ],<br>    ],<br>    <span class="hljs-comment">// 可用的网关配置</span><br>    <span class="hljs-string">&#x27;gateways&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;errorlog&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;file&#x27;</span> =&gt; <span class="hljs-string">&#x27;/tmp/easy-sms.log&#x27;</span>,<br>        ],<br>        <span class="hljs-string">&#x27;yunpian&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;api_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;824f0ff2f71cab52936axxxxxxxxxx&#x27;</span>,<br>        ],<br>        <span class="hljs-string">&#x27;aliyun&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;access_key_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;access_key_secret&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;sign_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        ],<br>        <span class="hljs-comment">//...</span><br>    ],<br>];<br><br><span class="hljs-variable">$easySms</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EasySms</span>(<span class="hljs-variable">$config</span>);<br><br><span class="hljs-variable">$easySms</span>-&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-number">13188888888</span>, [<br>    <span class="hljs-string">&#x27;content&#x27;</span>  =&gt; <span class="hljs-string">&#x27;您的验证码为: 6379&#x27;</span>,<br>    <span class="hljs-string">&#x27;template&#x27;</span> =&gt; <span class="hljs-string">&#x27;SMS_001&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">6379</span><br>    ],<br>]);<br><br></code></pre></td></tr></table></figure><h2 id="6、clean-code-php"><a href="#6、clean-code-php" class="headerlink" title="6、clean-code-php   "></a>6、<a href="https://github.com/jupeter/clean-code-php">clean-code-php</a> <img src="https://img.shields.io/github/stars/jupeter/clean-code-php?style=plastic"> <img src="https://img.shields.io/github/watchers/jupeter/clean-code-php?style=plastic"> <img src="https://img.shields.io/github/forks/jupeter/clean-code-php?style=plastic"></h2><blockquote><p>PHP 代码的整洁之道，整理了一系列整洁代码实操。小到变量细道 SOLID 都有涉猎，<a href="https://github.com/php-cpm/clean-code-php">中文译版</a></p></blockquote><h2 id="7、php-curl-class"><a href="#7、php-curl-class" class="headerlink" title="7、php-curl-class   "></a>7、<a href="https://github.com/php-curl-class/php-curl-class">php-curl-class</a> <img src="https://img.shields.io/github/stars/php-curl-class/php-curl-class?style=plastic"> <img src="https://img.shields.io/github/watchers/php-curl-class/php-curl-class?style=plastic"> <img src="https://img.shields.io/github/forks/php-curl-class/php-curl-class?style=plastic"></h2><blockquote><p>该开源项目封装了 PHP 的 cURL 库，使得发送 HTTP 请求变得简单。适用于需要 PHP 爬虫或者其它模拟 HTTP 访问的情况</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 获取豆瓣电影示例</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;../vendor/autoload.php&#x27;</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Curl</span>\<span class="hljs-title">Curl</span>;<br><br><span class="hljs-variable">$curl</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Curl</span>();<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;https://movie.douban.com/j/search_subjects?type=movie&amp;tag=%E8%B1%86%E7%93%A3%E9%AB%98%E5%88%86&amp;sort=time&amp;page_limit=20&amp;page_start=1&quot;</span>;<br><span class="hljs-variable">$curl</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$curl</span>-&gt;<span class="hljs-title function_ invoke__">setOpt</span>(CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$curl</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$curl</span>-&gt;<span class="hljs-title function_ invoke__">getResponse</span>());<span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></table></figure><h2 id="8、CRMEB"><a href="#8、CRMEB" class="headerlink" title="8、CRMEB   "></a>8、<a href="https://github.com/crmeb/CRMEB">CRMEB</a> <img src="https://img.shields.io/github/stars/crmeb/CRMEB?style=plastic"> <img src="https://img.shields.io/github/watchers/crmeb/CRMEB?style=plastic"> <img src="https://img.shields.io/github/forks/crmeb/CRMEB?style=plastic"></h2><blockquote><p>基于 ThinkPhp5.0 + Vue + EasyWeChat 开发的一套开源、免费新零售商城系统（集客户关系管理+营销电商系统）。能够帮助企业基于微信公众号、小程序、PC、APP 等，实现会员管理、数据分析、精准营销的电子商务管理系统。满足企业新零售、预约、O2O、多店等各种业务需求，反正就是功能强大、适用于多种场景的商城系统</p></blockquote><h2 id="9、wizard"><a href="#9、wizard" class="headerlink" title="9、wizard   "></a>9、<a href="https://github.com/mylxsw/wizard">wizard</a> <img src="https://img.shields.io/github/stars/mylxsw/wizard?style=plastic"> <img src="https://img.shields.io/github/watchers/mylxsw/wizard?style=plastic"> <img src="https://img.shields.io/github/forks/mylxsw/wizard?style=plastic"></h2><blockquote><p>一款基于 Laravel 开发框架的开源文档管理系统。目前已经在多家公司部署使用，支持：Markdown、Swagger 文档管理，公司内部的统一身份认证系统（LDAP）等功能</p></blockquote><h2 id="10、PHP-Interview-QA"><a href="#10、PHP-Interview-QA" class="headerlink" title="10、PHP-Interview-QA   "></a>10、<a href="https://github.com/colinlet/PHP-Interview-QA">PHP-Interview-QA</a> <img src="https://img.shields.io/github/stars/colinlet/PHP-Interview-QA?style=plastic"> <img src="https://img.shields.io/github/watchers/colinlet/PHP-Interview-QA?style=plastic"> <img src="https://img.shields.io/github/forks/colinlet/PHP-Interview-QA?style=plastic"></h2><p>《PHP 面试问答》结合实际 PHP 面试经验，系统地汇总面试中的各类的问题，并尝试提供简洁准确的答案，为你面试 PHP 相关岗位提供“秘籍”。包含：网络协议、数据结构与算法、PHP基础、Web、MySQL、Redis、自我介绍、离职原因、职业规划等部分</p><h2 id="11、PasteMe"><a href="#11、PasteMe" class="headerlink" title="11、PasteMe   "></a>11、<a href="https://github.com/LucienShui/PasteMe">PasteMe</a> <img src="https://img.shields.io/github/stars/LucienShui/PasteMe?style=plastic"> <img src="https://img.shields.io/github/watchers/LucienShui/PasteMe?style=plastic"> <img src="https://img.shields.io/github/forks/LucienShui/PasteMe?style=plastic"></h2><p>快速分享文本、代码的网站项目。支持加密、一键复制、永久保存、阅后即焚等功能。<a href="https://pasteme.cn/">在线示例</a></p><h2 id="12、laravel-s"><a href="#12、laravel-s" class="headerlink" title="12、laravel-s   "></a>12、<a href="https://github.com/hhxsv5/laravel-s">laravel-s</a> <img src="https://img.shields.io/github/stars/hhxsv5/laravel-s?style=plastic"> <img src="https://img.shields.io/github/watchers/hhxsv5/laravel-s?style=plastic"> <img src="https://img.shields.io/github/forks/hhxsv5/laravel-s?style=plastic"></h2><blockquote><p>用于快速集成 Swoole 到 Laravel，开箱即用。特点：</p><ul><li>集成 LaravelS 之后无需使用 PHP FPM，直接基于 Swoole 开启 HTTP Server</li><li>代码常驻内存之中，性能提升非常明显</li><li>可快速开发 WebSocket/TCP/UDP 服务</li><li>支持异步任务队列、自定义进程、定时任务，支持更多的业务场景</li><li>可直接使用 Swoole 的很多特性</li><li>等等</li></ul></blockquote><h2 id="13、meedu"><a href="#13、meedu" class="headerlink" title="13、meedu   "></a>13、<a href="https://github.com/Qsnh/meedu">meedu</a> <img src="https://img.shields.io/github/stars/Qsnh/meedu?style=plastic"> <img src="https://img.shields.io/github/watchers/Qsnh/meedu?style=plastic"> <img src="https://img.shields.io/github/forks/Qsnh/meedu?style=plastic"></h2><p>开源免费的在线教育系统，支持在线点播、在线电子书、会员收费三大模块。<a href="https://meedu.vip/">在线尝试</a></p><h2 id="14、arithmetic-php"><a href="#14、arithmetic-php" class="headerlink" title="14、arithmetic-php   "></a>14、<a href="https://github.com/pushaowei/arithmetic-php">arithmetic-php</a> <img src="https://img.shields.io/github/stars/pushaowei/arithmetic-php?style=plastic"> <img src="https://img.shields.io/github/watchers/pushaowei/arithmetic-php?style=plastic"> <img src="https://img.shields.io/github/forks/pushaowei/arithmetic-php?style=plastic"></h2><p>PHP 语言实现的各类算法合集</p><h2 id="15、Biny"><a href="#15、Biny" class="headerlink" title="15、Biny   "></a>15、<a href="https://github.com/Tencent/Biny">Biny</a> <img src="https://img.shields.io/github/stars/Tencent/Biny?style=plastic"> <img src="https://img.shields.io/github/watchers/Tencent/Biny?style=plastic"> <img src="https://img.shields.io/github/forks/Tencent/Biny?style=plastic"></h2><blockquote><p>腾讯开源的一款高性能的超轻量级PHP框架，用于快速开发现代 Web 应用程序。代码简洁优雅，对应用层，数据层，模板渲染层的封装简单易懂，能够快速上手使用，文档齐全。高性能，框架响应时间在 1ms 以内，单机 qps 轻松上3000。</p><ul><li>支持跨库连表，条件复合筛选，查询PK缓存等</li><li>同步异步请求分离，类的自动化加载管理</li><li>支持Form表单验证，支持事件触发机制</li><li>支持浏览器端调试，快速定位程序问题和性能瓶颈</li><li>具有sql防注入，html自动防xss等特性</li></ul></blockquote><h2 id="16、nextcloud-server"><a href="#16、nextcloud-server" class="headerlink" title="16、nextcloud-server   "></a>16、<a href="https://github.com/nextcloud/server">nextcloud-server</a> <img src="https://img.shields.io/github/stars/nextcloud/server?style=plastic"> <img src="https://img.shields.io/github/watchers/nextcloud/server?style=plastic"> <img src="https://img.shields.io/github/forks/nextcloud/server?style=plastic"></h2><p>开源云存储平台，功能齐全，可以用于搭建公司内部的云存储平台</p><h2 id="17、typecho"><a href="#17、typecho" class="headerlink" title="17、typecho   "></a>17、<a href="https://github.com/typecho/typecho">typecho</a> <img src="https://img.shields.io/github/stars/typecho/typecho?style=plastic"> <img src="https://img.shields.io/github/watchers/typecho/typecho?style=plastic"> <img src="https://img.shields.io/github/forks/typecho/typecho?style=plastic"></h2><p>PHP 的一款博客程序，<a href="http://typecho.org/">官网</a>，<a href="http://docs.typecho.org/doku.php">文档</a></p><h2 id="18、VulApps"><a href="#18、VulApps" class="headerlink" title="18、VulApps   "></a>18、<a href="https://github.com/Medicean/VulApps">VulApps</a> <img src="https://img.shields.io/github/stars/Medicean/VulApps?style=plastic"> <img src="https://img.shields.io/github/watchers/Medicean/VulApps?style=plastic"> <img src="https://img.shields.io/github/forks/Medicean/VulApps?style=plastic"></h2><p>用于快速搭建各种漏洞环境，可用来学习、理解常见的漏洞，增强自己在开发过程的安全意识</p><h2 id="19、pinyin"><a href="#19、pinyin" class="headerlink" title="19、pinyin   "></a>19、<a href="https://github.com/overtrue/pinyin">pinyin</a> <img src="https://img.shields.io/github/stars/overtrue/pinyin?style=plastic"> <img src="https://img.shields.io/github/watchers/overtrue/pinyin?style=plastic"> <img src="https://img.shields.io/github/forks/overtrue/pinyin?style=plastic"></h2><p>基于 CC-CEDICT 词典的中文转拼音工具，更准确的支持多音字的汉字转拼音解决方案，示例代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">OvertruePinyinPinyin</span>;<br><br><span class="hljs-variable">$pinyin</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pinyin</span>();<br><br><span class="hljs-variable">$pinyin</span>-&gt;<span class="hljs-title function_ invoke__">convert</span>(<span class="hljs-string">&#x27;带着希望去旅行，比到达终点更美好&#x27;</span>);<br><span class="hljs-comment">// [&quot;dai&quot;, &quot;zhe&quot;, &quot;xi&quot;, &quot;wang&quot;, &quot;qu&quot;, &quot;lv&quot;, &quot;xing&quot;, &quot;bi&quot;, &quot;dao&quot;, &quot;da&quot;, &quot;zhong&quot;, &quot;dian&quot;, &quot;geng&quot;, &quot;mei&quot;, &quot;hao&quot;]</span><br><br><span class="hljs-variable">$pinyin</span>-&gt;<span class="hljs-title function_ invoke__">convert</span>(<span class="hljs-string">&#x27;带着希望去旅行，比到达终点更美好&#x27;</span>, PINYIN_UNICODE);<br><span class="hljs-comment">// [&quot;dài&quot;,&quot;zhe&quot;,&quot;xī&quot;,&quot;wàng&quot;,&quot;qù&quot;,&quot;lǚ&quot;,&quot;xíng&quot;,&quot;bǐ&quot;,&quot;dào&quot;,&quot;dá&quot;,&quot;zhōng&quot;,&quot;diǎn&quot;,&quot;gèng&quot;,&quot;měi&quot;,&quot;hǎo&quot;]</span><br><br><span class="hljs-variable">$pinyin</span>-&gt;<span class="hljs-title function_ invoke__">convert</span>(<span class="hljs-string">&#x27;带着希望去旅行，比到达终点更美好&#x27;</span>, PINYIN_ASCII);<br><span class="hljs-comment">//[&quot;dai4&quot;,&quot;zhe&quot;,&quot;xi1&quot;,&quot;wang4&quot;,&quot;qu4&quot;,&quot;lv3&quot;,&quot;xing2&quot;,&quot;bi3&quot;,&quot;dao4&quot;,&quot;da2&quot;,&quot;zhong1&quot;,&quot;dian3&quot;,&quot;geng4&quot;,&quot;mei3&quot;,&quot;hao3&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="20、Administrative-divisions-of-China"><a href="#20、Administrative-divisions-of-China" class="headerlink" title="20、Administrative-divisions-of-China   "></a>20、<a href="https://github.com/modood/Administrative-divisions-of-China">Administrative-divisions-of-China</a> <img src="https://img.shields.io/github/stars/modood/Administrative-divisions-of-China?style=plastic"> <img src="https://img.shields.io/github/watchers/modood/Administrative-divisions-of-China?style=plastic"> <img src="https://img.shields.io/github/forks/modood/Administrative-divisions-of-China?style=plastic"></h2><p>中华人民共和国行政区划（五级）：省级、地级、县级、乡级和村级</p><h2 id="21、Awesome-Github-REPO"><a href="#21、Awesome-Github-REPO" class="headerlink" title="21、Awesome Github REPO   "></a>21、<a href="https://github.com/florinpop17/app-ideas">Awesome Github REPO</a> <img src="https://img.shields.io/github/stars/florinpop17/app-ideas?style=plastic"> <img src="https://img.shields.io/github/watchers/florinpop17/app-ideas?style=plastic"> <img src="https://img.shields.io/github/forks/florinpop17/app-ideas?style=plastic"></h2><p>高质量、有趣的开源项目</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> awesome </tag>
            
            <tag> 去水印 </tag>
            
            <tag> laravel编码 </tag>
            
            <tag> pdf </tag>
            
            <tag> 邮件 </tag>
            
            <tag> 短信 </tag>
            
            <tag> 代码整洁之道 </tag>
            
            <tag> curl </tag>
            
            <tag> 开源 </tag>
            
            <tag> 文档管理 </tag>
            
            <tag> 面试 </tag>
            
            <tag> swoole </tag>
            
            <tag> 在线教育 </tag>
            
            <tag> 轻量 </tag>
            
            <tag> 存储平台 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 中文转拼音 </tag>
            
            <tag> 地域 </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发人员的画图技巧</title>
      <link href="/posts/d3fb124a.html"/>
      <url>/posts/d3fb124a.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发人员的画图技巧"><a href="#开发人员的画图技巧" class="headerlink" title="开发人员的画图技巧"></a>开发人员的画图技巧</h1><hr><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>思维导图又叫脑图，使用一个中央关键词或想法引起形象化的构造和分类的想法，是一种<strong>结构化思维的树形发散图</strong>。<br>技术人员一般使用思维导图做需求拆解、领域模型分析、业务/技术规划等。<br>平时技术栈的积累、读书笔记也可以通过思维导图很直观地表达出来。</p><p><img src="/images/swdt.png" alt="思维导图"><br><img src="/images/swdt2.png" alt="思维导图"></p><p>思维导图的难点在于，看待一个事物有很多个维度，我们应该<strong>用什么维度去合理细分每个节点</strong>。</p><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>四个要点</p><blockquote><ul><li>要点一：聚焦关注点，关注粗粒度</li><li>要点二：清晰的业务边界</li><li>要点三：实体关系明确</li><li>要点四：穷举变化，避免过程遗漏</li></ul></blockquote><p>常用的有四类：类图、时序图、活动图、状态图</p><h3 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h3><p>常用的有两种：第一是领域模型设计，第二种是表实体关系设计。</p><blockquote><p>DDD（领域驱动设计）</p></blockquote><p>我们都知道实体之间一般有四种关联关系，关联关系从强到弱依次是：</p><p><strong>组合 &gt; 聚合 &gt; 依赖 &gt; 关联</strong></p><p><img src="/images/umllt.png" alt="类图"></p><h3 id="2-时序图"><a href="#2-时序图" class="headerlink" title="2. 时序图"></a>2. 时序图</h3><p>时序图用于分析复杂业务流程，一般简单的CRUD并不需要画时序图。<br>时序图也不需要把所有时序都细化，<br>一句话：聚焦关注点，只关注核心时序。对于多个系统，有多条生命线。 注意一点，角色不是生命线，角色可以使用小圆点表示角色操作入口。对于时序过多的流程，可以合理拆分时序图，或使用水平泳道划分业务阶段，否则你的时序图会特别长，同事根本没耐心看完。<br><img src="/images/umlsxt.png" alt="时序图"></p><h3 id="3-活动图"><a href="#3-活动图" class="headerlink" title="3. 活动图"></a>3. 活动图</h3><p>活动图和产品经理出的流程图差不多，都是动态图，<br>活动图相对时序图关注更粗粒度的业务流程变化，其中一个活动可能包含多个时序。<br>活动图可以通过纵向泳道和横向泳道划分，纵向泳道表示系统，横向泳道表示业务阶段。</p><p><img src="/images/umlhdt.png" alt="活动图"></p><h3 id="4-状态图"><a href="#4-状态图" class="headerlink" title="4. 状态图"></a>4. 状态图</h3><p>状态图又叫状态机，表示对象的某个状态跃迁到另一个状态的集合，比如销售订单的订单状态、采购订单明细的采购状态、结算单的结算状态等。<br>状态图有两个因素需要我们关注——</p><ul><li>状态：当前对象所处的稳定状态</li><li>跃迁条件：状态转移前触发的一系列过程<br>在对象的设计过程中，状态的枚举值不宜过多，状态过多时考虑拆分多个状态属性或使用多条记录代替。</li></ul><p>表示状态的属性一般不超2个，避免有业务关联的状态（枚举值）产生复杂的笛卡尔积。</p><p>跃迁条件复杂的情况下，图不好表达双向状态转移，一般使用状态图+状态表来穷举描述状态变化。</p><p>编码过程中，注意状态迁移的时序问题，必要时做幂等处理，防止数据并发写产生的问题。</p><p>状态表是包含初态、次态的笛卡尔乘积二维关联表，避免分析过程遗漏。</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p>（系统）架构图是为了抽象地表示软件系统的整体轮廓和各个组件之间的<strong>相互关系</strong>和<strong>约束边界</strong>，以及软件系统的物理部署和软件系统的<strong>演进方向</strong>的整体视图。</p><h3 id="架构图的作用"><a href="#架构图的作用" class="headerlink" title="架构图的作用"></a>架构图的作用</h3><p><strong>一图胜千言</strong>。要让干系人理解、遵循架构决策，就需要把架构信息传递出去。架构图就是一个很好的载体。</p><ul><li>解决沟通障碍</li><li>达成共识</li><li>减少歧义<h3 id="画架构图的目的"><a href="#画架构图的目的" class="headerlink" title="画架构图的目的"></a>画架构图的目的</h3>为了梳理现有整体业务，更好地了解各个组件、服务在整个系统中发挥的作用，对不合理的地方进行优化改造</li></ul>]]></content>
      
      
      <categories>
          
          <category> Php </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> php </tag>
            
            <tag> UML </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 速查表</title>
      <link href="/posts/86e797f5.html"/>
      <url>/posts/86e797f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-速查表"><a href="#Git-速查表" class="headerlink" title="Git 速查表"></a>Git 速查表</h1><p>git version 2.36.0</p><h2 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h2><ul><li><code>&lt;&gt; </code>表示【需替换的项】</li><li><code>[] </code>表示【非必填项】</li><li><code>| </code>表示【或】 </li><li><strong>工作树</strong>（工作区），<strong>索引</strong>（暂存区），<strong>Git 目录</strong>（HEAD） 三词含义参照 Git 官网<h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><code>git config --global user.name [&lt;username&gt;] </code>配置用户名</li></ul><p><code>git config --global user.email [&lt;email&gt;]</code> 配置邮箱</p><p><code>git config --global core.editor [&lt;vim&gt;] </code>配置编辑器</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>git clone &lt;options&gt; </code>克隆远程仓库</p><p><code>git init [project]</code> 初始化本地项目</p><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p><code>git add &lt;file&gt;</code> 添加文件到暂存区</p><p><code>git commit -m &lt;commit notes&gt;</code> 将暂存区的内容提交到 HEAD</p><p><code>git commit -am &lt;commit notes&gt;</code> 将 add 和 commit 合并操作</p><p><code>git commit --amend -m &lt;commit notes&gt;</code> 将 add 和 commit 合并操作且合并到上次 commit</p><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p><code>git status </code>显示状态</p><p><code>git diff [HEAD] </code>显示差异</p><p><code>git log</code> 显示日志</p><p><code>git show &lt;commit&gt; </code>显示某个 commit 的详细内容</p><p><code>git blame &lt;file&gt; </code>显示文件每行的 commit 信息</p><h2 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h2><p><code>git restore &lt;file&gt;</code> 撤回工作区的修改</p><p><code>git restore --staged &lt;file&gt;</code> 将已提交到暂存区的修改撤回工作区</p><p><code>git reset [--mixed] &lt;commit&gt;</code> 将当前版本撤回到某个 commit，保留工作区的修改</p><p><code>git reset --soft &lt;commit&gt;</code> 将当前版本撤回到某个 commit, 保留工作区和暂存区的修改</p><p><code>git reset --hard &lt;commit&gt;</code> 将当前版本撤回到某一个 commit，不保留工作区的修改</p><p><code>git rm &lt;file&gt;</code> 将文件从工作区和暂存区删除</p><p><code>git mv &lt;file&gt;</code> 将文件从工作区和暂存区移动或改名</p><p><code>git clean -df</code> 从工作区删除未跟踪的文件</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><code>git branch [--list]</code> 显示所有分支</p><p><code>git branch -a</code> 显示远程分支</p><p><code>git branch &lt;branch&gt;</code> 创建分支</p><p><code>git branch -d|-D &lt;branch&gt;</code> 删除分支</p><p><code>git branch -m &lt;newbranch&gt;</code> 重命名当前分支</p><p><code>git switch &lt;branch&gt;</code> 切换到已有分支</p><p><code>git switch -c &lt;branch&gt;</code> 创建并切换分支</p><p><code>git merge &lt;branch&gt;</code> 将某个分支合并到当前分支</p><p><code>git tag &lt;tagname&gt;</code> 给当前分支打标签</p><p><code>git stash</code> 将工作区的更改存储到脏工作目录中</p><p><code>git stash apply</code> 将脏工作目录中的数据恢复到工作区（不会删除脏工作目录保存的数据）</p><p><code>git stash drop</code> 将脏工作目录中的数据删除</p><p><code>git stash pop</code> 将脏工作目录中的数据恢复工作区并删除脏数据</p><h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><p><code>git remote [-v]</code> 显示远程库</p><p><code>git remote show &lt;origin&gt;</code> 显示某个远程库的信息</p><p><code>git remote add &lt;origin&gt; &lt;url&gt;</code> 添加远程库链接</p><p><code>git remote rm &lt;origin&gt;</code> 删除远程库链接</p><p><code>git remote rename &lt;oldname&gt; &lt;newname&gt;</code> 重命名远程库</p><p><code>git pull [&lt;origin&gt;&lt;branch&gt;]</code> 拉取远程库到本地库</p><p><code>git push [-u &lt;origin&gt; &lt;master&gt;]</code> 将本地库推送到远程库</p><p><code>git push origin --delete &lt;branch&gt;|git push origin :crazy-experiment</code> 删除远程分支</p><p><code>git fetch</code> 从远程库获取到本地库</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p><code>git help &lt;command&gt;</code> 显示某个命令的详细使用文档</p><p><code>git &lt;command&gt; -h</code> 显示某个命令的使用说明</p><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>该命令职责不明确，不建议使用；</p><p><code>git checkout &lt;file&gt;</code> 丢弃工作区的修改</p><p><code>git checkout -f</code> 强制丢弃工作区和暂存区的修改</p><p><code>git checkout &lt;branch&gt;</code> 切换分支</p><p><code>git checkout -b &lt;branch&gt;</code> 创建并切换分支</p>]]></content>
      
      
      <categories>
          
          <category> 速记 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 速记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 后台管理系统</title>
      <link href="/posts/daa836ca.html"/>
      <url>/posts/daa836ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-后台管理系统"><a href="#Laravel-后台管理系统" class="headerlink" title="Laravel 后台管理系统"></a>Laravel 后台管理系统</h1><hr><h2 id="1、dcat-admin"><a href="#1、dcat-admin" class="headerlink" title="1、dcat-admin"></a>1、dcat-admin</h2><blockquote><ul><li><a href="http://www.dcatadmin.com/">文档链接</a></li></ul></blockquote><p>社区成熟</p><h2 id="2、Laravel-Vue-ElementUI"><a href="#2、Laravel-Vue-ElementUI" class="headerlink" title="2、Laravel + Vue + ElementUI"></a>2、Laravel + Vue + ElementUI</h2><blockquote><ul><li>Laravel8.x+Vue+ElementUI前后端分离开发框架</li><li><a href="http://manage.evl.pro.rxthink.cn/document">开发文档</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
          <category> Vue </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> elementUI </tag>
            
            <tag> vue </tag>
            
            <tag> 后台管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Wiki</title>
      <link href="/posts/c8bf02f0.html"/>
      <url>/posts/c8bf02f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-Wiki"><a href="#Laravel-Wiki" class="headerlink" title="Laravel Wiki"></a><em>Laravel Wiki</em></h1><hr><blockquote><ul><li>简单易懂</li><li>短小精湛、实用性强，备忘查阅</li><li>准确性高</li></ul></blockquote><h2 id="1、-Laravel-响应：永远返回-JSON-响应"><a href="#1、-Laravel-响应：永远返回-JSON-响应" class="headerlink" title="1、 Laravel 响应：永远返回 JSON 响应"></a>1、 Laravel 响应：永远返回 JSON 响应</h2><p>你希望所有响应都是 JSON 格式的 ，而不是授权错误会重定向到 <strong>/home</strong> 或 <strong>/login</strong>，最终重定向会变成 <code>InvalidArgumentException: Route [login] is not defined.</code></p><h3 id="第一步、编写-BaseRequest"><a href="#第一步、编写-BaseRequest" class="headerlink" title="第一步、编写 BaseRequest"></a>第一步、编写 BaseRequest</h3><p>首先我们需要构建一个 BaseRequest 来重写 <code>Illuminate\Http\Request</code> ，修改为默认优先使用 <strong>JSON</strong> 响应：</p><p><em>app/Http/Requests/BaseRequest.php</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Requests</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Request</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expectsJson</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wantsJson</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二步、替换-BaseRequest"><a href="#第二步、替换-BaseRequest" class="headerlink" title="第二步、替换 BaseRequest#"></a>第二步、替换 BaseRequest#</h3><p>在 <code>public/index.php</code> 文件中，将 <code>\Illumiate\Http\Request</code> 替换为我们的 <strong>BaseRequest</strong>，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$response</span> = <span class="hljs-variable">$kernel</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<br>    <span class="hljs-variable">$request</span> = <span class="hljs-title class_">\App\Http\Requests\BaseRequest</span>::<span class="hljs-title function_ invoke__">capture</span>()<br>);<br></code></pre></td></tr></table></figure><p>现在所有的响应都是 <code>application/json </code>，包括错误和异常。</p><h2 id="2、Laravel-日志管理：按日期切割日志"><a href="#2、Laravel-日志管理：按日期切割日志" class="headerlink" title="2、Laravel 日志管理：按日期切割日志"></a>2、Laravel 日志管理：按日期切割日志</h2><p>我们可以通过修改 <code>config/logging.php</code> 配置文件中的 <strong>channels</strong> 选项来配置 Laravel 使用的存储机制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;channels&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;stack&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;stack&#x27;</span>,<br>            <span class="hljs-string">&#x27;channels&#x27;</span> =&gt; [<span class="hljs-string">&#x27;daily&#x27;</span>],<br>            <span class="hljs-string">&#x27;ignore_exceptions&#x27;</span> =&gt; <span class="hljs-literal">false</span>,<br>        ],<br>        <span class="hljs-string">&#x27;daily&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;daily&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">storage_path</span>(<span class="hljs-string">&#x27;logs/laravel.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;level&#x27;</span> =&gt; <span class="hljs-string">&#x27;debug&#x27;</span>,<br>            <span class="hljs-string">&#x27;days&#x27;</span> =&gt; <span class="hljs-number">14</span>,<br>        ],<br>]<br><br></code></pre></td></tr></table></figure><h2 id="3、Laravel-数据库：多数据源"><a href="#3、Laravel-数据库：多数据源" class="headerlink" title="3、Laravel 数据库：多数据源"></a>3、Laravel 数据库：多数据源</h2><h3 id="第一步、定义数据库链接"><a href="#第一步、定义数据库链接" class="headerlink" title="第一步、定义数据库链接"></a>第一步、定义数据库链接</h3><p><em>config/database.php</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">return</span> [<br><br>    <span class="hljs-string">&#x27;default&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_CONNECTION&#x27;</span>, <span class="hljs-string">&#x27;mysql&#x27;</span>),<br>    <span class="hljs-string">&#x27;connections&#x27;</span> =&gt; [<br><br>        <span class="hljs-comment"># 主要数据库连接</span><br>        <span class="hljs-string">&#x27;mysql&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span>    =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>            <span class="hljs-string">&#x27;host&#x27;</span>      =&gt; <span class="hljs-string">&#x27;host1&#x27;</span>,<br>            <span class="hljs-string">&#x27;database&#x27;</span>  =&gt; <span class="hljs-string">&#x27;database1&#x27;</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>  =&gt; <span class="hljs-string">&#x27;user1&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>  =&gt; <span class="hljs-string">&#x27;pass1&#x27;</span>,<br>            <span class="hljs-string">&#x27;charset&#x27;</span>   =&gt; <span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br>            <span class="hljs-string">&#x27;collation&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8mb4_unicode_ci&#x27;</span>,<br>            <span class="hljs-string">&#x27;prefix&#x27;</span>    =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        ],<br><br>        <span class="hljs-comment"># 第二个链接</span><br>        <span class="hljs-string">&#x27;mysql2&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span>    =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>            <span class="hljs-string">&#x27;host&#x27;</span>      =&gt; <span class="hljs-string">&#x27;host2&#x27;</span>,<br>            <span class="hljs-string">&#x27;database&#x27;</span>  =&gt; <span class="hljs-string">&#x27;database2&#x27;</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>  =&gt; <span class="hljs-string">&#x27;user2&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>  =&gt; <span class="hljs-string">&#x27;pass2&#x27;</span>,<br>            <span class="hljs-string">&#x27;charset&#x27;</span>   =&gt; <span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br>            <span class="hljs-string">&#x27;collation&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8mb4_unicode_ci&#x27;</span>,<br>            <span class="hljs-string">&#x27;prefix&#x27;</span>    =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        ]<br>    ],<br>];<br></code></pre></td></tr></table></figure><h3 id="第二步、连接第二个数据库"><a href="#第二步、连接第二个数据库" class="headerlink" title="第二步、连接第二个数据库"></a>第二步、连接第二个数据库</h3><h4 id="1-Schema-表结构更改"><a href="#1-Schema-表结构更改" class="headerlink" title="1. Schema 表结构更改"></a>1. Schema 表结构更改</h4><p>   在代码迁移时，可以使用 <strong>Schema</strong> 提供的 <code>connection()</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Schema</span>::<span class="hljs-title function_ invoke__">connection</span>(<span class="hljs-string">&#x27;mysql2&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&#x27;some_table&#x27;</span>, function(<span class="hljs-variable">$table</span>)<br>&#123;<br>    <span class="hljs-variable">$table</span>-&gt;<span class="hljs-title function_ invoke__">increments</span>(<span class="hljs-string">&#x27;id&#x27;</span>):<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-Query-数据库查询"><a href="#2-Query-数据库查询" class="headerlink" title="2. Query 数据库查询"></a>2. Query 数据库查询</h4><p>同样的，数据库查询构造器里提供了一个 <code>connection()</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$users</span> = DB::<span class="hljs-title function_ invoke__">connection</span>(<span class="hljs-string">&#x27;mysql2&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">select</span>(...);<br><br></code></pre></td></tr></table></figure><h4 id="3-Eloquent-数据模型"><a href="#3-Eloquent-数据模型" class="headerlink" title="3. Eloquent 数据模型#"></a>3. Eloquent 数据模型#</h4><p>使用 <code>$connection</code> 属性来设置默认的连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Eloquent</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$connection</span> = <span class="hljs-string">&#x27;mysql2&#x27;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、Laravel-sql日志"><a href="#4、Laravel-sql日志" class="headerlink" title="4、Laravel sql日志"></a>4、Laravel sql日志</h2><h3 id="1、命令行创建-QueryListener日志监听器"><a href="#1、命令行创建-QueryListener日志监听器" class="headerlink" title="1、命令行创建 QueryListener日志监听器"></a>1、命令行创建 <code>QueryListener</code>日志监听器</h3><p><code>php artisan make:listener QueryListener --event=Illuminate\Database\Events\QueryExecuted</code></p><h3 id="2、在handle方法中编写记录sql的业务逻辑"><a href="#2、在handle方法中编写记录sql的业务逻辑" class="headerlink" title="2、在handle方法中编写记录sql的业务逻辑"></a>2、在handle方法中编写记录sql的业务逻辑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Listeners</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">QueryExecuted</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\<span class="hljs-title">Handler</span>\<span class="hljs-title">RotatingFileHandler</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\<span class="hljs-title">Logger</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryListener</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create the event listener.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle the event.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> QueryExecuted $event</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params">QueryExecuted <span class="hljs-variable">$event</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;APP_DEBUG&#x27;</span>) == <span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-variable">$sql</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;&#x27;%s&#x27;&quot;</span>, <span class="hljs-variable">$event</span>-&gt;sql);<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$event</span>-&gt;bindings <span class="hljs-keyword">as</span> <span class="hljs-variable">$i</span> =&gt; <span class="hljs-variable">$binding</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$binding</span> <span class="hljs-keyword">instanceof</span> DateTime) &#123;<br>                        <span class="hljs-variable">$event</span>-&gt;bindings[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$binding</span>-&gt;<span class="hljs-title function_ invoke__">format</span>(<span class="hljs-string">&#x27;\&#x27;Y-m-d H:i:s\&#x27;&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$binding</span>)) &#123;<br>                            <span class="hljs-variable">$event</span>-&gt;bindings[<span class="hljs-variable">$i</span>] = <span class="hljs-string">&quot;&#x27;<span class="hljs-subst">$binding</span>&#x27;&quot;</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-variable">$log</span> = <span class="hljs-title function_ invoke__">vsprintf</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$event</span>-&gt;bindings);<br>                <span class="hljs-variable">$log</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-variable">$log</span>);<br>                <span class="hljs-variable">$log</span> = <span class="hljs-variable">$log</span> . <span class="hljs-string">&#x27;  [ RunTime:&#x27;</span> . <span class="hljs-variable">$event</span>-&gt;time . <span class="hljs-string">&#x27;ms ] &#x27;</span>;<br>                (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-string">&#x27;sql&#x27;</span>))-&gt;<span class="hljs-title function_ invoke__">pushHandler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RotatingFileHandler</span>(<span class="hljs-title function_ invoke__">storage_path</span>(<span class="hljs-string">&#x27;logs/sql/sql_&#x27;</span> . <span class="hljs-title function_ invoke__">php_sapi_name</span>() . <span class="hljs-string">&#x27;.log&#x27;</span>)))-&gt;<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-variable">$log</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span>) &#123;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3、在event服务提供者里配置下listen属性"><a href="#3、在event服务提供者里配置下listen属性" class="headerlink" title="3、在event服务提供者里配置下listen属性:"></a>3、在event服务提供者里配置下listen属性:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-variable">$listen</span> = [<br>        <span class="hljs-string">&#x27;Illuminate\Database\Events\QueryExecuted&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;App\Listeners\QueryListener&#x27;</span>,<br>        ],<br>];<br></code></pre></td></tr></table></figure><h2 id="5、自定义函数的存放位置"><a href="#5、自定义函数的存放位置" class="headerlink" title="5、自定义函数的存放位置"></a>5、自定义函数的存放位置</h2><h3 id="1、创建文件-app-helpers-php"><a href="#1、创建文件-app-helpers-php" class="headerlink" title="1、创建文件 app/helpers.php"></a>1、创建文件 <code>app/helpers.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 示例函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;foo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、修改项目-composer-json"><a href="#2、修改项目-composer-json" class="headerlink" title="2、修改项目 composer.json"></a>2、修改项目 <code>composer.json</code></h3><p>在项目 <code>composer.json</code> 中 <strong>autoload</strong> 部分里的 <strong>files</strong> 字段加入该文件即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<br>    ...<br><br>    <span class="hljs-string">&quot;autoload&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;files&quot;</span>: [<br>            <span class="hljs-string">&quot;app/helpers.php&quot;</span><br>        ]<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">composer dump-autoload</span><br></code></pre></td></tr></table></figure><h2 id="6、模型关联查询whereHas-with"><a href="#6、模型关联查询whereHas-with" class="headerlink" title="6、模型关联查询whereHas  with"></a>6、模型关联查询whereHas  with</h2><blockquote><ul><li>跨库whereHas 无效， 建议查出一张表数据  whereIn查询</li></ul></blockquote><h3 id="1、Model-的配置"><a href="#1、Model-的配置" class="headerlink" title="1、Model 的配置"></a>1、Model 的配置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Post model</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Eloquent</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasOne</span>(<span class="hljs-title class_">Tag</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;tag_id&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tags</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasMany</span>(<span class="hljs-title class_">Tag</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;tag_id&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Tag model</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Eloquent</span>()</span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasOne</span>(<span class="hljs-title class_">Post</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;post_id&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">posts</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasMany</span>(<span class="hljs-title class_">Post</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;post_id&#x27;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><h3 id="1、whereHas关联筛选"><a href="#1、whereHas关联筛选" class="headerlink" title="1、whereHas关联筛选"></a>1、whereHas关联筛选</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$tag</span> = <span class="hljs-title class_">Post</span>::<span class="hljs-title function_ invoke__">query</span>()<br>    -&gt;<span class="hljs-title function_ invoke__">whereHas</span>(<span class="hljs-string">&#x27;tags&#x27;</span>, function (<span class="hljs-variable">$query</span>) &#123;<br>        <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;laravel&#x27;</span>);<br>    &#125;)<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;published_at&#x27;</span>, <span class="hljs-string">&#x27; &gt;= &#x27;</span>, <span class="hljs-title class_">Carbon\Carbon</span>::<span class="hljs-title function_ invoke__">now</span>()-&gt;<span class="hljs-title function_ invoke__">subWeek</span>())<br>    -&gt;<span class="hljs-title function_ invoke__">get</span>();<br></code></pre></td></tr></table></figure><h3 id="2、with预加载"><a href="#2、with预加载" class="headerlink" title="2、with预加载"></a>2、with预加载</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$tag</span> = <span class="hljs-title class_">Post</span>::<span class="hljs-title function_ invoke__">query</span>()<br>    -&gt;<span class="hljs-title function_ invoke__">with</span>([<span class="hljs-string">&#x27;tags&#x27;</span> =&gt; function (<span class="hljs-variable">$query</span>) &#123;<br>        <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;laravel&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">select</span>();<br>    &#125;])<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;published_at&#x27;</span>, <span class="hljs-string">&#x27; &gt;= &#x27;</span>, <span class="hljs-title class_">Carbon\Carbon</span>::<span class="hljs-title function_ invoke__">now</span>()-&gt;<span class="hljs-title function_ invoke__">subWeek</span>())<br>    -&gt;<span class="hljs-title function_ invoke__">get</span>();<br></code></pre></td></tr></table></figure><h2 id="7、模型缓存"><a href="#7、模型缓存" class="headerlink" title="7、模型缓存"></a>7、模型缓存</h2><p><a href="https://github.com/GeneaLabs/laravel-model-caching">Laravel 的模型缓存</a></p><h2 id="8"><a href="#8" class="headerlink" title="8/"></a>8/</h2>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
          <category> Wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP类和工具收集</title>
      <link href="/posts/d9c1a184.html"/>
      <url>/posts/d9c1a184.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://github.com/logoove/phpclass">PHP类和工具收集</a></li></ul></blockquote><hr><h3 id="PHP类和工具收集"><a href="#PHP类和工具收集" class="headerlink" title="PHP类和工具收集"></a>PHP类和工具收集</h3><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这是一个收集php class,以及常用的工具,演示例子等.</p><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><ul><li>adminer 这是一个数据库管理工具,单文件,非常好用支持mysql,sqlite,在没有安装phpmyadmin情况下最好的选择;使用后要删除;</li><li>aliyun 阿里云短信发送演示</li><li>baidu 百度翻译演示,百度身份证,银行卡,图片,分词识别</li><li>code 验证码类</li><li>crxml 用于生成xml格式数据,支持生成rss</li><li>AES 解密加密 支持php和js,php使用openssl,支持密钥</li><li>font-image 字体收集,图片生成处理,上传,压缩</li><li>ftp 异常强大的单文件ftp管理工具,删除文件非常快</li><li>geohash 解决计算附近距离,搜索附近的商业点,两个经纬度距离,地理位置应用处理</li><li>hongbao 红包生成类</li><li>ip ip显示地理位置非网络版</li><li>juhe 聚合短信发送和违章查询</li><li>markdown md解析类</li><li>pdo 一个提取自微擎中的pdo方式处理数据库的工具<a href="https://gitee.com/yoby/pdo">https://gitee.com/yoby/pdo</a></li><li>phpexcel 支持excel的导入导出处理,非常强大,是目前处理excel文件必不可少库,支持xls,xlsx,csv</li><li>spout 支持处理excel的xlsx csv比上面的占用更小的内存以及处理时间,推荐使用php&gt;=5.4,版本2.7.3</li><li>phpqrcode 支持二维码生成,在二维码应用中很常见</li><li>phpQuery 支持抓取网站,进行爬虫,非常强大</li><li>phpword 支持word文件的处理</li><li>pinyin 支持汉字转换拼音</li><li>qnsdk 七牛云存储的sdk</li><li>qreader 支持二维码的读取,目前唯一php写成的读取类</li><li>smarty 模板类,这是精简版本,功能可没有精简</li><li>smtp 发邮,在邮件处理很常用</li><li>tcpdf 读取输出pdf</li><li>we7 微擎自定义函数/通用自定义函数</li><li>zip 压缩成zip和zip管理类</li><li>mock 假数据生成,支持各类数据类型,非常强大,比起flaker更加本土化,原创</li><li>天气,天气生成</li><li>index 是一个首页文件,支持显示php相关配置</li><li>生成头像,完整的一个演示</li><li>行政省市县镇mysql数据</li><li>workerman</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 类 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 资源大全中文版</title>
      <link href="/posts/e605fc7c.html"/>
      <url>/posts/e605fc7c.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://github.com/ziadoz/awesome-php">Awesome PHP</a></li><li>译文出自：<a href="https://github.com/jobbole/awesome-php-cn">PHP 资源大全中文版</a></li></ul></blockquote><hr><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p><em>依赖和包管理库</em></p><ul><li>  Composer/Packagist：一个包和依赖管理器 <a href="http://getcomposer.org/">Composer官网</a>/<a href="http://packagist.org/">Packagist官网</a></li><li>  Composer Installers：一个多框架Composer库安装器 <a href="https://github.com/composer/installers">官网</a></li><li>  Pickle：一个PHP扩展安装器 <a href="https://github.com/FriendsOfPHP/pickle">官网</a></li></ul><h2 id="其他的依赖管理"><a href="#其他的依赖管理" class="headerlink" title="其他的依赖管理"></a>其他的依赖管理</h2><p><em>其他的相关依赖管理</em></p><ul><li>  Satis：一个静态Composer存储库生成器 <a href="https://github.com/composer/satis">官网</a></li><li>  Composition：一个在运行时检查Composer环境的库 <a href="https://github.com/bamarni/composition">官网</a></li><li>  Version：语义版本的解析和比较库 <a href="https://github.com/herrera-io/php-version">官网</a></li><li>  NameSpacer：转化下划线到命名空间的库 <a href="https://github.com/ralphschindler/Namespacer">官网</a></li><li>  Patch Installer：使用Composer安装补丁的库 <a href="https://github.com/goatherd/patch-installer">官网</a></li><li>  Composer Checker：校验Composer配置的工具 <a href="https://github.com/silpion/composer-checker">官网</a></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p><em>Web开发框架</em></p><ul><li>  Symfony2：一个独立组件组成的框架 <a href="http://symfony.com/">官网</a></li><li>  Zend Framework 2：另一个由独立组件组成的框架 <a href="http://framework.zend.com/">官网</a></li><li>  Laravel 4：另一个PHP框架 <a href="http://laravel.com/">官网</a></li><li>  Aura PHP：独立组件的框架 <a href="http://auraphp.com/">官网</a></li><li>  Yii2： 另一个PHP框架 <a href="https://github.com/yiisoft/yii2/">官网</a></li><li>  Nette： 另一个由个体组件组成的框架 <a href="http://nette.org/">官网</a></li><li>  PPI Framework 2：一个互操作性框架 <a href="http://www.ppi.io/">官网</a></li><li>  <a href="http://hao.importnew.com/phalcon/">Phalcon</a>：通过C扩展实现的框架 <a href="http://phalconphp.com/en/">官网</a>、<a href="https://github.com/phalcon/cphalcon">Github</a></li></ul><h2 id="其他框架"><a href="#其他框架" class="headerlink" title="其他框架"></a>其他框架</h2><p><em>其他Web开发框架</em></p><ul><li>  Symfony CMF：创建自定义CMS的内容管理框架 <a href="https://github.com/symfony-cmf/symfony-cmf">官网</a></li><li>  Knp RAD Bundle：Symfony 2的快速应用程序（RAD）包 <a href="http://rad.knplabs.com/">官网</a></li></ul><h2 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h2><p><em>来自Web开发框架的独立组件</em></p><ul><li>  Symfony2 Components：Symfony2组件 <a href="http://symfony.com/doc/master/components/index.html">官网</a></li><li>  Zend Framework 2 Components：ZF2组件 <a href="https://packages.zendframework.com/">官网</a></li><li>  Aura Components：PHP5.4组件包 <a href="http://auraphp.github.com/">官网</a></li><li>  Hoa Project：另一个PHP组件包 <a href="http://hoa-project.net/En/">官网</a></li><li>  Swoft: 基于 Swoole 原生协程的新时代 PHP 全栈式协程框架 <a href="https://www.swoft.org/">官网</a> [GitHub] (<a href="https://github.com/swoft-cloud/swoft">https://github.com/swoft-cloud/swoft</a>)</li></ul><h2 id="微型框架"><a href="#微型框架" class="headerlink" title="微型框架"></a>微型框架</h2><p><em>微型框架和路由</em></p><ul><li>  Silex：基于Symfony2组件的微型框架 <a href="http://silex.sensiolabs.org/">官网</a></li><li>  Slim：另一个简单的微型框架 <a href="http://www.slimframework.com/">官网</a></li><li>  Bullet PHP：用于构建REST APIs的微型框架 <a href="http://bulletphp.com/">官网</a></li><li>  Fast Route：快速路由库 <a href="https://github.com/nikic/FastRoute">官网</a></li><li>  Pux：另一个快速路由库 <a href="https://github.com/c9s/Pux">官网</a></li></ul><h2 id="其他微型框架"><a href="#其他微型框架" class="headerlink" title="其他微型框架"></a>其他微型框架</h2><p><em>其他相关的微型框架和路由</em></p><ul><li>  Silex Skeleton：Silex的项目架构 <a href="https://github.com/fabpot/Silex-Skeleton">官网</a></li><li>  Silex Web Profiler：Silex web调试工具条 <a href="https://github.com/silexphp/Silex-WebProfiler">官网</a></li><li>  Stack： Silex/Symfony的可堆叠中间件库 <a href="https://github.com/stackphp">官网</a></li><li>  Slim Skeleton：Slim架构 <a href="https://github.com/codeguy/Slim-Skeleton">官网</a></li><li>  Slim View：Slim的自定义视图集合 <a href="https://github.com/codeguy/Slim-Views">官网</a></li><li>  Slim Middleware：Slim的自定义中间件集合 <a href="https://github.com/codeguy/Slim-Middleware">官网</a></li><li>  <a href="http://hao.importnew.com/phy-yaf/">phy-yaf</a>：一个用C语言编写的php框架 <a href="http://www.php.net/manual/en/book.yaf.php">官网</a></li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><em>模板化和词法分析的库和工具</em></p><ul><li>  Twig：一个全面的模板语言 <a href="http://twig.sensiolabs.org/">官网</a></li><li>  Twig Cache Extension：一个用于Twig的模板片段缓存库 <a href="https://github.com/asm89/twig-cache-extension">官网</a></li><li>  Mustache：一个Mustache模板语言的PHP实现 <a href="https://github.com/bobthecow/mustache.php">官网</a></li><li>  Phly Mustache：另一个Mustache模板语言的PHP实现 <a href="https://github.com/weierophinney/phly_mustache">官网</a></li><li>  MtHaml： 一个HAML 模板语言的PHP实现 <a href="https://github.com/arnaud-lb/MtHaml">官网</a></li><li>  PHPTAL：一个 <a href="http://en.wikipedia.org/wiki/Template_Attribute_Language">TAL</a> 模板语言的PHP实现 <a href="http://phptal.org/">官网</a></li><li>  Plates：一个原生PHP模板库 <a href="http://platesphp.com/">官网</a></li><li>  Lex：一个轻量级模板解析器 <a href="https://github.com/pyrocms/lex">官网</a></li></ul><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2><p><em>预处理工具来生成Web页面的内容。</em></p><ul><li>  Sculpin：转换Markdown和Twig为静态HTML的工具 <a href="http://sculpin.io/">官网</a></li><li>  Phrozn： 另一个转换Textile，Markdown和Twig为HTML的工具 <a href="http://phrozn.info/">官网</a></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><em>用于HTTP和网站爬取的库</em></p><ul><li>  Guzzle：一个全面的HTTP客户端 <a href="https://github.com/guzzle/guzzle">官网</a></li><li>  Buzz：另一个HTTP客户端 <a href="https://github.com/kriswallsmith/Buzz">官网</a></li><li>  Requests：一个简单的HTTP库 <a href="https://github.com/rmccue/Requests">官网</a></li><li>  HTTPFul：一个链式HTTP库 <a href="https://github.com/nategood/httpful">官网</a></li><li>  Goutte：一个简单的web爬取器 <a href="https://github.com/fabpot/Goutte">官网</a></li><li>  PHP VCR：录制和重放HTTP请求的库 <a href="http://php-vcr.github.io/">官网</a></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><em>解析URL的库</em></p><ul><li>  Purl：一个URL处理库 <a href="https://github.com/jwage/purl">官网</a></li><li>  PHP Domain Parser：一个本地前缀解析库 <a href="https://github.com/jeremykendall/php-domain-parser">官网</a></li></ul><h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><p><em>发送和解析邮件的库</em></p><ul><li>  SwiftMailer：一个邮件解决方案 <a href="http://swiftmailer.org/">官网</a></li><li>  PHPMailer：另一个邮件解决方案 <a href="https://github.com/PHPMailer/PHPMailer">官网</a></li><li>  Fetch：一个IMAP库 <a href="https://github.com/tedivm/Fetch">官网</a></li><li>  Email Reply Parser：一个邮件回复解析库 <a href="https://github.com/willdurand/EmailReplyParser">官网</a></li><li>  Stampie：邮件服务库，不如 <a href="http://sendgrid.com/">SendGrid</a>, <a href="http://postmarkapp.com/">PostMark</a>, <a href="http://www.mailgun.com/">MailGun</a> 和 <a href="http://www.mandrill.com/">Mandrill</a>. <a href="https://github.com/henrikbjorn/Stampie">官网</a></li><li>  CssToInlineStyles：一个在邮件模板内联CSS的库 <a href="https://github.com/tijsverkoyen/CssToInlineStyles">官网</a></li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><em>文件处理和MIME类型检测库</em></p><ul><li>  Gaufrette：一个文件系统抽象层 <a href="https://github.com/KnpLabs/Gaufrette">官网</a></li><li>  Flysystem：另一个文件系统抽象层 <a href="https://github.com/FrenkyNet/Flysystem">官网</a></li><li>  Canal：一个检测互联网媒体类型的库 <a href="https://github.com/dflydev/dflydev-canal">官网</a></li><li>  Apache MIME Types：一个解析Apache MIME类型的库 <a href="https://github.com/dflydev/dflydev-apache-mime-types">官网</a></li><li>  Ferret：一个MIME检测库 <a href="https://github.com/versionable/Ferret">官网</a></li><li>  Hoa Mime：另一个MIME检测库 <a href="https://github.com/hoaproject/Mime">官网</a></li><li>  Lurker：一个资源跟踪库 <a href="https://github.com/henrikbjorn/Lurker">官网</a></li><li>  PHP File Locator：一个在大型项目定位文件的库 <a href="https://github.com/herrera-io/php-file-locator">官网</a></li><li>  PHP FFmpeg：一个用于<a href="http://www.ffmpeg.org/">FFmpeg</a> 视频包装的库. <a href="https://github.com/alchemy-fr/PHP-FFmpeg/">官网</a></li><li>  CSV：一个CSV数据处理库 <a href="https://github.com/nyamsprod/Bakame.csv">官网</a></li></ul><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p><em>处理流的库</em></p><ul><li>  Streamer：一个面向对象的流包装库 <a href="https://github.com/fzaninotto/Streamer">官网</a></li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><em>实现依赖注入设计模式的库</em></p><ul><li>  Pimple：一个小的依赖注入容器 <a href="http://pimple.sensiolabs.org/">官网</a></li><li>  Auryn：另一个依赖注入容器 <a href="https://github.com/rdlowrey/Auryn">官网</a></li><li>  Orno DI：另一个可伸缩的依赖注入容器 <a href="https://github.com/orno/di">官网</a></li><li>  PHP DI：一个使用注释实现的依赖注入 <a href="http://mnapoli.github.com/PHP-DI/">官网</a></li><li>  Acclimate：一个依赖注入容器和服务定位的通用接口 <a href="https://github.com/jeremeamia/acclimate">官网</a></li></ul><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p><em>处理图像的库</em></p><ul><li>  Imagine：一个图像处理库 <a href="http://imagine.readthedocs.org/en/latest/index.html">官网</a></li><li>  PHP Image Workshop：另一个图像处理库 <a href="https://github.com/Sybio/ImageWorkshop">官网</a></li><li>  Intervention Image：另一个图像处理库 <a href="https://github.com/Intervention/image">官网</a></li><li>  GIF Frame Extractor：一个提取GIF动画帧信息的库 <a href="https://github.com/Sybio/GifFrameExtractor">官网</a></li><li>  GIF Creator：一个通过多张图片创建GIF动画的库 <a href="https://github.com/Sybio/GifCreator">官网</a></li><li>  Image With Text：一个在图像中嵌入文本的库 <a href="https://github.com/nmcteam/image-with-text">官网</a></li><li>  Color Extractor：一个从图像中提取颜色的库 <a href="https://github.com/php-loep/color-extractor">官网</a></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><em>测试代码和生成测试数据的库</em></p><ul><li>  PHPUnit：一个单元测试框架 <a href="https://github.com/sebastianbergmann/phpunit">官网</a></li><li>  DBUnit：PHPUnit的数据库测试库 <a href="https://github.com/sebastianbergmann/dbunit">官网</a></li><li>  ParaTest：PHPUnit的并行测试库 <a href="https://github.com/brianium/paratest">官网</a></li><li>  PHPSpec：基于功能点设计的单元测试库 <a href="https://github.com/phpspec/phpspec">官网</a></li><li>  Codeception：一个全栈测试框架 <a href="https://github.com/Codeception/Codeception">官网</a></li><li>  AspectMock： PHPUnit/ Codeception 模拟框架。 <a href="https://github.com/Codeception/AspectMock">官网</a></li><li>  Atoum：一个简单的测试库 <a href="https://github.com/atoum/atoum">官网</a></li><li>  Mockery：一个用测试的模拟对象库 <a href="https://github.com/padraic/mockery">官网</a></li><li>  Phake：另一个用测试的模拟对象库 <a href="https://github.com/mlively/Phake">官网</a></li><li>  Prophecy：一个可选度很高的模拟框架 <a href="https://github.com/phpspec/prophecy">官网</a></li><li>  Faker：一个伪数据生成库 <a href="https://github.com/fzaninotto/Faker">官网</a></li><li>  Samsui：另一个伪数据生成库 <a href="https://github.com/mauris/samsui">官网</a></li><li>  Alice：富有表现力的一代库 <a href="https://github.com/nelmio/alice">官网</a></li><li>  Behat：一个行为驱动开发（BDD）测试框架 <a href="http://behat.org/">官网</a></li><li>  Pho：一个行为驱动开发测试框架 <a href="https://github.com/danielstjules/pho">官网</a></li><li>  Mink：Web验收测试 <a href="http://mink.behat.org/">官网</a></li><li>  HTTP Mock：一个在单元测试模拟HTTP请求的库 <a href="https://github.com/InterNations/http-mock">官网</a></li><li>  Stream：一个用于测试的虚拟文件系统流的包装器 <a href="https://github.com/mikey179/vfsStream">VFS 官网</a></li><li>  VFS：另一个用于测试虚拟文件系统 <a href="https://github.com/adlawson/vfs.php">官网</a></li><li>  Locust：一个用Python编写的现代加载测试库 <a href="http://locust.io/">官网</a></li></ul><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p><em>持续集成的库和应用</em></p><ul><li>  Travis CI：一个持续集成平台 <a href="https://travis-ci.org/">官网</a></li><li>  PHPCI：一个PHP的开源持续集成平台 <a href="http://www.phptesting.org/">官网</a></li><li>  Sismo：一个持续测试服务库 <a href="http://sismo.sensiolabs.org/">官网</a></li><li>  Jenkins-PHP：支持<a href="http://jenkins-ci.org/">Jenkins</a>的一个持续集成平台 <a href="http://jenkins-php.org/index.html">官网</a></li><li>  JoliCi：一个用PHP编写的由Docker支持的持续集成客户端 <a href="https://github.com/jolicode/JoliCi">官网</a></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><em>生成项目文档的库</em></p><ul><li>  Sami：一个API文档生成器 <a href="https://github.com/fabpot/Sami">官网</a></li><li>  APIGen：另一个API文档生成器 <a href="https://github.com/apigen/apigen">官网</a></li><li>  PHP Documentor 2：一个API文档生成器 <a href="https://github.com/phpDocumentor/phpDocumentor2">官网</a></li><li>  phpDox：一个PHP项目的文档生成器（不限于API文档） <a href="http://phpdox.de/">官网</a></li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p><em>生成安全的随机数，加密数据，扫描漏洞的库</em></p><ul><li>  HTML Purifier：一个兼容标准的HTML过滤器 <a href="https://github.com/ezyang/htmlpurifier">官网</a></li><li>  RandomLib：一个生成随机数和字符串的库 <a href="https://github.com/ircmaxell/RandomLib">官网</a></li><li>  True Random：使用 <a href="http://www.random.org/">www.random.org</a>生成随机数的库 <a href="https://github.com/pixeloution/true-random">官网</a></li><li>  SecurityMultiTool：一个PHP安全库 <a href="https://github.com/padraic/SecurityMultiTool">官网</a></li><li>  PHPSecLib：一个纯PHP安全通信库 <a href="http://phpseclib.sourceforge.net/">官网</a></li><li>  TCrypto：一个简单的键值加密存储库 <a href="https://github.com/timoh6/TCrypto">官网</a></li><li>  IDS： 一个结构化的PHP安全层 <a href="https://github.com/PHPIDS/PHPIDS">PHP 官网</a></li><li>  PHP-SSH：一个试验的面向对象的SSH包装库 <a href="https://github.com/Herzult/php-ssh">官网</a></li><li>  IniScan：一个扫描PHP INI文件安全的库 <a href="https://github.com/psecio/iniscan">官网</a></li><li>  SensioLabs Security Check：一个为检查Composer依赖提供安全建议的web工具 <a href="https://security.sensiolabs.org/">官网</a></li><li>  Zed：一个集成的web应用渗透测试工具 <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">官网</a></li></ul><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p><em>处理和存储密码的库和工具</em></p><ul><li>  Password Compat：一个新的PHP5.5密码函数的兼容库 <a href="https://github.com/ircmaxell/password_compat">官网</a></li><li>  phpass： 一个便携式的密码哈希框架 <a href="http://www.openwall.com/phpass/">官网</a></li><li>  PHP Password Lib：一个生成和校验密码的库 <a href="https://github.com/ircmaxell/PHP-PasswordLib">官网</a></li><li>  Password Policy：一个PHP和JavaScript的密码策略库 <a href="https://github.com/ircmaxell/password-policy">官网</a></li><li>  Password Validator：校验和升级密码哈希的库 <a href="https://github.com/jeremykendall/password-validator">官网</a></li><li>  Zxcvbn PHP：一个基于Zxcvbn JS的现实的PHP密码强度估计库 <a href="https://github.com/bjeavons/zxcvbn-php">官网</a></li></ul><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p><em>分析，解析和处理代码库的库的工具</em></p><ul><li>  PHP Parser：一个PHP编写的PHP解析器 <a href="https://github.com/nikic/PHP-Parser">官网</a></li><li>  PHPPHP： 一个PHP实现的PHP虚拟机 <a href="https://github.com/ircmaxell/PHPPHP">官网</a></li><li>  PHPSandbox：一个PHP沙盒环境 <a href="https://github.com/fieryprophet/php-sandbox">官网</a></li><li>  Dissect：一个词法和语法分析的工具集合 <a href="https://github.com/jakubledl/dissect">官网</a></li><li>  PHP Mess Detector：一个扫描代码缺陷,次优代码，未使用的参数等等的库。 <a href="http://phpmd.org/">官网</a></li><li>  PHP Code Sniffer：一个检测PHP、CSS和JS代码标准冲突的库 <a href="https://github.com/squizlabs/PHP_CodeSniffer">官网</a></li><li>  PHPCPD： 一个检测复制和粘贴代码的库 <a href="https://github.com/sebastianbergmann/phpcpd">官网</a></li><li>  PHP Analyser：一个分析PHP代码查找缺陷和错误的库 <a href="https://github.com/scrutinizer-ci/php-analyzer">官网</a></li><li>  PHP CS Fixer： 一个编码标准库 <a href="https://github.com/fabpot/PHP-CS-Fixer">官网</a></li><li>  PHP Manipulator：一个分析和修改PHP源代码的库 <a href="https://github.com/schmittjoh/php-manipulator">官网</a></li><li>  PHP Metrics：一个静态测量库 <a href="https://github.com/Halleck45/PhpMetrics">官网</a></li><li>  PHP Refactoring Browser：一个重构PHP代码的命令行工具集 <a href="https://github.com/QafooLabs/php-refactoring-browser">官网</a></li><li>  UBench：一个简单的微型基准检测库 <a href="https://github.com/devster/ubench">官网</a></li><li>  Athletic：一个基于注释的基准检测库 <a href="https://github.com/polyfractal/athletic">官网</a></li><li>  Mondrian： 使用使用图论的代码分析工具 <a href="https://github.com/Trismegiste/Mondrian">官网</a></li><li>  Scrutinizer：一个审查PHP代码的web工具 <a href="https://scrutinizer-ci.com/">官网</a></li><li>  PHPLOC：一个快速测量PHP项目大小的工具 <a href="https://github.com/sebastianbergmann/phploc">官网</a></li><li>  xHprof：另一个PHP分析工具 <a href="https://github.com/phacility/xhprof">官网</a></li><li>  PHPCheckstyle：一个帮助遵守特定的编码惯例的工具。 <a href="https://github.com/jbrooksuk/phpcheckstyle">官网</a></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p><em>调试代码的库和工具</em></p><ul><li>  xDebug：一个调试和分析PHP的工具 <a href="https://github.com/xdebug/xdebug">官网</a></li><li>  PHP Debug Bar： 一个调试工具栏 <a href="http://phpdebugbar.com/">官网</a></li><li>  PHP Console：一个web调试控制台 <a href="https://github.com/Seldaek/php-console">官网</a></li><li>  Barbushin PHP Console：另一个使用Google Chrome的web调试控制台 <a href="https://github.com/barbushin/php-console">官网</a></li><li>  PHPDBG：一个交互的PHP调试器 <a href="http://phpdbg.com/">官网</a></li><li>  Tracy：一个简单的错误检测，写日志和时间测量库 <a href="https://github.com/nette/tracy">官网</a></li></ul><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p><em>项目构建和自动化工具</em></p><ul><li>  Go：一个简单的PHP构建工具 <a href="https://github.com/herrera-io/php-go">官网</a></li><li>  Bob：一个简单的项目自动化工具 <a href="https://github.com/CHH/bob">官网</a></li><li>  Phake：一个PHP克隆库 <a href="https://github.com/jaz303/phake">官网</a></li><li>  Box：一个构建PHAR文件的工具 <a href="https://github.com/kherge/Box">官网</a></li><li>  Phing：一个灵感来自于Apache Ant的PHP项目构建系统 <a href="http://www.phing.info/">官网</a></li></ul><h2 id="任务运行器"><a href="#任务运行器" class="headerlink" title="任务运行器"></a>任务运行器</h2><p><em>自动运行任务的库</em></p><ul><li>  Task：一个灵感来源于Grunt和Gulp的纯PHP任务运行器 <a href="http://taskphp.github.io/">官网</a></li><li>  Robo：一个面向对象配置的PHP任务运行器 <a href="https://github.com/Codegyre/Robo">官网</a></li><li>  Bldr：一个构建在Symfony组件上的PHP任务运行器 <a href="http://bldr.io/">官网</a></li></ul><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p><em>构建导航结构的工具</em></p><ul><li>  KnpMenu：一个菜单库 <a href="https://github.com/KnpLabs/KnpMenu">官网</a></li><li>  Cartographer：一个站点地图生成库 <a href="https://github.com/tackk/cartographer">官网</a></li></ul><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p><em>管理，压缩和最小化web站点资源的工具</em></p><ul><li>  Assetic：一个资源管理的管道库 <a href="https://github.com/kriswallsmith/assetic">官网</a></li><li>  Pipe：另一个资源管理的管道库 <a href="https://github.com/CHH/pipe">官网</a></li><li>  Munee：一个资源优化库 <a href="https://github.com/meenie/munee">官网</a></li><li>  JShrink：一个JavaScript最小化库 <a href="https://github.com/tedivm/JShrink">官网</a></li><li>  Puli：一个检测资源绝对路径的库 <a href="https://github.com/webmozart/puli">官网</a></li></ul><h2 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h2><p><em>为地理编码地址和使用纬度经度的库。</em></p><ul><li>  GeoCoder：一个地理编码库 <a href="http://geocoder-php.org/">官网</a></li><li>  GeoTools：一个地理工具相关的库 <a href="https://github.com/php-loep/Geotools">官网</a></li><li>  PHPGeo：一个简单的地理库 <a href="https://github.com/mjaschen/phpgeo">官网</a></li><li>  GeoJSON：一个地理JSON的实现 <a href="https://github.com/jmikola/geojson">官网</a></li></ul><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p><em>处理日期和时间的库</em></p><ul><li>  Carbon：一个简单的日期时间API扩展 <a href="https://github.com/briannesbitt/Carbon">官网</a></li><li>  ExpressiveDate：另一个日期时间API扩展 <a href="https://github.com/jasonlewis/expressive-date">官网</a></li><li>  CalendR：一个日历管理库 <a href="http://yohan.giarel.li/CalendR">官网</a></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><em>时间驱动或非阻塞事件循环实现的库</em></p><ul><li>  React：一个事件驱动的非阻塞I/O库 <a href="https://github.com/reactphp/react">官网</a></li><li>  Rx.PHP：一个reactive扩展库 <a href="https://github.com/asm89/Rx.PHP">官网</a></li><li>  Ratchet： 一个web套接字库 <a href="https://github.com/cboden/Ratchet">官网</a></li><li>  Hoa WebSocket：另一个web套接字库 <a href="https://github.com/hoaproject/Websocket">官网</a></li><li>  Hoa EventSource：一个事件源库 <a href="https://github.com/hoaproject/Eventsource">官网</a></li><li>  Evenement：一个事件分发库 <a href="https://github.com/igorw/evenement">官网</a></li><li>  FuelPHP Event：另一个事件分发库 <a href="https://github.com/fuelphp/event">官网</a></li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p><em>生成和处理日志文件的库</em></p><ul><li>  Monolog：一个全面的日志工具 <a href="https://github.com/Seldaek/monolog">官网</a></li><li>  KLogger：一个易用的PSR-3兼容的日志类 <a href="https://github.com/katzgrau/KLogger">官网</a></li></ul><h2 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h2><p><em>处理支付和构建在线电子商务商店的库和应用</em></p><ul><li>  OmniPay：一个框架混合了多网关支付处理的库 <a href="https://github.com/adrianmacneil/omnipay">官网</a></li><li>  Payum：一个支付抽象库 <a href="https://github.com/payum/payum">官网</a></li><li>  Sylius：一个开源的电子商务解决方案 <a href="http://www.sylius.org/">官网</a></li><li>  Thelia：另一个开源的电子商务解决方案 <a href="http://thelia.net/v2/">官网</a></li><li>  Money：一个Fowler金钱模式的PHP实现 <a href="https://github.com/mathiasverraes/money">官网</a></li><li>  Sebastian Money：另一个处理货币值的库 <a href="https://github.com/sebastianbergmann/money">官网</a></li><li>  Swap：一个汇率库 <a href="https://github.com/florianv/swap">官网</a></li></ul><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p><em>处理PDF文件的库和软件</em></p><ul><li>  Snappy：一个PDF和图像生成器库 <a href="https://github.com/KnpLabs/snappy">官网</a></li><li>  WKHTMLToPDF：一个将HTML转换为PDF的工具 <a href="https://github.com/antialize/wkhtmltopdf">官网</a></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><em>使用对象关系映射（ORM）或数据映射技术的数据库交互库</em></p><ul><li>  Doctrine：一个全面的DBAL和ORM <a href="http://www.doctrine-project.org/">官网</a></li><li>  Doctrine Extensions：一个Doctrine行为扩展的集合 <a href="https://github.com/l3pp4rd/DoctrineExtensions">官网</a></li><li>  Propel：一个快速的ORM，迁移库和查询构架器 <a href="http://www.propelorm.org/">官网</a></li><li>  Eloquent：Laravel 4 ORM <a href="https://github.com/illuminate/database">官网</a></li><li>  Baum：一个Eloquent的嵌套集实现 <a href="https://github.com/etrepat/baum">官网</a></li><li>  Spot2：一个MySQL的ORM映射器 <a href="https://github.com/vlucas/spot2">官网</a></li><li>  RedBean：一个轻量级，低配置的ORM <a href="http://redbeanphp.com/">官网</a></li><li>  Pomm：一个PostgreSQL对象模型管理器 <a href="https://github.com/chanmix51/Pomm">官网</a></li><li>  ProxyManager：一个为数据映射生成代理对象的工具集 <a href="https://github.com/Ocramius/ProxyManager">官网</a></li></ul><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>帮助管理数据库模式和迁移的库</p><ul><li>  PHPMig：另一个迁移管理库 <a href="https://github.com/davedevelopment/phpmig">官网</a></li><li>  Phinx：另一个数据库迁移管理库 <a href="https://github.com/robmorgan/phinx">官网</a></li><li>  Migrations：一个迁移管理库 <a href="https://github.com/icomefromthenet/Migrations">官网</a></li><li>  Doctrine Migrations：一个Doctrine迁移库 <a href="http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html">官网</a></li></ul><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p><em>处理NoSQL后端的库</em></p><ul><li>  MongoQB：一个MongoDB查询构建库 <a href="https://github.com/alexbilbie/MongoQB">官网</a></li><li>  Monga：一个MongoDB抽象库 <a href="https://github.com/thephpleague/monga">官网</a></li><li>  Predis： 一个功能完整的Redis库 <a href="https://github.com/nrk/predis">官网</a></li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><em>处理事件和任务队列的库</em></p><ul><li>  Pheanstalk：一个Beanstalkd 客户端库 <a href="https://github.com/pda/pheanstalk">官网</a></li><li>  HP AMQP：一个纯PHP AMQP库 <a href="https://github.com/videlalvaro/php-amqplib">P官网</a></li><li>  Thumper： 一个RabbitMQ模式库 <a href="https://github.com/videlalvaro/Thumper">官网</a></li><li>  Bernard：一个多后端抽象库 <a href="https://github.com/bernardphp/bernard">官网</a></li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><em>在数据上索引和执行查询的库和软件</em></p><ul><li>  ElasticSearch PHP：ElasticSearch的官方客户端库 <a href="https://github.com/elasticsearch/elasticsearch-php">官网</a></li><li>  Elastica：ElasticSearch的客户端库 <a href="https://github.com/ruflin/Elastica">官网</a></li><li>  Solarium：Solr的客户端库 <a href="http://www.solarium-project.org/">官网</a></li><li>  SphinxQL query builder：Sphinx搜索引擎的的查询库 <a href="http://foolcode.github.io/SphinxQL-Query-Builder/">官网</a></li></ul><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p><em>构建命令行工具的库</em></p><ul><li>  Boris：一个微型PHP REPL <a href="https://github.com/d11wtq/boris">官网</a></li><li>  PsySH：另一个微型PHP REPL <a href="https://github.com/bobthecow/psysh">官网</a></li><li>  Pecan：一个事件驱动和非阻塞内核 <a href="https://github.com/mcrumm/pecan">官网</a></li><li>  GetOpt：一个命令行选择解析器 <a href="https://github.com/ulrichsg/getopt-php">官网</a></li><li>  OptParse：另一个命令行选择解析器 <a href="https://github.com/CHH/optparse">官网</a></li><li>  Commando：另一个简单的命令行选择解析器 <a href="https://github.com/nategood/commando">官网</a></li><li>  GetOptionKit：另一个命令行选择解析器 <a href="https://github.com/c9s/php-GetOptionKit">官网</a></li><li>  Cron Expression：计算cron运行日期的库 <a href="https://github.com/mtdowling/cron-expression">官网</a></li><li>  ShellWrap：一个简单的命令行包装库 <a href="https://github.com/MrRio/shellwrap">官网</a></li><li>  Hoa Console：另一个命令行库 <a href="https://github.com/hoaproject/Console">官网</a></li><li>  Shunt：一个在多台远程机器上并行运行命令行的库 <a href="https://github.com/php-loep/shunt">官网</a></li><li>  Cilex：一个构建命令行工具的微型框架 <a href="https://github.com/Cilex/Cilex">官网</a></li></ul><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><p><em>实现身份验证的库</em></p><ul><li>  Sentry：一个混合的身份验证和授权的框架库 <a href="https://github.com/cartalyst/sentry">官网</a></li><li>  Sentry Social：一个社交网络身份验证库 <a href="http://docs.cartalyst.com/sentry-social-2/introduction">官网</a></li><li>  Opauth：一个多渠道的身份验证框架 <a href="https://github.com/opauth/opauth">官网</a></li><li>  OAuth2：一个OAuth2身份验证服务，资源服务器和客户端库 <a href="https://github.com/php-loep/oauth2-server">官网</a></li><li>  OAuth2 Server：另一个OAuth2服务器实现 <a href="http://bshaffer.github.io/oauth2-server-php-docs/">官网</a></li><li>  PHP oAuthLib：另一个OAuth库 <a href="https://github.com/Lusitanian/PHPoAuthLib">官网</a></li><li>  TwitterOAuth：一个Twitter OAuth库 <a href="https://github.com/ruudk/twitteroauth">官网</a></li><li>  TwitterSDK：一个完全测试的Twitter SDK <a href="https://github.com/lyrixx/twitter-sdk">官网</a></li><li>  Hawk：一个Hawk HTTP身份认证库 <a href="https://github.com/dflydev/dflydev-hawk">官网</a></li><li>  HybridAuth：一个开源的社交登陆库 <a href="https://github.com/hybridauth/hybridauth">官网</a></li></ul><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p><em>处理标记的库</em></p><ul><li>  Decoda：一个轻量级标记解析库 <a href="http://milesj.me/code/php/decoda">官网</a></li><li>  PHP Markdown：一个Markdown解析器 <a href="https://github.com/michelf/php-markdown">官网</a></li><li>  CommonMark PHP：一个对 <a href="https://jgm.github.io/stmd/spec.html">CommonMark spec</a>全支持的Markdown解析器 <a href="https://github.com/thephpleague/commonmark">官网</a></li><li>  Dflydev Markdown：另一个Markdown解析器 <a href="https://github.com/dflydev/dflydev-markdown">官网</a></li><li>  Parsedown：另一个Markdown解析器 <a href="https://github.com/erusev/parsedown">官网</a></li><li>  Ciconia：另一个支持Github Markdown风格的Markdown解析器 <a href="https://github.com/kzykhys/Ciconia">官网</a></li><li>  Cebe Markdown：一个快速的可扩展的Markdown解析器 <a href="https://github.com/cebe/markdown">官网</a></li><li>  HTML5 PHP：一个HTML5解析和序列化库 <a href="https://github.com/Masterminds/html5-php">官网</a></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><em>解析和处理字符串的库</em></p><ul><li>  ANSI to HTML5：ANSI到HTML5的转化库 <a href="https://github.com/sensiolabs/ansi-to-html">官网</a></li><li>  Patchwork UTF-8：一个处理UTF-8字符串的便携库 <a href="https://github.com/nicolas-grekas/Patchwork-UTF8">官网</a></li><li>  Hoa String：另一个UTF-8字符串库 <a href="https://github.com/hoaproject/String">官网</a></li><li>  Stringy：一个多字节支持的字符串处理库 <a href="https://github.com/danielstjules/Stringy">官网</a></li><li>  Color Jizz：处理和转换颜色的库 <a href="https://github.com/mikeemoo/ColorJizz-PHP">官网</a></li><li>  UUID： 生成UUIDs的库 <a href="https://github.com/ramsey/uuid">官网</a></li><li>  Slugify：转换字符串到slug的库 <a href="https://github.com/cocur/slugify">官网</a></li><li>  Urlify： 一个Django的 URLify.jsPHP通道 <a href="https://github.com/jbroadway/urlify">官网</a></li><li>  Text： 一个文本处理库 <a href="https://github.com/kzykhys/Text">官网</a></li><li>  SQL Formatter：一个格式化SQL语句的库 <a href="https://github.com/jdorn/sql-formatter/">官网</a></li><li>  UA Parser： 一个解析用户代理字符串的库 <a href="https://github.com/tobie/ua-parser/tree/master/php">官网</a></li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p><em>处理数字的库</em></p><ul><li>  Numbers PHP：处理数字的库 <a href="https://github.com/powder96/numbers.php">官网</a></li><li>  Math：处理大数字的库 <a href="https://github.com/moontoast/math">官网</a></li><li>  ByteUnits：在二进制和度量系统中解析,格式化和转换字节单元的库 <a href="https://github.com/gabrielelana/byte-units">官网</a></li><li>  PHP Units of Measure：一个计量单位转换的库 <a href="https://github.com/triplepoint/php-units-of-measure">官网</a></li><li>  PHP Conversion：另一个计量单位转换的库 <a href="https://github.com/Crisu83/php-conversion">官网</a></li><li>  LibPhoneNumber for PHP：Google电话号码处理的PHP实现库 <a href="https://github.com/giggsey/libphonenumber-for-php">官网</a></li></ul><h2 id="过滤和验证"><a href="#过滤和验证" class="headerlink" title="过滤和验证"></a>过滤和验证</h2><p><em>过滤和验证数据的库</em></p><ul><li>  Filterus：一个简单的PHP过滤库 <a href="https://github.com/ircmaxell/filterus">官网</a></li><li>  Respect Validate：一个简单的验证库 <a href="https://github.com/Respect/Validation">官网</a></li><li>  Valitron：另一个验证库 <a href="https://github.com/vlucas/valitron">官网</a></li><li>  Upload：一个处理文件上传和验证的库 <a href="https://github.com/codeguy/Upload">官网</a></li><li>  DMS Filter：一个注释过滤库 <a href="https://github.com/rdohms/DMS-Filter">官网</a></li><li>  MetaYaml：一个支持YAML,JSON和XML的模式验证库 <a href="https://github.com/romaricdrigon/MetaYaml">官网</a></li><li>  ISO-codes：验证各种ISO和ZIP编码的库(IBAN、SWIFT/BIC、BBAN、VAT、SSN、UKNIN) <a href="https://github.com/ronanguilloux/IsoCodes">官网</a></li></ul><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p><em>开发REST-ful API的库和Web工具</em></p><ul><li>  Apigility：一个使用Zend Framework 2构建的API构建器 <a href="https://github.com/zfcampus/zf-apigility-skeleton">官网</a></li><li>  Hateoas：一个HOATEOAS REST web服务库 <a href="https://github.com/willdurand/Hateoas">官网</a></li><li>  HAL：一个超文本应用语言（HAL)构建库 <a href="https://github.com/blongden/hal">官网</a></li><li>  Negotiation：一个内容协商库 <a href="https://github.com/willdurand/Negotiation">官网</a></li><li>  Drest：一个将Doctrine实体暴露为REST资源节点的库 <a href="https://github.com/leedavis81/drest">官网</a></li><li>  Restler：一个将PHP方法暴露为RESTful web API的轻量级框架 <a href="https://github.com/Luracast/Restler">官网</a></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><em>缓存数据的库</em></p><ul><li>  Alternative PHP Cache (APC)：打开PHP伪代码缓存 <a href="http://www.php.net/manual/en/book.apc.php">官网</a></li><li>  Cache：一个缓存库（Doctrine部分） <a href="https://github.com/doctrine/cache">官网</a></li><li>  Stash：另一个缓存库 <a href="https://github.com/tedivm/Stash">官网</a></li></ul><h2 id="数据结构和存储"><a href="#数据结构和存储" class="headerlink" title="数据结构和存储"></a>数据结构和存储</h2><p><em>实现数据结构和存储技术的库</em></p><ul><li>  Ardent：一个数据结构库 <a href="https://github.com/morrisonlevi/Ardent">官网</a></li><li>  PHP Collections： 一个简单的集合库 <a href="https://github.com/schmittjoh/php-collection">官网</a></li><li>  Serializer：一个序列化和反序列化数据的库 <a href="https://github.com/schmittjoh/serializer">官网</a></li><li>  PHP Object Storage：一个对象存储库 <a href="https://github.com/herrera-io/php-object-storage">官网</a></li><li>  Fractal：一个转换复杂数据结构到JSON输出的库 <a href="https://github.com/php-loep/fractal">官网</a></li><li>  Totem：一个管理和穿件数据交换集的库 <a href="http://github.com/Wisembly/Totem">官网</a></li><li>  PINQ：一个PHP实时Linq库 <a href="https://github.com/TimeToogo/Pinq">官网</a></li><li>  JsonMapper：一个将内嵌JSON结构映射为PHP类的库 <a href="https://github.com/netresearch/jsonmapper">官网</a></li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p><em>处理通知软件的库</em></p><ul><li>  Nod：一个通知库（Growl等） <a href="https://github.com/filp/nod">官网</a></li><li>  Notificato：一个处理推送通知的库 <a href="https://github.com/wrep/notificato">官网</a></li><li>  Notification Pusher：一个设备推送通知的独立库 <a href="https://github.com/Ph3nol/NotificationPusher">官网</a></li><li>  Notificator：一个轻量级的通知库 <a href="https://github.com/namshi/notificator">官网</a></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><em>项目部署库</em></p><ul><li>  Pomander：一个PHP应用部署工具 <a href="https://github.com/tamagokun/pomander">官网</a></li><li>  Rocketeer：PHP世界里的一个快速简单的部署器 <a href="https://github.com/Anahkiasen/rocketeer">官网</a></li><li>  Envoy：一个用PHP运行SSH任务的工具 <a href="https://github.com/laravel/envoy">官网</a></li><li>  Plum：一个部署库 <a href="https://github.com/aerialls/Plum">官网</a></li></ul><h2 id="国际化和本地化"><a href="#国际化和本地化" class="headerlink" title="国际化和本地化"></a>国际化和本地化</h2><p><em>国际化（I18n）和本地化（L10n）</em></p><ul><li>  <a href="http://hao.importnew.com/aura-intl/">Aura.Intl</a>：<a href="https://github.com/auraphp/Aura.Intl">官网</a></li></ul><h2 id="第三方API"><a href="#第三方API" class="headerlink" title="第三方API"></a>第三方API</h2><p><em>访问第三方API的库</em></p><ul><li>  Amazon Web Service SDK：PHP AWS SDK官方库 <a href="https://github.com/aws/aws-sdk-php">官网</a></li><li>  S3 Stream Wrapper：Amazon S3流包装库 <a href="https://github.com/gwkunze/S3StreamWrapper">官网</a></li><li>  Stripe：Stripe官方PHP库 <a href="https://github.com/stripe/stripe-php">官网</a></li><li>  Campaign Monitor：Campaign Monitor官方PHP库 <a href="http://campaignmonitor.github.com/createsend-php/">官网</a></li><li>  Digital Ocean：Digital Ocean API 接口库 <a href="https://github.com/toin0u/DigitalOcean">官网</a></li><li>  Github：Github API交互库 <a href="https://github.com/dsyph3r/github-api3-php">官网</a></li><li>  PHP Github API：另一个Github API交互库 <a href="https://github.com/KnpLabs/php-github-api">官网</a></li><li>  Twitter OAuth：Twitter OAuth工作流交互库 <a href="https://github.com/widop/twitter-oauth">官网</a></li><li>  Twitter REST：Twitter REST API交互库 <a href="https://github.com/widop/twitter-rest">官网</a></li><li>  Dropbox SDK：Dropbox SDK官方PHP库 <a href="https://github.com/dropbox/dropbox-sdk-php">官网</a></li><li>  Twilio：Twilio官方PHP REST API <a href="https://github.com/twilio/twilio-php">官网</a></li><li>  Mailgun：Mailgun官方PHP REST API <a href="https://github.com/mailgun/mailgun-php">官网</a></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><em>帮助构建PHP扩展的库</em></p><ul><li>  Zephir：用于开发PHP扩展，且介于PHP和C++之间的编译语言 <a href="https://github.com/phalcon/zephir">官网</a></li><li>  <a href="http://hao.importnew.com/php-cpp/">PHP CPP</a>：一个开发PHP扩展的C++库 <a href="http://www.php-cpp.com/">官网</a></li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p><em>不在上面分类中的有用库和工具</em></p><ul><li>  Spork：一个处理forking的库 <a href="https://github.com/kriswallsmith/spork">官网</a></li><li>  JSON Lint：一个JSON lint工具 <a href="https://github.com/Seldaek/jsonlint">官网</a></li><li>  JSONPCallbackValidator：验证JSONP回调的库 <a href="https://github.com/willdurand/JsonpCallbackValidator">官网</a></li><li>  Pagerfanta：一个分页库 <a href="https://github.com/whiteoctober/Pagerfanta">官网</a></li><li>  Ruler：一个简单的无状态的生产环境规则引擎。 <a href="https://github.com/bobthecow/Ruler">官网</a></li><li>  LiteCQRS：一个CQRS(命令查询责任分离)库 <a href="https://github.com/beberlei/litecqrs-php">官网</a></li><li>  Sslurp：一个使得SSL处理减少的库 <a href="https://github.com/EvanDotPro/Sslurp">官网</a></li><li>  Option<a href="https://github.com/schmittjoh/php-option">PHP 官网</a>一个可选的类型库</li><li>  Metrics：一个简单的度量API库 <a href="https://github.com/beberlei/metrics">官网</a></li><li>  Sabre VObject：一个解析VCard和iCalendar对象的库 <a href="https://github.com/evert/sabre-vobject">官网</a></li><li>  Annotations：一个注释库（Doctrine部分） <a href="https://github.com/doctrine/annotations">官网</a></li><li>  Whoops：一个不错的错误处理库 <a href="https://github.com/filp/whoops">官网</a></li><li>  Finite：一个简单的PHP有限状态机 <a href="http://yohan.giarel.li/Finite">官网</a></li><li>  LadyBug：一个dumper库 <a href="https://github.com/raulfraile/Ladybug">官网</a></li><li>  Procrastinator：运行耗时任务的库 <a href="https://github.com/lstrojny/Procrastinator">官网</a></li><li>  Compose：一个功能组合库 <a href="https://github.com/igorw/compose">官网</a></li><li>  SuperClosure：一个允许闭包序列化的库 <a href="https://github.com/jeremeamia/super_closure">官网</a></li><li>  Jumper：一个远程服务执行库 <a href="https://github.com/kakawait/Jumper">官网</a></li><li>  Underscore：一个Undersccore JS库的PHP实现 <a href="http://anahkiasen.github.io/underscore-php/">官网</a></li><li>  PHP PassBook：一个iOS PassBook PHP库 <a href="https://github.com/eymengunay/php-passbook">官网</a></li><li>  PHP Expression：一个PHP表达式语言 <a href="https://github.com/Kitano/php-expression">官网</a></li><li>  RMT：一个编写版本和发布软件的库 <a href="https://github.com/liip/RMT">官网</a></li><li>  Wise：一个配置管理器 <a href="https://github.com/herrera-io/php-wise">官网</a></li><li>  Opengraph：一个开放图库 <a href="https://github.com/euskadi31/Opengraph">官网</a></li><li>  Essence：一个提取web媒体的库 <a href="https://github.com/felixgirault/essence">官网</a></li><li>  Embera：一个Oembed消费库 <a href="https://github.com/mpratt/Embera">官网</a></li><li>  Graphviz：一个图形库 <a href="https://github.com/alexandresalome/graphviz">官网</a></li><li>  Monad PHP：<a href="https://github.com/ircmaxell/monad-php">官网</a> 一个简单Monad库</li><li>  Flux：一个正则表达式构建库 <a href="https://github.com/selvinortiz/flux">官网</a></li><li>  Patchwork：一个重新定义用户的函数库 <a href="http://antecedent.github.io/patchwork/">官网</a></li><li>  Galapagos：语言转换进化 <a href="https://github.com/igorw/galapagos">官网</a></li><li>  Design Patterns PHP：一个使用PHP实现的设计模式存储库 <a href="https://github.com/domnikl/DesignPatternsPHP">官网</a></li><li>  PHPCR：一个Java内容存储库（JCR)的PHP实现 <a href="https://github.com/phpcr/phpcr">官网</a></li><li>  Functional PHP：一个函数式编程库 <a href="https://github.com/lstrojny/functional-php">官网</a></li><li>  ClassPreloader：一个优化自动加载的库 <a href="https://github.com/mtdowling/ClassPreloader">官网</a></li><li>  Lib Country：一个国家和地区数据的库 <a href="https://github.com/phine/lib-country">官网</a></li><li>  Lib Accessor：一个简化访问的库 <a href="https://github.com/phine/lib-accessor">官网</a></li><li>  PHPStack：一个PHP编写的TCP/IP栈概念 <a href="http://dunkels.com/adam/phpstack/">官网</a></li><li>  Nmap：一个Nmap PHP包装器 <a href="https://github.com/willdurand/nmap">官网</a></li><li>  Code Mover：一个移动代码的库 <a href="https://github.com/dantleech/code-mover">官网</a></li><li>  Iter：一个使用生成器提供迭代原语的库 <a href="https://github.com/nikic/iter">官网</a></li><li>  Lambda PHP：一个PHP中的Lambda 计算解析器 <a href="https://github.com/igorw/lambda-php">官网</a></li><li>  Country List：所有带有名称和ISO 3166-1编码的国家列表 <a href="https://github.com/umpirsky/country-list">官网</a></li><li>  PHP-GPIO：用于Raspberry PI的GPIO pin的库 <a href="https://github.com/ronanguilloux/php-gpio">官网</a></li><li>  print_o：一个对象图的可视化器 <a href="https://github.com/koriym/print_o">官网</a></li><li>  Alias：一个类别名库 <a href="https://github.com/fuelphp/alias">官网</a></li></ul><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p><em>创建一个开发环境的软件</em></p><h2 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a>PHP安装</h2><p><em>在你的电脑上帮助安装和管理PHP的工具</em></p><ul><li>  HomeBrew：一个OSX包管理器 <a href="http://mxcl.github.com/homebrew/">官网</a></li><li>  HomeBrew PHP：一个HomeBrew的PHP通道 <a href="https://github.com/josegonzalez/homebrew-php">官网</a></li><li>  PHP OSX：一个OSX下的PHP安装器 <a href="http://php-osx.liip.ch/">官网</a></li><li>  PHP Brew：一个PHP版本管理和安装器 <a href="https://github.com/c9s/phpbrew">官网</a></li><li>  PHP Env：另一个PHP版本管理器 <a href="https://github.com/CHH/phpenv">官网</a></li><li>  PHP Switch：另一个PHP版本管理器 <a href="https://github.com/jubianchi/phpswitch">官网</a></li><li>  PHP Build：另一个PHP版本安装器 <a href="https://github.com/CHH/php-build">官网</a></li><li>  VirtPHP：一个创建和管理独立PHP环境的工具 <a href="http://virtphp.org/">官网</a></li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p><em>创建沙盒开发环境的软件和工具</em></p><ul><li>  Vagrant：一个便携的开发环境工具 <a href="http://www.vagrantup.com/">官网</a></li><li>  Ansible：一个非常简单的编制框架 <a href="http://www.ansibleworks.com/">官网</a></li><li>  Puppet：一个服务器自动化框架和应用 <a href="http://puppetlabs.com/">官网</a></li><li>  PuPHPet：一个构建PHP开发虚拟机的web工具 <a href="https://puphpet.com/">官网</a></li><li>  Protobox：另一个构建PHP开发虚拟机的web工具 <a href="http://getprotobox.com/">官网</a></li><li>  Phansible：一个用Ansible构建PHP开发虚拟机的web工具 <a href="http://phansible.com/">官网</a></li></ul><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><em>相关的PHP虚拟机</em></p><ul><li>  HipHop PHP：Facebook出品的PHP虚拟机，运行时和JIT <a href="https://github.com/facebook/hiphop-php">官网</a></li><li>  HippyVM：另一个PHP虚拟机 <a href="http://hippyvm.com/">官网</a></li><li>  Hack：一个PHP进行无缝操作的 <a href="https://github.com/facebook/hiphop-php">HHVM</a>编程语言 <a href="http://hacklang.org/">官网</a></li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p><em>支持PHP的集成开发环境</em></p><ul><li>  Netbeans：一个支持PHP和HTML5的IDE <a href="https://netbeans.org/">官网</a></li><li>  Eclipse for PHP Developers：一个基于Eclipse平台的PHP IDE <a href="https://www.eclipse.org/downloads/">官网</a></li><li>  <a href="http://hao.importnew.com/phpstorm/">PhpStorm</a>：一个商业PHP IDE <a href="http://www.jetbrains.com/phpstorm/">官网</a></li><li>  [Sublime Text] ：一个轻量级的PHP IDE <a href="http://www.sublimetext.com/">官网</a></li></ul><h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><p><em>基于Web的应用和工具</em></p><ul><li>  3V4L：一个在线的PHP shell <a href="http://3v4l.org/">官网</a></li><li>  DBV：一个数据库版本控制应用 <a href="http://dbv.vizuina.com/">官网</a></li><li>  PHP Queue：一个管理后端队列的应用 <a href="https://github.com/CoderKungfu/php-queue">官网</a></li><li>  Composer as a Service：作为一个zip文件下载Composer包的工具 <a href="http://composer.borreli.com/">官网</a></li><li>  MailCatcher：一个抓取和查看邮件的web工具 <a href="https://github.com/sj26/mailcatcher">官网</a></li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>各种提高你的PHP开发技能和知识的资源，比如书籍，网站，文章</p><h2 id="PHP网站"><a href="#PHP网站" class="headerlink" title="PHP网站"></a>PHP网站</h2><p><em>PHP相关的有用网站</em></p><ul><li>  PHP The Right Way：一个PHP最佳实践的快速指引手册 <a href="http://www.phptherightway.com/">官网</a></li><li>  PHP Best Practices：一个PHP最佳实践指南 <a href="http://phpbestpractices.org/">官网</a></li><li>  PHP Weekly：一个PHP新闻周刊 <a href="http://phpweekly.info/archive/">官网</a></li><li>  PHP Security：一个PHP安全指南 <a href="http://phpsecurity.readthedocs.org/en/latest/index.html">官网</a></li><li>  PHP FIG：PHP框架交互组 <a href="http://www.php-fig.org/">官网</a></li><li>  PHP UG：一个帮助用户定位最近的PHP用户组（UG)的网站 <a href="http://php.ug/">官网</a></li><li>  Seven PHP：一个PHP社区成员采访的网站 <a href="http://7php.com/">官网</a></li><li>  Nomad PHP：一个在线PHP学习资源 <a href="http://nomadphp.com/">官网</a></li><li>  PHP Mentoring：点对点PHP导师组织 <a href="http://phpmentoring.org/">官网</a></li></ul><h2 id="其他网站"><a href="#其他网站" class="headerlink" title="其他网站"></a>其他网站</h2><p><em>Web开发相关的有用网站</em></p><ul><li>  The Open Web Application Security Project (OWASP)：一个开放软件安全社区 <a href="https://www.owasp.org/index.php/Main_Page">官网</a></li><li>  WebSec IO：一个Web安全社区资源 <a href="http://websec.io/">官网</a></li><li>  Web Advent：一个Web开发人员日历 <a href="http://webadvent.org/">官网</a></li><li>  Semantic Versioning：一个解析语义版本的网站 <a href="http://semver.org/">官网</a></li><li>  Atlassian Git Tutorials：一个Git教程系列 <a href="https://www.atlassian.com/git">官网</a></li><li>  Hg Init：一个Mercurial教程系列 <a href="http://hginit.com/">官网</a></li><li>  Servers for Hackers：一个关于服务器管理的新闻通讯 <a href="http://serversforhackers.com/">官网</a></li></ul><h2 id="PHP书籍"><a href="#PHP书籍" class="headerlink" title="PHP书籍"></a>PHP书籍</h2><p><em>PHP相关的非常好的书籍</em></p><ul><li>  Scaling PHP Applications：一本Steve Corona关于扩展PHP应用程序的电子书 <a href="http://www.scalingphpbook.com/">官网</a></li><li>  The Grumpy Programmer’s Guide to Building Testable PHP Applications：一本Chris Hartjes关于构建PHP应用程序测试的书 <a href="https://leanpub.com/grumpy-testing">官网</a></li><li>  Grumpy PHPUnit：一本Chris Hartjes关于使用PHPUnit进行单元测试的书 <a href="https://leanpub.com/grumpy-phpunit">官网</a></li><li>  Mastering Object-Orientated PHP：一本Brandon Savage关于PHP面向对象的书 <a href="http://www.brandonsavage.net/">官网</a></li><li>  Signaling PHP：一本Cal Evans关于在CLI脚本捕获PCNTL 信号的书 <a href="https://leanpub.com/signalingphp">官网</a></li><li>  Securing PHP: Core Concepts：一本Chris Cornutt关于PHP常见安全条款和实践的书 <a href="https://leanpub.com/securingphp-coreconcepts">官网</a></li><li>  Modernising Legacy Applications in PHP：一本Paul M.Jones关于遗留PHP应用进行现代化的书 <a href="https://leanpub.com/mlaphp">官网</a></li></ul><h2 id="其他书籍"><a href="#其他书籍" class="headerlink" title="其他书籍"></a>其他书籍</h2><p><em>与一般计算和Web开发相关的书</em></p><ul><li>  The Linux Command Line：William Shotts关于Linux命令行的一本书 <a href="http://linuxcommand.org/tlcl.php">官网</a></li><li>  Understanding Computation：Tom Stuart关于计算理论的一本书 <a href="http://computationbook.com/">官网</a></li><li>  The Tangled Web — Securing Web Applications： Michal Zalewski关于web应用安全的一本书 <a href="http://www.amazon.ca/The-Tangled-Web-Securing-Applications/dp/1593273886">官网</a></li><li>  Elasticsearch: The Definitive Guide：Clinton Cormley和Zachary Tong编写的与Elasticsearch工作的一本指南 <a href="http://www.elasticsearch.org/guide/">官网</a></li><li>  Eloquent JavaScript：Marijin Haverbeke关于JavaScript编程的一本书 <a href="http://eloquentjavascript.net/">官网</a></li><li>  Vagrant Cookbook：Erika Heidi关于创建 Vagrant环境的一本书 <a href="https://leanpub.com/vagrantcookbook">官网</a></li><li>  Pro Git：Scott Chacon和Ben Straub关于Git的一本书 <a href="http://git-scm.com/book/en/v2">官网</a></li></ul><h2 id="PHP视频"><a href="#PHP视频" class="headerlink" title="PHP视频"></a>PHP视频</h2><p><em>PHP相关的非常不错的视频</em></p><ul><li>  Taking PHP Seriously：来自Facebook Keith Adams 讲述PHP优势 <a href="http://www.infoq.com/presentations/php-history">官网</a></li><li>  PHP Town Hall：一个随意的Ben Edmunds和Phil Sturgeon的PHP播客 <a href="http://phptownhall.com/">官网</a></li><li>  Programming with Anthony：<a href="http://www.youtube.com/playlist?list=PLM-218uGSX3DQ3KsB5NJnuOqPqc5CW2kW">官网</a>  Anthony Ferrara的视频系列</li></ul><h2 id="PHP阅读"><a href="#PHP阅读" class="headerlink" title="PHP阅读"></a>PHP阅读</h2><p><em>PHP相关的阅读资料</em></p><ul><li>  Create Your Own PHP Framework：一部Fabien Potencier的关于如何创建你自己的PHP框架的系列文章 <a href="http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1">官网</a></li><li>  Seven Ways to Screw Up BCrypt：一篇关于纠正BCrypt实现的文章 <a href="http://blog.ircmaxell.com/2012/12/seven-ways-to-screw-up-bcrypt.html">官网</a></li><li>  Preventing CSRF Attacks：一篇组织CSRF攻击的文章 <a href="http://blog.ircmaxell.com/2013/02/preventing-csrf-attacks.html">官网</a></li><li>  Don’t Worry About BREACH：一篇关于BREACH攻击和CSRF令牌的文章 <a href="http://blog.ircmaxell.com/2013/08/dont-worry-about-breach.html">官网</a></li><li>  On PHP 5.3, Lamda Functions and Closures：一篇关于lambda函数和闭包的文章 <a href="http://fabien.potencier.org/article/17/on-php-5-3-lambda-functions-and-closures">官网</a></li><li>  Use Env：一篇关于使用unix环境帮助的文章 <a href="http://seancoates.com/blogs/use-env">官网</a></li><li>  Composer Primer：Composer初级 <a href="http://daylerees.com/composer-primer">官网</a></li><li>  Composer Versioning：一篇关于Composer版本的文章 <a href="https://igor.io/2013/01/07/composer-versioning.html">官网</a></li><li>  Composer Stability Flags：一篇关于Composer稳定性标志的文章 <a href="https://igor.io/2013/02/07/composer-stability-flags.html">官网</a></li><li>  Innocent Villagefolk or a Pillagin’ Pirate?：一篇关于PHP从其他语言获取想法的文章 <a href="http://blog.astrumfutura.com/2012/04/php-innocent-villagefolk-or-a-pillagin-pirate/">官网</a></li><li>  Predicting Random Numbers in PHP：一篇关于生成随机数的文章 <a href="http://blog.astrumfutura.com/2013/03/predicting-random-numbers-in-php-its-easier-than-you-think/">官网</a></li><li>  A 20 Point List for Preventing XSS in PHP：一篇关于组织XSS的文章 <a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php/">官网</a></li><li>  PHP Sucks! But I Like It!：一篇关于PHP利弊的文章 <a href="http://blog.ircmaxell.com/2012/04/php-sucks-but-i-like-it.html">官网</a></li><li>  PHP Is Much Better Than You Think：一篇关于PHP语言和生态圈的文章 <a href="http://fabien.potencier.org/article/64/php-is-much-better-than-you-think">官网</a></li></ul><h2 id="PHP内核阅读"><a href="#PHP内核阅读" class="headerlink" title="PHP内核阅读"></a>PHP内核阅读</h2><p><em>阅读PHP内核或性能相关的资料</em></p><ul><li>  PHP RFCs：PHP RFCs主页（请求注解） <a href="https://wiki.php.net/rfc">官网</a></li><li>  PHP Internals Book：一本由三名核心开发编写的关于PHP内核的在线书 <a href="http://www.phpinternalsbook.com/">官网</a></li><li>  Print vs Echo, Which One is Faster?：一篇关于打印和echo性能的文章 <a href="http://fabien.potencier.org/article/8/print-vs-echo-which-one-is-faster">官网</a></li><li>  The PHP Ternary Operator. Fast or Not?：一篇关于三元操作性能的文章 <a href="http://fabien.potencier.org/article/48/the-php-ternary-operator-fast-or-not">官网</a></li><li>  Disproving the Single Quotes Myth：一篇关于单引号，双引号字符串性能的文章 <a href="http://nikic.github.com/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html">官网</a></li><li>  You’re Being Lied To：一篇关于内核ZVALs的文章 <a href="http://blog.golemon.com/2007/01/youre-being-lied-to.html">官网</a></li><li>  How Long is a Piece of String：一篇关于字符串原理的文章 <a href="http://blog.golemon.com/2006/06/how-long-is-piece-of-string.html">官网</a></li><li>  Understanding OpCodes：一篇关于伪代码的文章 <a href="http://blog.golemon.com/2008/01/understanding-opcodes.html">官网</a></li><li>  How Foreach Works：StackOverflow 关于foreach回答的详情 <a href="http://stackoverflow.com/questions/10057671/how-foreach-actually-works/14854568#14854568">官网</a></li><li>  When Does Foreach Copy?：一篇关于foreach原理的文章 <a href="http://nikic.github.com/2011/11/11/PHP-Internals-When-does-foreach-copy.html">官网</a></li><li>  How Big Are PHP Arrays (And Values) Really?：一篇关于数组原理的文章 <a href="http://nikic.github.com/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html">官网</a></li><li>  Why Objects (Usually) Use Less Memory Than Arrays：一篇关于对象和数组原理的文章 <a href="https://gist.github.com/nikic/5015323">官网</a></li><li>  PHP Evaluation Order：一篇关于PHP评估顺序的文章 <a href="https://gist.github.com/nikic/6699370">官网</a></li><li>  开发人员的PHP源代码： <a href="http://blog.ircmaxell.com/2012/03/phps-source-code-for-php-developers.html">1</a> <a href="http://nikic.github.com/2012/03/16/Understanding-PHPs-internal-function-definitions.html">2</a> <a href="http://blog.ircmaxell.com/2012/03/phps-source-code-for-php-developers_21.html">3</a> <a href="http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html">4</a>：关于PHP源代码的系列</li><li>  垃圾收集： <a href="http://www.php.net/manual/en/features.gc.refcounting-basics.php">1</a> <a href="http://www.php.net/manual/en/features.gc.collecting-cycles.php">2</a> <a href="http://www.php.net/manual/en/features.gc.performance-considerations.php">3</a> 关于PHP垃圾收集原理的系列</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> asesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 库 </tag>
            
            <tag> 框架 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 安全 </tag>
            
            <tag> 代码分析 </tag>
            
            <tag> 日志 </tag>
            
            <tag> 第三方库 </tag>
            
            <tag> 配置工具 </tag>
            
            <tag> Web工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计入门</title>
      <link href="/posts/8c2bfe31.html"/>
      <url>/posts/8c2bfe31.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://github.com/donnemartin/system-design-primer">github.com/donnemartin/system-design-primer</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li><li>译者：<a href="https://github.com/XatMassacrE">XatMassacrE</a>、<a href="https://github.com/L9m">L9m</a>、<a href="https://github.com/Airmacho">Airmacho</a>、<a href="https://github.com/xiaoyusilen">xiaoyusilen</a>、<a href="https://github.com/jifaxu">jifaxu</a>、<a href="https://github.com/sqrthree">根号三</a></li></ul></blockquote><hr><h1 id="系统设计入门"><a href="#系统设计入门" class="headerlink" title="系统设计入门"></a>系统设计入门</h1><hr><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-jj3A5N8.png" alt="系统设计入门"></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>学习如何设计大型系统。</p></blockquote><h3 id="为系统设计的面试做准备"><a href="#为系统设计的面试做准备" class="headerlink" title="为系统设计的面试做准备"></a>为系统设计的面试做准备</h3><p>在很多科技公司中，除了代码面试，系统设计也是<strong>技术面试过程</strong>中的一个<strong>必要环节</strong>。</p><p><strong>实践常见的系统设计面试题</strong>并且把你的答案和<strong>例子的解答</strong>进行<strong>对照</strong>：讨论，代码和图表。</p><p>面试准备的其他主题：</p><ul><li><a href="#%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%BC%95">学习指引</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98">如何处理一个系统设计的面试题</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题，<strong>含解答</strong></a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E7%AD%94">面向对象设计的面试题，<strong>含解答</strong></a></li><li><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></li></ul><h2 id="系统设计主题的索引"><a href="#系统设计主题的索引" class="headerlink" title="系统设计主题的索引"></a>系统设计主题的索引</h2><blockquote><p>各种系统设计主题的摘要，包括优点和缺点。<strong>每一个主题都面临着取舍和权衡</strong>。</p><p>每个章节都包含着更多的资源的链接。</p></blockquote><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-jrUBAF7.png" alt="系统设计入门"></p><ul><li><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E4%BB%8E%E8%BF%99%E9%87%8C%E5%BC%80%E5%A7%8B">系统设计主题：从这里开始</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%9B%9E%E9%A1%BE%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7scalability%E7%9A%84%E8%A7%86%E9%A2%91%E8%AE%B2%E5%BA%A7">第一步：回顾可扩展性的视频讲座</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%9B%9E%E9%A1%BE%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E6%96%87%E7%AB%A0">第二步：回顾可扩展性的文章</a></li><li><a href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%AD%A5%E9%AA%A4">接下来的步骤</a></li></ul></li><li><a href="#%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7">性能与拓展性</a></li><li><a href="#%E5%BB%B6%E8%BF%9F%E4%B8%8E%E5%90%9E%E5%90%90%E9%87%8F">延迟与吞吐量</a></li><li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7">可用性与一致性</a><ul><li><a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a><ul><li><a href="#cp--%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">CP - 一致性和分区容错性</a></li><li><a href="#ap--%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8E%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">AP - 可用性和分区容错性</a></li></ul></li></ul></li><li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F">一致模式</a><ul><li><a href="#%E5%BC%B1%E4%B8%80%E8%87%B4%E6%80%A7">弱一致性</a></li><li><a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致性</a></li><li><a href="#%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7">强一致性</a></li></ul></li><li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F">可用模式</a><ul><li><a href="#%E6%95%85%E9%9A%9C%E5%88%87%E6%8D%A2">故障切换</a></li><li><a href="#%E5%A4%8D%E5%88%B6">复制</a></li></ul></li><li><a href="#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统</a></li><li><a href="#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn">CDN</a><ul><li><a href="#cdn-%E6%8E%A8%E9%80%81push">CDN 推送</a></li><li><a href="#cdn-%E6%8B%89%E5%8F%96pull">CDN 拉取</a></li></ul></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">负载均衡器</a><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E5%88%B0%E5%A4%87%E7%94%A8%E5%88%87%E6%8D%A2active-passive">工作到备用切换（Active-passive）</a></li><li><a href="#%E5%8F%8C%E5%B7%A5%E4%BD%9C%E5%88%87%E6%8D%A2active-active">双工作切换（Active-active）</a></li><li><a href="#%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">四层负载均衡</a></li><li><a href="#%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">七层负载均衡</a></li><li><a href="#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95">水平扩展</a></li></ul></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">反向代理（web 服务器）</a><ul><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">负载均衡与反向代理</a></li></ul></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a><ul><li><a href="#%E5%BE%AE%E6%9C%8D%E5%8A%A1">微服务</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0">服务发现</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a><ul><li><a href="#%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Frdbms">关系型数据库管理系统（RDBMS）</a><ul><li><a href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">Master-slave 复制集</a></li><li><a href="#%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6">Master-master 复制集</a></li><li><a href="#%E8%81%94%E5%90%88">联合</a></li><li><a href="#%E5%88%86%E7%89%87">分片</a></li><li><a href="#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96">非规范化</a></li><li><a href="#sql-%E8%B0%83%E4%BC%98">SQL 调优</a></li></ul></li><li><a href="#nosql">NoSQL</a><ul><li><a href="#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8">Key-value 存储</a></li><li><a href="#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8">文档存储</a></li><li><a href="#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8">宽列存储</a></li><li><a href="#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93">图数据库</a></li></ul></li><li><a href="#sql-%E8%BF%98%E6%98%AF-nosql">SQL 还是 NoSQL</a></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98">缓存</a><ul><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98">客户端缓存</a></li><li><a href="#cdn-%E7%BC%93%E5%AD%98">CDN 缓存</a></li><li><a href="#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98">Web 服务器缓存</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98">数据库缓存</a></li><li><a href="#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98">应用缓存</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98">数据库查询级别的缓存</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98">对象级别的缓存</a></li><li><a href="#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98">何时更新缓存</a><ul><li><a href="#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F">缓存模式</a></li><li><a href="#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F">直写模式</a></li><li><a href="#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F">回写模式</a></li><li><a href="#%E5%88%B7%E6%96%B0">刷新</a></li></ul></li></ul></li><li><a href="#%E5%BC%82%E6%AD%A5">异步</a><ul><li><a href="#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息队列</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97">任务队列</a></li><li><a href="#%E8%83%8C%E5%8E%8B">背压机制</a></li></ul></li><li><a href="#%E9%80%9A%E8%AE%AF">通讯</a><ul><li><a href="#%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AEtcp">传输控制协议（TCP）</a></li><li><a href="#%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp">用户数据报协议（UDP）</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc">远程控制调用协议（RPC）</a></li><li><a href="#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest">表述性状态转移（REST）</a></li></ul></li><li><a href="#%E5%AE%89%E5%85%A8">安全</a></li><li><a href="#%E9%99%84%E5%BD%95">附录</a><ul><li><a href="#2-%E7%9A%84%E6%AC%A1%E6%96%B9%E8%A1%A8">2 的次方表</a></li><li><a href="#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0">每个程序员都应该知道的延迟数</a></li><li><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></li><li><a href="#%E7%9C%9F%E5%AE%9E%E6%9E%B6%E6%9E%84">真实架构</a></li><li><a href="#%E5%85%AC%E5%8F%B8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84">公司的系统架构</a></li><li><a href="#%E5%85%AC%E5%8F%B8%E5%B7%A5%E7%A8%8B%E5%8D%9A%E5%AE%A2">公司工程博客</a></li></ul></li><li><a href="#%E6%AD%A3%E5%9C%A8%E5%AE%8C%E5%96%84%E4%B8%AD">正在完善中</a></li><li><a href="#%E8%87%B4%E8%B0%A2">致谢</a></li><li><a href="#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F">联系方式</a></li><li><a href="#%E8%AE%B8%E5%8F%AF">许可</a></li></ul><h2 id="学习指引"><a href="#学习指引" class="headerlink" title="学习指引"></a>学习指引</h2><blockquote><p>基于你面试的时间线（短、中、长）去复习那些推荐的主题。</p></blockquote><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-xHGqW8.jpg" alt="Imgur"></p><p><strong>问：对于面试来说，我需要知道这里的所有知识点吗？</strong></p><p><strong>答：不，如果只是为了准备面试的话，你并不需要知道所有的知识点。</strong></p><p>在一场面试中你会被问到什么取决于下面这些因素：</p><ul><li>你的经验</li><li>你的技术背景</li><li>你面试的职位</li><li>你面试的公司</li><li>运气</li></ul><p>那些有经验的候选人通常会被期望了解更多的系统设计的知识。架构师或者团队负责人则会被期望了解更多除了个人贡献之外的知识。顶级的科技公司通常也会有一次或者更多的系统设计面试。</p><p>面试会很宽泛的展开并在几个领域深入。这会帮助你了解一些关于系统设计的不同的主题。基于你的时间线，经验，面试的职位和面试的公司对下面的指导做出适当的调整。</p><ul><li><strong>短期</strong> - 以系统设计主题的<strong>广度</strong>为目标。通过解决<strong>一些</strong>面试题来练习。</li><li><strong>中期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>初级深度</strong>为目标。通过解决<strong>很多</strong>面试题来练习。</li><li><strong>长期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>高级深度</strong>为目标。通过解决<strong>大部分</strong>面试题来练习。</li></ul><table><thead><tr><th></th><th>短期</th><th>中期</th><th>长期</th></tr></thead><tbody><tr><td>阅读 <a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95">系统设计主题</a> 以获得一个关于系统如何工作的宽泛的认识</td><td>:+1:</td><td>:+1:</td><td>:+1:</td></tr><tr><td>阅读一些你要面试的<a href="#%E5%85%AC%E5%8F%B8%E5%B7%A5%E7%A8%8B%E5%8D%9A%E5%AE%A2">公司工程博客</a>的文章</td><td>:+1:</td><td>:+1:</td><td>:+1:</td></tr><tr><td>阅读 <a href="#%E7%9C%9F%E5%AE%9E%E6%9E%B6%E6%9E%84">真实架构</a></td><td>:+1:</td><td>:+1:</td><td>:+1:</td></tr><tr><td>复习 <a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">如何处理一个系统设计面试题</a></td><td>:+1:</td><td>:+1:</td><td>:+1:</td></tr><tr><td>完成 <a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题和解答</a></td><td>一些</td><td>很多</td><td>大部分</td></tr><tr><td>完成 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E7%AD%94">面向对象设计的面试题和解答</a></td><td>一些</td><td>很多</td><td>大部分</td></tr><tr><td>复习 <a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></td><td>一些</td><td>很多</td><td>大部分</td></tr></tbody></table><h2 id="如何处理一个系统设计的面试题"><a href="#如何处理一个系统设计的面试题" class="headerlink" title="如何处理一个系统设计的面试题"></a>如何处理一个系统设计的面试题</h2><p>系统设计面试是一个<strong>开放式的对话</strong>。他们期望你去主导这个对话。</p><p>你可以使用下面的步骤来指引讨论。为了巩固这个过程，请使用下面的步骤完成<a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题和解答</a>这个章节。</p><h3 id="第一步：描述使用场景，约束和假设"><a href="#第一步：描述使用场景，约束和假设" class="headerlink" title="第一步：描述使用场景，约束和假设"></a>第一步：描述使用场景，约束和假设</h3><p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p><ul><li>谁会使用它？</li><li>他们会怎样使用它？</li><li>有多少用户？</li><li>系统的作用是什么？</li><li>系统的输入输出分别是什么？</li><li>我们希望处理多少数据？</li><li>我们希望每秒钟处理多少请求？</li><li>我们希望的读写比率？</li></ul><h3 id="第二步：创造一个高层级的设计"><a href="#第二步：创造一个高层级的设计" class="headerlink" title="第二步：创造一个高层级的设计"></a>第二步：创造一个高层级的设计</h3><p>使用所有重要的组件来描绘出一个高层级的设计。</p><ul><li>画出主要的组件和连接</li><li>证明你的想法</li></ul><h3 id="第三步：设计核心组件"><a href="#第三步：设计核心组件" class="headerlink" title="第三步：设计核心组件"></a>第三步：设计核心组件</h3><p>对每一个核心组件进行详细深入的分析。举例来说，如果你被问到<a href="solutions/system_design/pastebin/README.md">设计一个 url 缩写服务</a>，开始讨论：</p><ul><li>生成并储存一个完整 url 的 hash<ul><li><a href="solutions/system_design/pastebin/README.md">MD5</a> 和 <a href="solutions/system_design/pastebin/README.md">Base62</a></li><li>Hash 碰撞</li><li>SQL 还是 NoSQL</li><li>数据库模型</li></ul></li><li>将一个 hashed url 翻译成完整的 url<ul><li>数据库查找</li></ul></li><li>API 和面向对象设计</li></ul><h3 id="第四步：扩展设计"><a href="#第四步：扩展设计" class="headerlink" title="第四步：扩展设计"></a>第四步：扩展设计</h3><p>确认和处理瓶颈以及一些限制。举例来说就是你需要下面的这些来完成扩展性的议题吗？</p><ul><li>负载均衡</li><li>水平扩展</li><li>缓存</li><li>数据库分片</li></ul><p>论述可能的解决办法和代价。每件事情需要取舍。可以使用<a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95">可扩展系统的设计原则</a>来处理瓶颈。</p><h3 id="预估计算量"><a href="#预估计算量" class="headerlink" title="预估计算量"></a>预估计算量</h3><p>你或许会被要求通过手算进行一些估算。<a href="#%E9%99%84%E5%BD%95">附录</a>涉及到的是下面的这些资源：</p><ul><li><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html">使用预估计算量</a></li><li><a href="#2-%E7%9A%84%E6%AC%A1%E6%96%B9%E8%A1%A8">2 的次方表</a></li><li><a href="#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0">每个程序员都应该知道的延迟数</a></li></ul><h3 id="相关资源和延伸阅读"><a href="#相关资源和延伸阅读" class="headerlink" title="相关资源和延伸阅读"></a>相关资源和延伸阅读</h3><p>查看下面的链接以获得我们期望的更好的想法：</p><ul><li><a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">怎样通过一个系统设计的面试</a></li><li><a href="http://www.hiredintech.com/system-design">系统设计的面试</a></li><li><a href="https://www.youtube.com/watch?v=ZgdS0EUmn70">系统架构与设计的面试简介</a></li></ul><h2 id="系统设计的面试题和解答"><a href="#系统设计的面试题和解答" class="headerlink" title="系统设计的面试题和解答"></a>系统设计的面试题和解答</h2><blockquote><p>普通的系统设计面试题和相关事例的论述，代码和图表。</p></blockquote><blockquote><p>与内容有关的解答在 <code>solutions/</code> 文件夹中。</p></blockquote><table><thead><tr><th>问题</th><th></th></tr></thead><tbody><tr><td>设计 Pastebin.com (或者 Bit.ly)</td><td><a href="solutions/system_design/pastebin/README-zh-Hans.md">解答</a></td></tr><tr><td>设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)</td><td><a href="solutions/system_design/twitter/README.md">解答</a></td></tr><tr><td>设计一个网页爬虫</td><td><a href="solutions/system_design/web_crawler/README.md">解答</a></td></tr><tr><td>设计 Mint.com</td><td><a href="solutions/system_design/mint/README.md">解答</a></td></tr><tr><td>为一个社交网络设计数据结构</td><td><a href="solutions/system_design/social_graph/README.md">解答</a></td></tr><tr><td>为搜索引擎设计一个 key-value 储存</td><td><a href="solutions/system_design/query_cache/README.md">解答</a></td></tr><tr><td>通过分类特性设计 Amazon 的销售排名</td><td><a href="solutions/system_design/sales_rank/README.md">解答</a></td></tr><tr><td>在 AWS 上设计一个百万用户级别的系统</td><td><a href="solutions/system_design/scaling_aws/README.md">解答</a></td></tr><tr><td>添加一个系统设计问题</td><td><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></td></tr></tbody></table><h3 id="设计-Pastebin-com-或者-Bit-ly"><a href="#设计-Pastebin-com-或者-Bit-ly" class="headerlink" title="设计 Pastebin.com (或者 Bit.ly)"></a>设计 Pastebin.com (或者 Bit.ly)</h3><p><a href="solutions/system_design/pastebin/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-WpNPcU.jpg" alt="Imgur"></p><h3 id="设计-Twitter-时间线和搜索-或者-Facebook-feed-和搜索"><a href="#设计-Twitter-时间线和搜索-或者-Facebook-feed-和搜索" class="headerlink" title="设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)"></a>设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)</h3><p><a href="solutions/system_design/twitter/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-Kw5Dyz.jpg" alt="Imgur"></p><h3 id="设计一个网页爬虫"><a href="#设计一个网页爬虫" class="headerlink" title="设计一个网页爬虫"></a>设计一个网页爬虫</h3><p><a href="solutions/system_design/web_crawler/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-ahseMu.jpg" alt="Imgur"></p><h3 id="设计-Mint-com"><a href="#设计-Mint-com" class="headerlink" title="设计 Mint.com"></a>设计 Mint.com</h3><p><a href="solutions/system_design/mint/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-6I5uLw.jpg" alt="Imgur"></p><h3 id="为一个社交网络设计数据结构"><a href="#为一个社交网络设计数据结构" class="headerlink" title="为一个社交网络设计数据结构"></a>为一个社交网络设计数据结构</h3><p><a href="solutions/system_design/social_graph/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-2tHfjV.jpg" alt="Imgur"></p><h3 id="为搜索引擎设计一个-key-value-储存"><a href="#为搜索引擎设计一个-key-value-储存" class="headerlink" title="为搜索引擎设计一个 key-value 储存"></a>为搜索引擎设计一个 key-value 储存</h3><p><a href="solutions/system_design/query_cache/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-Gg1L3e.jpg" alt="Imgur"></p><h3 id="设计按类别分类的-Amazon-销售排名"><a href="#设计按类别分类的-Amazon-销售排名" class="headerlink" title="设计按类别分类的 Amazon 销售排名"></a>设计按类别分类的 Amazon 销售排名</h3><p><a href="solutions/system_design/sales_rank/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-agjIkp.jpg" alt="Imgur"></p><h3 id="在-AWS-上设计一个百万用户级别的系统"><a href="#在-AWS-上设计一个百万用户级别的系统" class="headerlink" title="在 AWS 上设计一个百万用户级别的系统"></a>在 AWS 上设计一个百万用户级别的系统</h3><p><a href="solutions/system_design/scaling_aws/README.md">查看实践与解答</a></p><p><img src="http://qiniu.calmchen.com/blog/2022-07-19-8731pi.jpg" alt="Imgur"></p><h2 id="面向对象设计的面试问题及解答"><a href="#面向对象设计的面试问题及解答" class="headerlink" title="面向对象设计的面试问题及解答"></a>面向对象设计的面试问题及解答</h2><blockquote><p>常见面向对象设计面试问题及实例讨论，代码和图表演示。</p><p>与内容相关的解决方案在 <code>solutions/</code> 文件夹中。</p></blockquote><blockquote><p><strong>注：此节还在完善中</strong></p></blockquote><table><thead><tr><th>问题</th><th></th></tr></thead><tbody><tr><td>设计 hash map</td><td><a href="solutions/object_oriented_design/hash_table/hash_map.ipynb">解决方案</a></td></tr><tr><td>设计 LRU 缓存</td><td><a href="solutions/object_oriented_design/lru_cache/lru_cache.ipynb">解决方案</a></td></tr><tr><td>设计一个呼叫中心</td><td><a href="solutions/object_oriented_design/call_center/call_center.ipynb">解决方案</a></td></tr><tr><td>设计一副牌</td><td><a href="solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb">解决方案</a></td></tr><tr><td>设计一个停车场</td><td><a href="solutions/object_oriented_design/parking_lot/parking_lot.ipynb">解决方案</a></td></tr><tr><td>设计一个聊天服务</td><td><a href="solutions/object_oriented_design/online_chat/online_chat.ipynb">解决方案</a></td></tr><tr><td>设计一个环形数组</td><td><a href="#%E8%B4%A1%E7%8C%AE">待解决</a></td></tr><tr><td>添加一个面向对象设计问题</td><td><a href="#%E8%B4%A1%E7%8C%AE">待解决</a></td></tr></tbody></table><h2 id="系统设计主题：从这里开始"><a href="#系统设计主题：从这里开始" class="headerlink" title="系统设计主题：从这里开始"></a>系统设计主题：从这里开始</h2><p>不熟悉系统设计？</p><p>首先，你需要对一般性原则有一个基本的认识，知道它们是什么，怎样使用以及利弊。</p><h3 id="第一步：回顾可扩展性（scalability）的视频讲座"><a href="#第一步：回顾可扩展性（scalability）的视频讲座" class="headerlink" title="第一步：回顾可扩展性（scalability）的视频讲座"></a>第一步：回顾可扩展性（scalability）的视频讲座</h3><p><a href="https://www.youtube.com/watch?v=-W9F__D3oY4">哈佛大学可扩展性讲座</a></p><ul><li>主题涵盖<ul><li>垂直扩展（Vertical scaling）</li><li>水平扩展（Horizontal scaling）</li><li>缓存</li><li>负载均衡</li><li>数据库复制</li><li>数据库分区</li></ul></li></ul><h3 id="第二步：回顾可扩展性文章"><a href="#第二步：回顾可扩展性文章" class="headerlink" title="第二步：回顾可扩展性文章"></a>第二步：回顾可扩展性文章</h3><p><a href="http://www.lecloud.net/tagged/scalability/chrono">可扩展性</a></p><ul><li>主题涵盖：<ul><li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Clones</a></li><li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">数据库</a></li><li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">缓存</a></li><li><a href="http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism">异步</a></li></ul></li></ul><h3 id="接下来的步骤"><a href="#接下来的步骤" class="headerlink" title="接下来的步骤"></a>接下来的步骤</h3><p>接下来，我们将看看高阶的权衡和取舍:</p><ul><li><strong>性能</strong>与<strong>可扩展性</strong></li><li><strong>延迟</strong>与<strong>吞吐量</strong></li><li><strong>可用性</strong>与<strong>一致性</strong></li></ul><p>记住<strong>每个方面都面临取舍和权衡</strong>。</p><p>然后，我们将深入更具体的主题，如 DNS、CDN 和负载均衡器。</p><h2 id="性能与可扩展性"><a href="#性能与可扩展性" class="headerlink" title="性能与可扩展性"></a>性能与可扩展性</h2><p>如果服务<strong>性能</strong>的增长与资源的增加是成比例的，服务就是可扩展的。通常，提高性能意味着服务于更多的工作单元，另一方面，当数据集增长时，同样也可以处理更大的工作单位。<sup><a href="http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html">1</a></sup></p><p>另一个角度来看待性能与可扩展性:</p><ul><li>如果你的系统有<strong>性能</strong>问题，对于单个用户来说是缓慢的。</li><li>如果你的系统有<strong>可扩展性</strong>问题，单个用户较快但在高负载下会变慢。</li></ul><h3 id="来源及延伸阅读"><a href="#来源及延伸阅读" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html">简单谈谈可扩展性</a></li><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">可扩展性，可用性，稳定性和模式</a></li></ul><h2 id="延迟与吞吐量"><a href="#延迟与吞吐量" class="headerlink" title="延迟与吞吐量"></a>延迟与吞吐量</h2><p><strong>延迟</strong>是执行操作或运算结果所花费的时间。</p><p><strong>吞吐量</strong>是单位时间内（执行）此类操作或运算的数量。</p><p>通常，你应该以<strong>可接受级延迟</strong>下<strong>最大化吞吐量</strong>为目标。</p><h3 id="来源及延伸阅读-1"><a href="#来源及延伸阅读-1" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="https://community.cadence.com/cadence_blogs_8/b/sd/archive/2010/09/13/understanding-latency-vs-throughput">理解延迟与吞吐量</a></li></ul><h2 id="可用性与一致性"><a href="#可用性与一致性" class="headerlink" title="可用性与一致性"></a>可用性与一致性</h2><h3 id="CAP-理论"><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a>CAP 理论</h3><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-UXHgZi.jpg">Imgur</a></p><p>在一个分布式计算系统中，只能同时满足下列的两点:</p><ul><li><strong>一致性</strong> ─ 每次访问都能获得最新数据但可能会收到错误响应</li><li><strong>可用性</strong> ─ 每次访问都能收到非错响应，但不保证获取到最新数据</li><li><strong>分区容错性</strong> ─ 在任意分区网络故障的情况下系统仍能继续运行</li></ul><p><strong>网络并不可靠，所以你应要支持分区容错性，并需要在软件可用性和一致性间做出取舍。</strong></p><h4 id="CP-─-一致性和分区容错性"><a href="#CP-─-一致性和分区容错性" class="headerlink" title="CP ─ 一致性和分区容错性"></a>CP ─ 一致性和分区容错性</h4><p>等待分区节点的响应可能会导致延时错误。如果你的业务需求需要原子读写，CP 是一个不错的选择。</p><h4 id="AP-─-可用性与分区容错性"><a href="#AP-─-可用性与分区容错性" class="headerlink" title="AP ─ 可用性与分区容错性"></a>AP ─ 可用性与分区容错性</h4><p>响应节点上可用数据的最近版本可能并不是最新的。当分区解析完后，写入（操作）可能需要一些时间来传播。</p><p>如果业务需求允许<a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致性</a>，或当有外部故障时要求系统继续运行，AP 是一个不错的选择。</p><h3 id="来源及延伸阅读-2"><a href="#来源及延伸阅读-2" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="http://robertgreiner.com/2014/08/cap-theorem-revisited/">再看 CAP 理论</a></li><li><a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/">通俗易懂地介绍 CAP 理论</a></li><li><a href="https://github.com/henryr/cap-faq">CAP FAQ</a></li></ul><h2 id="一致性模式"><a href="#一致性模式" class="headerlink" title="一致性模式"></a>一致性模式</h2><p>有同一份数据的多份副本，我们面临着怎样同步它们的选择，以便让客户端有一致的显示数据。回想 <a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a>中的一致性定义 ─ 每次访问都能获得最新数据但可能会收到错误响应</p><h3 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h3><p>在写入之后，访问可能看到，也可能看不到（写入数据）。尽力优化之让其能访问最新数据。</p><p>这种方式可以 memcached 等系统中看到。弱一致性在 VoIP，视频聊天和实时多人游戏等真实用例中表现不错。打个比方，如果你在通话中丢失信号几秒钟时间，当重新连接时你是听不到这几秒钟所说的话的。</p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>在写入后，访问最终能看到写入数据（通常在数毫秒内）。数据被异步复制。</p><p>DNS 和 email 等系统使用的是此种方式。最终一致性在高可用性系统中效果不错。</p><h3 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h3><p>在写入后，访问立即可见。数据被同步复制。</p><p>文件系统和关系型数据库（RDBMS）中使用的是此种方式。强一致性在需要记录的系统中运作良好。</p><h3 id="来源及延伸阅读-3"><a href="#来源及延伸阅读-3" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="http://snarfed.org/transactions_across_datacenters_io.html">Transactions across data centers</a></li></ul><h2 id="可用性模式"><a href="#可用性模式" class="headerlink" title="可用性模式"></a>可用性模式</h2><p>有两种支持高可用性的模式: <strong>故障切换（fail-over）</strong>和<strong>复制（replication）</strong>。</p><h3 id="故障切换"><a href="#故障切换" class="headerlink" title="故障切换"></a>故障切换</h3><h4 id="工作到备用切换（Active-passive）"><a href="#工作到备用切换（Active-passive）" class="headerlink" title="工作到备用切换（Active-passive）"></a>工作到备用切换（Active-passive）</h4><p>关于工作到备用的故障切换流程是，工作服务器发送周期信号给待机中的备用服务器。如果周期信号中断，备用服务器切换成工作服务器的 IP 地址并恢复服务。</p><p>宕机时间取决于备用服务器处于“热”待机状态还是需要从“冷”待机状态进行启动。只有工作服务器处理流量。</p><p>工作到备用的故障切换也被称为主从切换。</p><h4 id="双工作切换（Active-active）"><a href="#双工作切换（Active-active）" class="headerlink" title="双工作切换（Active-active）"></a>双工作切换（Active-active）</h4><p>在双工作切换中，双方都在管控流量，在它们之间分散负载。</p><p>如果是外网服务器，DNS 将需要对两方都了解。如果是内网服务器，应用程序逻辑将需要对两方都了解。</p><p>双工作切换也可以称为主主切换。</p><h3 id="缺陷：故障切换"><a href="#缺陷：故障切换" class="headerlink" title="缺陷：故障切换"></a>缺陷：故障切换</h3><ul><li>故障切换需要添加额外硬件并增加复杂性。</li><li>如果新写入数据在能被复制到备用系统之前，工作系统出现了故障，则有可能会丢失数据。</li></ul><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="主─从复制和主─主复制"><a href="#主─从复制和主─主复制" class="headerlink" title="主─从复制和主─主复制"></a>主─从复制和主─主复制</h4><p>这个主题进一步探讨了<a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a>部分:</p><ul><li><a href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">主─从复制</a></li><li><a href="#%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6">主─主复制</a></li></ul><h2 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-UXHgZi.jpg">Imgur</a><br><img src="http://www.slideshare.net/srikrupa5/dns-security-presentation-issa" alt="来源：DNS 安全介绍"><br>域名系统是把 <a href="http://www.example.com/">www.example.com</a> 等域名转换成 IP 地址。</p><p>域名系统是分层次的，一些 DNS 服务器位于顶层。当查询（域名） IP 时，路由或 ISP 提供连接 DNS 服务器的信息。较底层的 DNS 服务器缓存映射，它可能会因为 DNS 传播延时而失效。DNS 结果可以缓存在浏览器或操作系统中一段时间，时间长短取决于<a href="https://en.wikipedia.org/wiki/Time_to_live">存活时间 TTL</a>。</p><ul><li><strong>NS 记录（域名服务）</strong> ─ 指定解析域名或子域名的 DNS 服务器。</li><li><strong>MX 记录（邮件交换）</strong> ─ 指定接收信息的邮件服务器。</li><li><strong>A 记录（地址）</strong> ─ 指定域名对应的 IP 地址记录。</li><li><strong>CNAME（规范）</strong> ─ 一个域名映射到另一个域名或 <code>CNAME</code> 记录（ example.com 指向 <a href="http://www.example.com/">www.example.com</a> ）或映射到一个 <code>A</code> 记录。</li></ul><p><a href="https://www.cloudflare.com/dns/">CloudFlare</a> 和 <a href="https://aws.amazon.com/route53/">Route 53</a> 等平台提供管理 DNS 的功能。某些 DNS 服务通过集中方式来路由流量:</p><ul><li><a href="http://g33kinfo.com/info/archives/2657">加权轮询调度</a><ul><li>防止流量进入维护中的服务器</li><li>在不同大小集群间负载均衡</li><li>A/B 测试</li></ul></li><li>基于延迟路由</li><li>基于地理位置路由</li></ul><h3 id="缺陷-DNS"><a href="#缺陷-DNS" class="headerlink" title="缺陷:DNS"></a>缺陷:DNS</h3><ul><li>虽说缓存可以减轻 DNS 延迟，但连接 DNS 服务器还是带来了轻微的延迟。</li><li>虽然它们通常由<a href="http://superuser.com/questions/472695/who-controls-the-dns-servers/472729">政府，网络服务提供商和大公司</a>管理，但 DNS 服务管理仍可能是复杂的。</li><li>DNS 服务最近遭受 <a href="http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/">DDoS 攻击</a>，阻止不知道 Twitter IP 地址的用户访问 Twitter。</li></ul><h3 id="来源及延伸阅读-4"><a href="#来源及延伸阅读-4" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="https://technet.microsoft.com/en-us/library/dd197427(v=ws.10).aspx">DNS 架构</a></li><li><a href="https://en.wikipedia.org/wiki/Domain_Name_System">Wikipedia</a></li><li><a href="https://support.dnsimple.com/categories/dns/">关于 DNS 的文章</a></li></ul><h2 id="内容分发网络（CDN）"><a href="#内容分发网络（CDN）" class="headerlink" title="内容分发网络（CDN）"></a>内容分发网络（CDN）</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-JMmAvp.jpg">Imgur</a><br><img src="https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/" alt="来源：为什么使用 CDN"></p><p>内容分发网络（CDN）是一个全球性的代理服务器分布式网络，它从靠近用户的位置提供内容。通常，HTML/CSS/JS，图片和视频等静态内容由 CDN 提供，虽然亚马逊 CloudFront 等也支持动态内容。CDN 的 DNS 解析会告知客户端连接哪台服务器。</p><p>将内容存储在 CDN 上可以从两个方面来提供性能:</p><ul><li>从靠近用户的数据中心提供资源</li><li>通过 CDN 你的服务器不必真的处理请求</li></ul><h3 id="CDN-推送（push）"><a href="#CDN-推送（push）" class="headerlink" title="CDN 推送（push）"></a>CDN 推送（push）</h3><p>当你服务器上内容发生变动时，推送 CDN 接受新内容。直接推送给 CDN 并重写 URL 地址以指向你的内容的 CDN 地址。你可以配置内容到期时间及何时更新。内容只有在更改或新增是才推送，流量最小化，但储存最大化。</p><h3 id="CDN-拉取（pull）"><a href="#CDN-拉取（pull）" class="headerlink" title="CDN 拉取（pull）"></a>CDN 拉取（pull）</h3><p>CDN 拉取是当第一个用户请求该资源时，从服务器上拉取资源。你将内容留在自己的服务器上并重写 URL 指向 CDN 地址。直到内容被缓存在 CDN 上为止，这样请求只会更慢，</p><p><a href="https://en.wikipedia.org/wiki/Time_to_live">存活时间（TTL）</a>决定缓存多久时间。CDN 拉取方式最小化 CDN 上的储存空间，但如果过期文件并在实际更改之前被拉取，则会导致冗余的流量。</p><p>高流量站点使用 CDN 拉取效果不错，因为只有最近请求的内容保存在 CDN 中，流量才能更平衡地分散。</p><h3 id="缺陷：CDN"><a href="#缺陷：CDN" class="headerlink" title="缺陷：CDN"></a>缺陷：CDN</h3><ul><li>CDN 成本可能因流量而异，可能在权衡之后你将不会使用 CDN。</li><li>如果在 TTL 过期之前更新内容，CDN 缓存内容可能会过时。</li><li>CDN 需要更改静态内容的 URL 地址以指向 CDN。</li></ul><h3 id="来源及延伸阅读-5"><a href="#来源及延伸阅读-5" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&context=compsci">全球性内容分发网络</a></li><li><a href="http://www.travelblogadvice.com/technical/the-differences-between-push-and-pull-cdns/">CDN 拉取和 CDN 推送的区别</a></li><li><a href="https://en.wikipedia.org/wiki/Content_delivery_network">Wikipedia</a></li></ul><h2 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-JMmAvp.jpg">Imgur</a><br><img src="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html" alt="来源：可扩展的系统设计模式"></p><p>负载均衡器将传入的请求分发到应用服务器和数据库等计算资源。无论哪种情况，负载均衡器将从计算资源来的响应返回给恰当的客户端。负载均衡器的效用在于:</p><ul><li>防止请求进入不好的服务器</li><li>防止资源过载</li><li>帮助消除单一的故障点</li></ul><p>负载均衡器可以通过硬件（昂贵）或 HAProxy 等软件来实现。<br>增加的好处包括:</p><ul><li><strong>SSL 终结</strong> ─ 解密传入的请求并加密服务器响应，这样的话后端服务器就不必再执行这些潜在高消耗运算了。<ul><li>不需要再每台服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509">X.509 证书</a>。</li></ul></li><li><strong>Session 留存</strong> ─ 如果 Web 应用程序不追踪会话，发出 cookie 并将特定客户端的请求路由到同一实例。</li></ul><p>通常会设置采用<a href="#%E5%B7%A5%E4%BD%9C%E5%88%B0%E5%A4%87%E7%94%A8%E5%88%87%E6%8D%A2active-passive">工作─备用</a> 或 <a href="#%E5%8F%8C%E5%B7%A5%E4%BD%9C%E5%88%87%E6%8D%A2active-active">双工作</a> 模式的多个负载均衡器，以免发生故障。</p><p>负载均衡器能基于多种方式来路由流量:</p><ul><li>随机</li><li>最少负载</li><li>Session/cookie</li><li><a href="http://g33kinfo.com/info/archives/2657">轮询调度或加权轮询调度算法</a></li><li><a href="#%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">四层负载均衡</a></li><li><a href="#%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">七层负载均衡</a></li></ul><h3 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h3><p>四层负载均衡根据监看<a href="#%E9%80%9A%E8%AE%AF">传输层</a>的信息来决定如何分发请求。通常，这会涉及来源，目标 IP 地址和请求头中的端口，但不包括数据包（报文）内容。四层负载均衡执行<a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">网络地址转换（NAT）</a>来向上游服务器转发网络数据包。</p><h3 id="七层负载均衡器"><a href="#七层负载均衡器" class="headerlink" title="七层负载均衡器"></a>七层负载均衡器</h3><p>七层负载均衡器根据监控<a href="#%E9%80%9A%E8%AE%AF">应用层</a>来决定怎样分发请求。这会涉及请求头的内容，消息和 cookie。七层负载均衡器终结网络流量，读取消息，做出负载均衡判定，然后传送给特定服务器。比如，一个七层负载均衡器能直接将视频流量连接到托管视频的服务器，同时将更敏感的用户账单流量引导到安全性更强的服务器。</p><p>以损失灵活性为代价，四层负载均衡比七层负载均衡花费更少时间和计算资源，虽然这对现代商用硬件的性能影响甚微。</p><h3 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h3><p>负载均衡器还能帮助水平扩展，提高性能和可用性。使用商业硬件的性价比更高，并且比在单台硬件上<strong>垂直扩展</strong>更贵的硬件具有更高的可用性。相比招聘特定企业系统人才，招聘商业硬件方面的人才更加容易。</p><h4 id="缺陷：水平扩展"><a href="#缺陷：水平扩展" class="headerlink" title="缺陷：水平扩展"></a>缺陷：水平扩展</h4><ul><li>水平扩展引入了复杂度并涉及服务器复制<ul><li>服务器应该是无状态的:它们也不该包含像 session 或资料图片等与用户关联的数据。</li><li>session 可以集中存储在数据库或持久化<a href="#%E7%BC%93%E5%AD%98">缓存</a>（Redis、Memcached）的数据存储区中。</li></ul></li><li>缓存和数据库等下游服务器需要随着上游服务器进行扩展，以处理更多的并发连接。</li></ul><h3 id="缺陷：负载均衡器"><a href="#缺陷：负载均衡器" class="headerlink" title="缺陷：负载均衡器"></a>缺陷：负载均衡器</h3><ul><li>如果没有足够的资源配置或配置错误，负载均衡器会变成一个性能瓶颈。</li><li>引入负载均衡器以帮助消除单点故障但导致了额外的复杂性。</li><li>单个负载均衡器会导致单点故障，但配置多个负载均衡器会进一步增加复杂性。</li></ul><h3 id="来源及延伸阅读-6"><a href="#来源及延伸阅读-6" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/">NGINX 架构</a></li><li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt">HAProxy 架构指南</a></li><li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">可扩展性</a></li><li><a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)">Wikipedia</a></li><li><a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">四层负载平衡</a></li><li><a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/">七层负载平衡</a></li><li><a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">ELB 监听器配置</a></li></ul><h2 id="反向代理（web-服务器）"><a href="#反向代理（web-服务器）" class="headerlink" title="反向代理（web 服务器）"></a>反向代理（web 服务器）</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-IOjgak.jpg">Imgur</a><br><img src="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html" alt="资料来源：维基百科"></p><p>反向代理是一种可以集中地调用内部服务，并提供统一接口给公共客户的 web 服务器。来自客户端的请求先被反向代理服务器转发到可响应请求的服务器，然后代理再把服务器的响应结果返回给客户端。</p><p>带来的好处包括：</p><ul><li><strong>增加安全性</strong> - 隐藏后端服务器的信息，屏蔽黑名单中的 IP，限制每个客户端的连接数。</li><li><strong>提高可扩展性和灵活性</strong> - 客户端只能看到反向代理服务器的 IP，这使你可以增减服务器或者修改它们的配置。</li><li><strong>本地终结 SSL 会话</strong> - 解密传入请求，加密服务器响应，这样后端服务器就不必完成这些潜在的高成本的操作。<ul><li>免除了在每个服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509">X.509</a> 证书的需要</li></ul></li><li><strong>压缩</strong> - 压缩服务器响应</li><li><strong>缓存</strong> - 直接返回命中的缓存结果</li><li><strong>静态内容</strong> - 直接提供静态内容<ul><li>HTML/CSS/JS</li><li>图片</li><li>视频</li><li>等等</li></ul></li></ul><h3 id="负载均衡器与反向代理"><a href="#负载均衡器与反向代理" class="headerlink" title="负载均衡器与反向代理"></a>负载均衡器与反向代理</h3><ul><li>当你有多个服务器时，部署负载均衡器非常有用。通常，负载均衡器将流量路由给一组功能相同的服务器上。</li><li>即使只有一台 web 服务器或者应用服务器时，反向代理也有用，可以参考上一节介绍的好处。</li><li>NGINX 和 HAProxy 等解决方案可以同时支持第七层反向代理和负载均衡。</li></ul><h3 id="不利之处：反向代理"><a href="#不利之处：反向代理" class="headerlink" title="不利之处：反向代理"></a>不利之处：反向代理</h3><ul><li>引入反向代理会增加系统的复杂度。</li><li>单独一个反向代理服务器仍可能发生单点故障，配置多台反向代理服务器（如<a href="https://en.wikipedia.org/wiki/Failover">故障转移</a>）会进一步增加复杂度。</li></ul><h3 id="来源及延伸阅读-7"><a href="#来源及延伸阅读-7" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/">反向代理与负载均衡</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/">NGINX 架构</a></li><li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt">HAProxy 架构指南</a></li><li><a href="https://en.wikipedia.org/wiki/Reverse_proxy">Wikipedia</a></li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-rCy9nn.jpg">Imgur</a><br><img src="http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer" alt="资料来源：可缩放系统构架介绍"></p><p>将 Web 服务层与应用层（也被称作平台层）分离，可以独立缩放和配置这两层。添加新的 API 只需要添加应用服务器，而不必添加额外的 web 服务器。</p><p><strong>单一职责原则</strong>提倡小型的，自治的服务共同合作。小团队通过提供小型的服务，可以更激进地计划增长。</p><p>应用层中的工作进程也有可以实现<a href="#%E5%BC%82%E6%AD%A5">异步化</a>。</p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>与此讨论相关的话题是 <a href="https://en.wikipedia.org/wiki/Microservices">微服务</a>，可以被描述为一系列可以独立部署的小型的，模块化服务。每个服务运行在一个独立的线程中，通过明确定义的轻量级机制通讯，共同实现业务目标。<sup><a href=https://smartbear.com/learn/api-design/what-are-microservices>1</a></sup></p><p>例如，Pinterest 可能有这些微服务： 用户资料、关注者、Feed 流、搜索、照片上传等。</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>像 <a href="https://www.consul.io/docs/index.html">Consul</a>，<a href="https://coreos.com/etcd/docs/latest">Etcd</a> 和 <a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper">Zookeeper</a> 这样的系统可以通过追踪注册名、地址、端口等信息来帮助服务互相发现对方。<a href="https://www.consul.io/intro/getting-started/checks.html">Health checks</a> 可以帮助确认服务的完整性和是否经常使用一个 <a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEhttp">HTTP</a> 路径。Consul 和 Etcd 都有一个内建的 <a href="#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8">key-value 存储</a> 用来存储配置信息和其他的共享信息。</p><h3 id="不利之处：应用层"><a href="#不利之处：应用层" class="headerlink" title="不利之处：应用层"></a>不利之处：应用层</h3><ul><li>添加由多个松耦合服务组成的应用层，从架构、运营、流程等层面来讲将非常不同（相对于单体系统）。</li><li>微服务会增加部署和运营的复杂度。</li></ul><h3 id="来源及延伸阅读-8"><a href="#来源及延伸阅读-8" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale">可缩放系统构架介绍</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview">破解系统设计面试</a></li><li><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">面向服务架构</a></li><li><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper">Zookeeper 介绍</a></li><li><a href="https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/">构建微服务，你所需要知道的一切</a></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-5kcxZP.jpg">Imgur</a><br><img src="https://www.youtube.com/watch?v=w95murBkYmU" alt="资料来源：扩展你的用户数到第一个一千万"></p><h3 id="关系型数据库管理系统（RDBMS）"><a href="#关系型数据库管理系统（RDBMS）" class="headerlink" title="关系型数据库管理系统（RDBMS）"></a>关系型数据库管理系统（RDBMS）</h3><p>像 SQL 这样的关系型数据库是一系列以表的形式组织的数据项集合。</p><blockquote><p>校对注：这里作者 SQL 可能指的是 MySQL</p></blockquote><p><strong>ACID</strong> 用来描述关系型数据库<a href="https://en.wikipedia.org/wiki/Database_transaction">事务</a>的特性。</p><ul><li><strong>原子性</strong> - 每个事务内部所有操作要么全部完成，要么全部不完成。</li><li><strong>一致性</strong> - 任何事务都使数据库从一个有效的状态转换到另一个有效状态。</li><li><strong>隔离性</strong> - 并发执行事务的结果与顺序执行事务的结果相同。</li><li><strong>持久性</strong> - 事务提交后，对系统的影响是永久的。</li></ul><p>关系型数据库扩展包括许多技术：<strong>主从复制</strong>、<strong>主主复制</strong>、<strong>联合</strong>、<strong>分片</strong>、<strong>非规范化</strong>和 <strong>SQL调优</strong>。</p><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-Cw3yh1.jpg">Imgur</a><br><img src="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" alt="资料来源：可扩展性、可用性、稳定性、模式"></p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>主库同时负责读取和写入操作，并复制写入到一个或多个从库中，从库只负责读操作。树状形式的从库再将写入复制到更多的从库中去。如果主库离线，系统可以以只读模式运行，直到某个从库被提升为主库或有新的主库出现。</p><h5 id="不利之处：主从复制"><a href="#不利之处：主从复制" class="headerlink" title="不利之处：主从复制"></a>不利之处：主从复制</h5><ul><li>将从库提升为主库需要额外的逻辑。</li><li>参考<a href="#%E4%B8%8D%E5%88%A9%E4%B9%8B%E5%A4%84%E5%A4%8D%E5%88%B6">不利之处：复制</a>中，主从复制和主主复制<strong>共同</strong>的问题。</li></ul><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-90GZl5.jpg">Imgur</a><br><img src="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" alt="资料来源：可扩展性、可用性、稳定性、模式"></p><h4 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h4><p>两个主库都负责读操作和写操作，写入操作时互相协调。如果其中一个主库挂机，系统可以继续读取和写入。</p><h5 id="不利之处：-主主复制"><a href="#不利之处：-主主复制" class="headerlink" title="不利之处： 主主复制"></a>不利之处： 主主复制</h5><ul><li>你需要添加负载均衡器或者在应用逻辑中做改动，来确定写入哪一个数据库。</li><li>多数主-主系统要么不能保证一致性（违反 ACID），要么因为同步产生了写入延迟。</li><li>随着更多写入节点的加入和延迟的提高，如何解决冲突显得越发重要。</li><li>参考<a href="#%E4%B8%8D%E5%88%A9%E4%B9%8B%E5%A4%84%E5%A4%8D%E5%88%B6">不利之处：复制</a>中，主从复制和主主复制<strong>共同</strong>的问题。</li></ul><h5 id="不利之处：复制"><a href="#不利之处：复制" class="headerlink" title="不利之处：复制"></a>不利之处：复制</h5><ul><li>如果主库在将新写入的数据复制到其他节点前挂掉，则有数据丢失的可能。</li><li>写入会被重放到负责读取操作的副本。副本可能因为过多写操作阻塞住，导致读取功能异常。</li><li>读取从库越多，需要复制的写入数据就越多，导致更严重的复制延迟。</li><li>在某些数据库系统中，写入主库的操作可以用多个线程并行写入，但读取副本只支持单线程顺序地写入。</li><li>复制意味着更多的硬件和额外的复杂度。</li></ul><h5 id="来源及延伸阅读-9"><a href="#来源及延伸阅读-9" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h5><ul><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">扩展性，可用性，稳定性模式</a></li><li><a href="https://en.wikipedia.org/wiki/Multi-master_replication">多主复制</a></li></ul><h4 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h4><p><a href="http://qiniu.calmchen.com/blog/2022-07-19-wQafDz.jpg">Imgur</a><br><img src="https://www.youtube.com/watch?v=w95murBkYmU" alt="资料来源：扩展你的用户数到第一个一千万"></p><p>联合（或按功能划分）将数据库按对应功能分割。例如，你可以有三个数据库：<strong>论坛</strong>、<strong>用户</strong>和<strong>产品</strong>，而不仅是一个单体数据库，从而减少每个数据库的读取和写入流量，减少复制延迟。较小的数据库意味着更多适合放入内存的数据，进而意味着更高的缓存命中几率。没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p><h5 id="不利之处：联合"><a href="#不利之处：联合" class="headerlink" title="不利之处：联合"></a>不利之处：联合</h5><ul><li>如果你的数据库模式需要大量的功能和数据表，联合的效率并不好。</li><li>你需要更新应用程序的逻辑来确定要读取和写入哪个数据库。</li><li>用 <a href="http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers">server link</a> 从两个库联结数据更复杂。</li><li>联合需要更多的硬件和额外的复杂度。</li></ul><h5 id="来源及延伸阅读：联合"><a href="#来源及延伸阅读：联合" class="headerlink" title="来源及延伸阅读：联合"></a>来源及延伸阅读：联合</h5><ul><li><a href="https://www.youtube.com/watch?v=w95murBkYmU">扩展你的用户数到第一个一千万</a></li></ul><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><p align="center">  <img src="images/wU8x5Id.png">  <br/>  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong></p><p>分片将数据分配在不同的数据库上，使得每个数据库仅管理整个数据集的一个子集。以用户数据库为例，随着用户数量的增加，越来越多的分片会被添加到集群中。</p><p>类似<a href="#%E8%81%94%E5%90%88">联合</a>的优点，分片可以减少读取和写入流量，减少复制并提高缓存命中率。也减少了索引，通常意味着查询更快，性能更好。如果一个分片出问题，其他的仍能运行，你可以使用某种形式的冗余来防止数据丢失。类似联合，没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p><p>常见的做法是用户姓氏的首字母或者用户的地理位置来分隔用户表。</p><h5 id="不利之处：分片"><a href="#不利之处：分片" class="headerlink" title="不利之处：分片"></a>不利之处：分片</h5><ul><li>你需要修改应用程序的逻辑来实现分片，这会带来复杂的 SQL 查询。</li><li>分片不合理可能导致数据负载不均衡。例如，被频繁访问的用户数据会导致其所在分片的负载相对其他分片高。<ul><li>再平衡会引入额外的复杂度。基于<a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html">一致性哈希</a>的分片算法可以减少这种情况。</li></ul></li><li>联结多个分片的数据操作更复杂。</li><li>分片需要更多的硬件和额外的复杂度。</li></ul><h4 id="来源及延伸阅读：分片"><a href="#来源及延伸阅读：分片" class="headerlink" title="来源及延伸阅读：分片"></a>来源及延伸阅读：分片</h4><ul><li><a href="http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html">分片时代来临</a></li><li><a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)">数据库分片架构</a></li><li><a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html">一致性哈希</a></li></ul><h4 id="非规范化"><a href="#非规范化" class="headerlink" title="非规范化"></a>非规范化</h4><p>非规范化试图以写入性能为代价来换取读取性能。在多个表中冗余数据副本，以避免高成本的联结操作。一些关系型数据库，比如 <a href="https://en.wikipedia.org/wiki/PostgreSQL">PostgreSQL</a> 和 Oracle 支持<a href="https://en.wikipedia.org/wiki/Materialized_view">物化视图</a>，可以处理冗余信息存储和保证冗余副本一致。</p><p>当数据使用诸如<a href="#%E8%81%94%E5%90%88">联合</a>和<a href="#%E5%88%86%E7%89%87">分片</a>等技术被分割，进一步提高了处理跨数据中心的联结操作复杂度。非规范化可以规避这种复杂的联结操作。</p><p>在多数系统中，读取操作的频率远高于写入操作，比例可达到 100:1，甚至 1000:1。需要复杂的数据库联结的读取操作成本非常高，在磁盘操作上消耗了大量时间。</p><h5 id="不利之处：非规范化"><a href="#不利之处：非规范化" class="headerlink" title="不利之处：非规范化"></a>不利之处：非规范化</h5><ul><li>数据会冗余。</li><li>约束可以帮助冗余的信息副本保持同步，但这样会增加数据库设计的复杂度。</li><li>非规范化的数据库在高写入负载下性能可能比规范化的数据库差。</li></ul><h5 id="来源及延伸阅读：非规范化"><a href="#来源及延伸阅读：非规范化" class="headerlink" title="来源及延伸阅读：非规范化"></a>来源及延伸阅读：非规范化</h5><ul><li><a href="https://en.wikipedia.org/wiki/Denormalization">非规范化</a></li></ul><h4 id="SQL-调优"><a href="#SQL-调优" class="headerlink" title="SQL 调优"></a>SQL 调优</h4><p>SQL 调优是一个范围很广的话题，有很多相关的<a href="https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias=aps&field-keywords=sql+tuning">书</a>可以作为参考。</p><p>利用<strong>基准测试</strong>和<strong>性能分析</strong>来模拟和发现系统瓶颈很重要。</p><ul><li><strong>基准测试</strong> - 用 <a href="http://httpd.apache.org/docs/2.2/programs/ab.html">ab</a> 等工具模拟高负载情况。</li><li><strong>性能分析</strong> - 通过启用如<a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html">慢查询日志</a>等工具来辅助追踪性能问题。</li></ul><p>基准测试和性能分析可能会指引你到以下优化方案。</p><h5 id="改进模式"><a href="#改进模式" class="headerlink" title="改进模式"></a>改进模式</h5><ul><li>为了实现快速访问，MySQL 在磁盘上用连续的块存储数据。</li><li>使用 <code>CHAR</code> 类型存储固定长度的字段，不要用 <code>VARCHAR</code>。<ul><li><code>CHAR</code> 在快速、随机访问时效率很高。如果使用 <code>VARCHAR</code>，如果你想读取下一个字符串，不得不先读取到当前字符串的末尾。</li></ul></li><li>使用 <code>TEXT</code> 类型存储大块的文本，例如博客正文。<code>TEXT</code> 还允许布尔搜索。使用 <code>TEXT</code> 字段需要在磁盘上存储一个用于定位文本块的指针。</li><li>使用 <code>INT</code> 类型存储高达 2^32 或 40 亿的较大数字。</li><li>使用 <code>DECIMAL</code> 类型存储货币可以避免浮点数表示错误。</li><li>避免使用 <code>BLOBS</code> 存储实际对象，而是用来存储存放对象的位置。</li><li><code>VARCHAR(255)</code> 是以 8 位数字存储的最大字符数，在某些关系型数据库中，最大限度地利用字节。</li><li>在适用场景中设置 <code>NOT NULL</code> 约束来<a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search">提高搜索性能</a>。</li></ul><h5 id="使用正确的索引"><a href="#使用正确的索引" class="headerlink" title="使用正确的索引"></a>使用正确的索引</h5><ul><li>你正查询（<code>SELECT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>JOIN</code>）的列如果用了索引会更快。</li><li>索引通常表示为自平衡的 <a href="https://en.wikipedia.org/wiki/B-tree">B 树</a>，可以保持数据有序，并允许在对数时间内进行搜索，顺序访问，插入，删除操作。</li><li>设置索引，会将数据存在内存中，占用了更多内存空间。</li><li>写入操作会变慢，因为索引需要被更新。</li><li>加载大量数据时，禁用索引再加载数据，然后重建索引，这样也许会更快。</li></ul><h5 id="避免高成本的联结操作"><a href="#避免高成本的联结操作" class="headerlink" title="避免高成本的联结操作"></a>避免高成本的联结操作</h5><ul><li>有性能需要，可以进行非规范化。</li></ul><h5 id="分割数据表"><a href="#分割数据表" class="headerlink" title="分割数据表"></a>分割数据表</h5><ul><li>将热点数据拆分到单独的数据表中，可以有助于缓存。</li></ul><h5 id="调优查询缓存"><a href="#调优查询缓存" class="headerlink" title="调优查询缓存"></a>调优查询缓存</h5><ul><li>在某些情况下，<a href="http://dev.mysql.com/doc/refman/5.7/en/query-cache">查询缓存</a>可能会导致<a href="https://www.percona.com/blog/2014/01/28/10-mysql-performance-tuning-settings-after-installation/">性能问题</a>。</li></ul><h5 id="来源及延伸阅读-10"><a href="#来源及延伸阅读-10" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h5><ul><li><a href="http://20bits.com/article/10-tips-for-optimizing-mysql-queries-that-dont-suck">MySQL 查询优化小贴士</a></li><li><a href="http://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l">为什么 VARCHAR(255) 很常见？</a></li><li><a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search">Null 值是如何影响数据库性能的？</a></li><li><a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html">慢查询日志</a></li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>NoSQL 是<strong>键-值数据库</strong>、<strong>文档型数据库</strong>、<strong>列型数据库</strong>或<strong>图数据库</strong>的统称。数据库是非规范化的，表联结大多在应用程序代码中完成。大多数 NoSQL 无法实现真正符合 ACID 的事务，支持<a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致</a>。</p><p><strong>BASE</strong> 通常被用于描述 NoSQL 数据库的特性。相比 <a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a>，BASE 强调可用性超过一致性。</p><ul><li><strong>基本可用</strong> - 系统保证可用性。</li><li><strong>软状态</strong> - 即使没有输入，系统状态也可能随着时间变化。</li><li><strong>最终一致性</strong> - 经过一段时间之后，系统最终会变一致，因为系统在此期间没有收到任何输入。</li></ul><p>除了在 <a href="#sql-%E8%BF%98%E6%98%AF-nosql">SQL 还是 NoSQL</a> 之间做选择，了解哪种类型的 NoSQL 数据库最适合你的用例也是非常有帮助的。我们将在下一节中快速了解下 <strong>键-值存储</strong>、<strong>文档型存储</strong>、<strong>列型存储</strong>和<strong>图存储</strong>数据库。</p><h4 id="键-值存储"><a href="#键-值存储" class="headerlink" title="键-值存储"></a>键-值存储</h4><blockquote><p>抽象模型：哈希表</p></blockquote><p>键-值存储通常可以实现 O(1) 时间读写，用内存或 SSD 存储数据。数据存储可以按<a href="https://en.wikipedia.org/wiki/Lexicographical_order">字典顺序</a>维护键，从而实现键的高效检索。键-值存储可以用于存储元数据。</p><p>键-值存储性能很高，通常用于存储简单数据模型或频繁修改的数据，如存放在内存中的缓存。键-值存储提供的操作有限，如果需要更多操作，复杂度将转嫁到应用程序层面。</p><p>键-值存储是如文档存储，在某些情况下，甚至是图存储等更复杂的存储系统的基础。</p><h4 id="来源及延伸阅读-11"><a href="#来源及延伸阅读-11" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h4><ul><li><a href="https://en.wikipedia.org/wiki/Key-value_database">键-值数据库</a></li><li><a href="http://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or">键-值存储的劣势</a></li><li><a href="http://qnimate.com/overview-of-redis-architecture/">Redis 架构</a></li><li><a href="https://adayinthelifeof.nl/2011/02/06/memcache-internals/">Memcached 架构</a></li></ul><h4 id="文档类型存储"><a href="#文档类型存储" class="headerlink" title="文档类型存储"></a>文档类型存储</h4><blockquote><p>抽象模型：将文档作为值的键-值存储</p></blockquote><p>文档类型存储以文档（XML、JSON、二进制文件等）为中心，文档存储了指定对象的全部信息。文档存储根据文档自身的内部结构提供 API 或查询语句来实现查询。请注意，许多键-值存储数据库有用值存储元数据的特性，这也模糊了这两种存储类型的界限。</p><p>基于底层实现，文档可以根据集合、标签、元数据或者文件夹组织。尽管不同文档可以被组织在一起或者分成一组，但相互之间可能具有完全不同的字段。</p><p>MongoDB 和 CouchDB 等一些文档类型存储还提供了类似 SQL 语言的查询语句来实现复杂查询。DynamoDB 同时支持键-值存储和文档类型存储。</p><p>文档类型存储具备高度的灵活性，常用于处理偶尔变化的数据。</p><h4 id="来源及延伸阅读：文档类型存储"><a href="#来源及延伸阅读：文档类型存储" class="headerlink" title="来源及延伸阅读：文档类型存储"></a>来源及延伸阅读：文档类型存储</h4><ul><li><a href="https://en.wikipedia.org/wiki/Document-oriented_database">面向文档的数据库</a></li><li><a href="https://www.mongodb.com/mongodb-architecture">MongoDB 架构</a></li><li><a href="https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/">CouchDB 架构</a></li><li><a href="https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up">Elasticsearch 架构</a></li></ul><h4 id="列型存储"><a href="#列型存储" class="headerlink" title="列型存储"></a>列型存储</h4><p align="center">  <img src="images/n16iOGk.png">  <br/>  <strong><a href="http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html">资料来源: SQL 和 NoSQL，一个简短的历史</a></strong></p><blockquote><p>抽象模型：嵌套的 <code>ColumnFamily&lt;RowKey, Columns&lt;ColKey, Value, Timestamp&gt;&gt;</code> 映射</p></blockquote><p>类型存储的基本数据单元是列（名／值对）。列可以在列族（类似于 SQL 的数据表）中被分组。超级列族再分组普通列族。你可以使用行键独立访问每一列，具有相同行键值的列组成一行。每个值都包含版本的时间戳用于解决版本冲突。</p><p>Google 发布了第一个列型存储数据库 <a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf">Bigtable</a>，它影响了 Hadoop 生态系统中活跃的开源数据库 <a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture">HBase</a> 和 Facebook 的 <a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html">Cassandra</a>。像 BigTable，HBase 和 Cassandra 这样的存储系统将键以字母顺序存储，可以高效地读取键列。</p><p>列型存储具备高可用性和高可扩展性。通常被用于大数据相关存储。</p><h5 id="来源及延伸阅读：列型存储"><a href="#来源及延伸阅读：列型存储" class="headerlink" title="来源及延伸阅读：列型存储"></a>来源及延伸阅读：列型存储</h5><ul><li><a href="http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html">SQL 与 NoSQL 简史</a></li><li><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf">BigTable 架构</a></li><li><a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture">Hbase 架构</a></li><li><a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html">Cassandra 架构</a></li></ul><h4 id="图数据库"><a href="#图数据库" class="headerlink" title="图数据库"></a>图数据库</h4><p align="center">  <img src="images/fNcl65g.png">  <br/>  <strong><a href="https://en.wikipedia.org/wiki/File:GraphDatabase_PropertyGraph.png"/>资料来源：图数据库</a></strong></p><blockquote><p>抽象模型： 图</p></blockquote><p>在图数据库中，一个节点对应一条记录，一个弧对应两个节点之间的关系。图数据库被优化用于表示外键繁多的复杂关系或多对多关系。</p><p>图数据库为存储复杂关系的数据模型，如社交网络，提供了很高的性能。它们相对较新，尚未广泛应用，查找开发工具或者资源相对较难。许多图只能通过 <a href="#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest">REST API</a> 访问。</p><h5 id="相关资源和延伸阅读：图"><a href="#相关资源和延伸阅读：图" class="headerlink" title="相关资源和延伸阅读：图"></a>相关资源和延伸阅读：图</h5><ul><li><a href="https://en.wikipedia.org/wiki/Graph_database">图数据库</a></li><li><a href="https://neo4j.com/">Neo4j</a></li><li><a href="https://blog.twitter.com/2010/introducing-flockdb">FlockDB</a></li></ul><h4 id="来源及延伸阅读：NoSQL"><a href="#来源及延伸阅读：NoSQL" class="headerlink" title="来源及延伸阅读：NoSQL"></a>来源及延伸阅读：NoSQL</h4><ul><li><a href="http://stackoverflow.com/questions/3342497/explanation-of-base-terminology">数据库术语解释</a></li><li><a href="https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq">NoSQL 数据库 - 调查及决策指南</a></li><li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">可扩展性</a></li><li><a href="https://www.youtube.com/watch?v=qI_g07C_Q5I">NoSQL 介绍</a></li><li><a href="http://horicky.blogspot.com/2009/11/nosql-patterns.html">NoSQL 模式</a></li></ul><h3 id="SQL-还是-NoSQL"><a href="#SQL-还是-NoSQL" class="headerlink" title="SQL 还是 NoSQL"></a>SQL 还是 NoSQL</h3><p align="center">  <img src="images/wXGqG5f.png">  <br/>  <strong><a href="https://www.infoq.com/articles/Transition-RDBMS-NoSQL/">资料来源：从 RDBMS 转换到 NoSQL</a></strong></p><p>选取 <strong>SQL</strong> 的原因:</p><ul><li>结构化数据</li><li>严格的模式</li><li>关系型数据</li><li>需要复杂的联结操作</li><li>事务</li><li>清晰的扩展模式</li><li>既有资源更丰富：开发者、社区、代码库、工具等</li><li>通过索引进行查询非常快</li></ul><p>选取 <strong>NoSQL</strong> 的原因：</p><ul><li>半结构化数据</li><li>动态或灵活的模式</li><li>非关系型数据</li><li>不需要复杂的联结操作</li><li>存储 TB （甚至 PB）级别的数据</li><li>高数据密集的工作负载</li><li>IOPS 高吞吐量</li></ul><p>适合 NoSQL 的示例数据：</p><ul><li>埋点数据和日志数据</li><li>排行榜或者得分数据</li><li>临时数据，如购物车</li><li>频繁访问的（“热”）表</li><li>元数据／查找表</li></ul><h5 id="来源及延伸阅读：SQL-或-NoSQL"><a href="#来源及延伸阅读：SQL-或-NoSQL" class="headerlink" title="来源及延伸阅读：SQL 或 NoSQL"></a>来源及延伸阅读：SQL 或 NoSQL</h5><ul><li><a href="https://www.youtube.com/watch?v=w95murBkYmU">扩展你的用户数到第一个千万</a></li><li><a href="https://www.sitepoint.com/sql-vs-nosql-differences/">SQL 和 NoSQL 的不同</a><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2></li></ul><p align="center">  <img src="images/Q6z24La.png">  <br/>  <strong><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">资料来源：可扩展的系统设计模式</a></strong></p><p>缓存可以提高页面加载速度，并可以减少服务器和数据库的负载。在这个模型中，分发器先查看请求之前是否被响应过，如果有则将之前的结果直接返回，来省掉真正的处理。</p><p>数据库分片均匀分布的读取是最好的。但是热门数据会让读取分布不均匀，这样就会造成瓶颈，如果在数据库前加个缓存，就会抹平不均匀的负载和突发流量对数据库的影响。</p><h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><p>缓存可以位于客户端（操作系统或者浏览器），<a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">服务端</a>或者不同的缓存层。</p><h3 id="CDN-缓存"><a href="#CDN-缓存" class="headerlink" title="CDN 缓存"></a>CDN 缓存</h3><p><a href="#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn">CDN</a> 也被视为一种缓存。</p><h3 id="Web-服务器缓存"><a href="#Web-服务器缓存" class="headerlink" title="Web 服务器缓存"></a>Web 服务器缓存</h3><p><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">反向代理</a>和缓存（比如 <a href="https://www.varnish-cache.org/">Varnish</a>）可以直接提供静态和动态内容。Web 服务器同样也可以缓存请求，返回相应结果而不必连接应用服务器。</p><h3 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h3><p>数据库的默认配置中通常包含缓存级别，针对一般用例进行了优化。调整配置，在不同情况下使用不同的模式可以进一步提高性能。</p><h3 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h3><p>基于内存的缓存比如 Memcached 和 Redis 是应用程序和数据存储之间的一种键值存储。由于数据保存在 RAM 中，它比存储在磁盘上的典型数据库要快多了。RAM 比磁盘限制更多，所以例如 <a href="https://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used">least recently used (LRU)</a> 的<a href="https://en.wikipedia.org/wiki/Cache_algorithms">缓存无效算法</a>可以将「热门数据」放在 RAM 中，而对一些比较「冷门」的数据不做处理。</p><p>Redis 有下列附加功能：</p><ul><li>持久性选项</li><li>内置数据结构比如有序集合和列表</li></ul><p>有多个缓存级别，分为两大类：<strong>数据库查询</strong>和<strong>对象</strong>：</p><ul><li>行级别</li><li>查询级别</li><li>完整的可序列化对象</li><li>完全渲染的 HTML</li></ul><p>一般来说，你应该尽量避免基于文件的缓存，因为这使得复制和自动缩放很困难。</p><h3 id="数据库查询级别的缓存"><a href="#数据库查询级别的缓存" class="headerlink" title="数据库查询级别的缓存"></a>数据库查询级别的缓存</h3><p>当你查询数据库的时候，将查询语句的哈希值与查询结果存储到缓存中。这种方法会遇到以下问题：</p><ul><li>很难用复杂的查询删除已缓存结果。</li><li>如果一条数据比如表中某条数据的一项被改变，则需要删除所有可能包含已更改项的缓存结果。</li></ul><h3 id="对象级别的缓存"><a href="#对象级别的缓存" class="headerlink" title="对象级别的缓存"></a>对象级别的缓存</h3><p>将您的数据视为对象，就像对待你的应用代码一样。让应用程序将数据从数据库中组合到类实例或数据结构中：</p><ul><li>如果对象的基础数据已经更改了，那么从缓存中删掉这个对象。</li><li>允许异步处理：workers 通过使用最新的缓存对象来组装对象。</li></ul><p>建议缓存的内容：</p><ul><li>用户会话</li><li>完全渲染的 Web 页面</li><li>活动流</li><li>用户图数据</li></ul><h3 id="何时更新缓存"><a href="#何时更新缓存" class="headerlink" title="何时更新缓存"></a>何时更新缓存</h3><p>由于你只能在缓存中存储有限的数据，所以你需要选择一个适用于你用例的缓存更新策略。</p><h4 id="缓存模式"><a href="#缓存模式" class="headerlink" title="缓存模式"></a>缓存模式</h4><p align="center">  <img src="images/ONjORqk.png">  <br/>  <strong><a href="http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast">资料来源：从缓存到内存数据网格</a></strong></p><p>应用从存储器读写。缓存不和存储器直接交互，应用执行以下操作：</p><ul><li>在缓存中查找记录，如果所需数据不在缓存中</li><li>从数据库中加载所需内容</li><li>将查找到的结果存储到缓存中</li><li>返回所需内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>(<span class="hljs-params">self, user_id</span>):<br>    user = cache.get(<span class="hljs-string">&quot;user.&#123;0&#125;&quot;</span>, user_id)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        user = db.query(<span class="hljs-string">&quot;SELECT * FROM users WHERE user_id = &#123;0&#125;&quot;</span>, user_id)<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            key = <span class="hljs-string">&quot;user.&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(user_id)<br>            cache.<span class="hljs-built_in">set</span>(key, json.dumps(user))<br>    <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><p><a href="https://memcached.org/">Memcached</a> 通常用这种方式使用。</p><p>添加到缓存中的数据读取速度很快。缓存模式也称为延迟加载。只缓存所请求的数据，这避免了没有被请求的数据占满了缓存空间。</p><h5 id="缓存的缺点："><a href="#缓存的缺点：" class="headerlink" title="缓存的缺点："></a>缓存的缺点：</h5><ul><li>请求的数据如果不在缓存中就需要经过三个步骤来获取数据，这会导致明显的延迟。</li><li>如果数据库中的数据更新了会导致缓存中的数据过时。这个问题需要通过设置 TTL 强制更新缓存或者直写模式来缓解这种情况。</li><li>当一个节点出现故障的时候，它将会被一个新的节点替代，这增加了延迟的时间。</li></ul><h4 id="直写模式"><a href="#直写模式" class="headerlink" title="直写模式"></a>直写模式</h4><p align="center">  <img src="images/0vBc0hN.png">  <br/>  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong></p><p>应用使用缓存作为主要的数据存储，将数据读写到缓存中，而缓存负责从数据库中读写数据。</p><ul><li>应用向缓存中添加/更新数据</li><li>缓存同步地写入数据存储</li><li>返回所需内容</li></ul><p>应用代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">set_user</span><span class="hljs-params">(<span class="hljs-number">12345</span>, &#123;<span class="hljs-string">&quot;foo&quot;</span>:<span class="hljs-string">&quot;bar&quot;</span>&#125;)</span></span><br></code></pre></td></tr></table></figure><p>缓存代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_user</span>(<span class="hljs-params">user_id, values</span>):<br>    user = db.query(<span class="hljs-string">&quot;UPDATE Users WHERE id = &#123;0&#125;&quot;</span>, user_id, values)<br>    cache.<span class="hljs-built_in">set</span>(user_id, user)<br></code></pre></td></tr></table></figure><p>由于存写操作所以直写模式整体是一种很慢的操作，但是读取刚写入的数据很快。相比读取数据，用户通常比较能接受更新数据时速度较慢。缓存中的数据不会过时。</p><h5 id="直写模式的缺点："><a href="#直写模式的缺点：" class="headerlink" title="直写模式的缺点："></a>直写模式的缺点：</h5><ul><li>由于故障或者缩放而创建的新的节点，新的节点不会缓存，直到数据库更新为止。缓存应用直写模式可以缓解这个问题。</li><li>写入的大多数数据可能永远都不会被读取，用 TTL 可以最小化这种情况的出现。</li></ul><h4 id="回写模式"><a href="#回写模式" class="headerlink" title="回写模式"></a>回写模式</h4><p align="center">  <img src="images/rgSrvjG.png">  <br/>  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong></p><p>在回写模式中，应用执行以下操作：</p><ul><li>在缓存中增加或者更新条目</li><li>异步写入数据，提高写入性能。</li></ul><h5 id="回写模式的缺点："><a href="#回写模式的缺点：" class="headerlink" title="回写模式的缺点："></a>回写模式的缺点：</h5><ul><li>缓存可能在其内容成功存储之前丢失数据。</li><li>执行直写模式比缓存或者回写模式更复杂。</li></ul><h4 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h4><p align="center">  <img src="images/kxtjqgE.png">  <br/>  <strong><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>资料来源：从缓存到内存数据网格</a></strong></p><p>你可以将缓存配置成在到期之前自动刷新最近访问过的内容。</p><p>如果缓存可以准确预测将来可能请求哪些数据，那么刷新可能会导致延迟与读取时间的降低。</p><h5 id="刷新的缺点："><a href="#刷新的缺点：" class="headerlink" title="刷新的缺点："></a>刷新的缺点：</h5><ul><li>不能准确预测到未来需要用到的数据可能会导致性能不如不使用刷新。</li></ul><h3 id="缓存的缺点：-1"><a href="#缓存的缺点：-1" class="headerlink" title="缓存的缺点："></a>缓存的缺点：</h3><ul><li>需要保持缓存和真实数据源之间的一致性，比如数据库根据<a href="https://en.wikipedia.org/wiki/Cache_algorithms">缓存无效</a>。</li><li>需要改变应用程序比如增加 Redis 或者 memcached。</li><li>无效缓存是个难题，什么时候更新缓存是与之相关的复杂问题。</li></ul><h3 id="相关资源和延伸阅读-1"><a href="#相关资源和延伸阅读-1" class="headerlink" title="相关资源和延伸阅读"></a>相关资源和延伸阅读</h3><ul><li><a href="http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast">从缓存到内存数据</a></li><li><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">可扩展系统设计模式</a></li><li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale/">可缩放系统构架介绍</a></li><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">可扩展性，可用性，稳定性和模式</a></li><li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">可扩展性</a></li><li><a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Strategies.html">AWS ElastiCache 策略</a></li><li><a href="https://en.wikipedia.org/wiki/Cache_(computing)">维基百科</a></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p align="center">  <img src="images/54GYsSx.png">  <br/>  <strong><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>资料来源：可缩放系统构架介绍</a></strong></p><p>异步工作流有助于减少那些原本顺序执行的请求时间。它们可以通过提前进行一些耗时的工作来帮助减少请求时间，比如定期汇总数据。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列接收，保留和传递消息。如果按顺序执行操作太慢的话，你可以使用有以下工作流的消息队列：</p><ul><li>应用程序将作业发布到队列，然后通知用户作业状态</li><li>一个 worker 从队列中取出该作业，对其进行处理，然后显示该作业完成</li></ul><p>不去阻塞用户操作，作业在后台处理。在此期间，客户端可能会进行一些处理使得看上去像是任务已经完成了。例如，如果要发送一条推文，推文可能会马上出现在你的时间线上，但是可能需要一些时间才能将你的推文推送到你的所有关注者那里去。</p><p><strong>Redis</strong> 是一个令人满意的简单的消息代理，但是消息有可能会丢失。</p><p><strong>RabbitMQ</strong> 很受欢迎但是要求你适应「AMQP」协议并且管理你自己的节点。</p><p><strong>Amazon SQS</strong> 是被托管的，但可能具有高延迟，并且消息可能会被传送两次。</p><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>任务队列接收任务及其相关数据，运行它们，然后传递其结果。 它们可以支持调度，并可用于在后台运行计算密集型作业。</p><p><strong>Celery</strong> 支持调度，主要是用 Python 开发的。</p><h3 id="背压"><a href="#背压" class="headerlink" title="背压"></a>背压</h3><p>如果队列开始明显增长，那么队列大小可能会超过内存大小，导致高速缓存未命中，磁盘读取，甚至性能更慢。<a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html">背压</a>可以通过限制队列大小来帮助我们，从而为队列中的作业保持高吞吐率和良好的响应时间。一旦队列填满，客户端将得到服务器忙或者 HTTP 503 状态码，以便稍后重试。客户端可以在稍后时间重试该请求，也许是<a href="https://en.wikipedia.org/wiki/Exponential_backoff">指数退避</a>。</p><h3 id="异步的缺点："><a href="#异步的缺点：" class="headerlink" title="异步的缺点："></a>异步的缺点：</h3><ul><li>简单的计算和实时工作流等用例可能更适用于同步操作，因为引入队列可能会增加延迟和复杂性。</li></ul><h3 id="相关资源和延伸阅读-2"><a href="#相关资源和延伸阅读-2" class="headerlink" title="相关资源和延伸阅读"></a>相关资源和延伸阅读</h3><ul><li><a href="https://www.youtube.com/watch?v=1KRYH75wgy4">这是一个数字游戏</a></li><li><a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html">超载时应用背压</a></li><li><a href="https://en.wikipedia.org/wiki/Little%27s_law">利特尔法则</a></li><li><a href="https://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function">消息队列与任务队列有什么区别？</a></li></ul><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><p align="center">  <img src="images/5KeocQs.jpg">  <br/>  <strong><a href=http://www.escotal.com/osilayer.html>资料来源：OSI 7层模型</a></strong></p><h3 id="超文本传输协议（HTTP）"><a href="#超文本传输协议（HTTP）" class="headerlink" title="超文本传输协议（HTTP）"></a>超文本传输协议（HTTP）</h3><p>HTTP 是一种在客户端和服务器之间编码和传输数据的方法。它是一个请求/响应协议：客户端和服务端针对相关内容和完成状态信息的请求和响应。HTTP 是独立的，允许请求和响应流经许多执行负载均衡，缓存，加密和压缩的中间路由器和服务器。</p><p>一个基本的 HTTP 请求由一个动词（方法）和一个资源（端点）组成。 以下是常见的 HTTP 动词：</p><table><thead><tr><th>动词</th><th>描述</th><th>*幂等</th><th>安全性</th><th>可缓存</th></tr></thead><tbody><tr><td>GET</td><td>读取资源</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>POST</td><td>创建资源或触发处理数据的进程</td><td>No</td><td>No</td><td>Yes，如果回应包含刷新信息</td></tr><tr><td>PUT</td><td>创建或替换资源</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>No</td><td>No</td><td>Yes，如果回应包含刷新信息</td></tr><tr><td>DELETE</td><td>删除资源</td><td>Yes</td><td>No</td><td>No</td></tr></tbody></table><p><strong>多次执行不会产生不同的结果</strong>。</p><p>HTTP 是依赖于较低级协议（如 <strong>TCP</strong> 和 <strong>UDP</strong>）的应用层协议。</p><h4 id="来源及延伸阅读：HTTP"><a href="#来源及延伸阅读：HTTP" class="headerlink" title="来源及延伸阅读：HTTP"></a>来源及延伸阅读：HTTP</h4><ul><li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol">README</a>    +</li><li><a href="https://www.nginx.com/resources/glossary/http/">HTTP 是什么？</a></li><li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol">HTTP 和 TCP 的区别</a></li><li><a href="https://laracasts.com/discuss/channels/general-discussion/whats-the-differences-between-put-and-patch?page=1">PUT 和 PATCH的区别</a></li></ul><h3 id="传输控制协议（TCP）"><a href="#传输控制协议（TCP）" class="headerlink" title="传输控制协议（TCP）"></a>传输控制协议（TCP）</h3><p align="center">  <img src="images/JdAsdvG.jpg">  <br/>  <strong><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/">资料来源：如何制作多人游戏</a></strong></p><p>TCP 是通过 <a href="https://en.wikipedia.org/wiki/Internet_Protocol">IP 网络</a>的面向连接的协议。 使用<a href="https://en.wikipedia.org/wiki/Handshaking">握手</a>建立和断开连接。 发送的所有数据包保证以原始顺序到达目的地，用以下措施保证数据包不被损坏：</p><ul><li>每个数据包的序列号和<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Checksum_computation">校验码</a>。</li><li><a href="https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)">确认包</a>和自动重传</li></ul><p>如果发送者没有收到正确的响应，它将重新发送数据包。如果多次超时，连接就会断开。TCP 实行<a href="https://en.wikipedia.org/wiki/Flow_control_(data)">流量控制</a>和<a href="https://en.wikipedia.org/wiki/Network_congestion#Congestion_control">拥塞控制</a>。这些确保措施会导致延迟，而且通常导致传输效率比 UDP 低。</p><p>为了确保高吞吐量，Web 服务器可以保持大量的 TCP 连接，从而导致高内存使用。在 Web 服务器线程间拥有大量开放连接可能开销巨大，消耗资源过多，也就是说，一个 <a href="#memcached">memcached</a> 服务器。<a href="https://en.wikipedia.org/wiki/Connection_pool">连接池</a> 可以帮助除了在适用的情况下切换到 UDP。</p><p>TCP  对于需要高可靠性但时间紧迫的应用程序很有用。比如包括 Web 服务器，数据库信息，SMTP，FTP 和 SSH。</p><p>以下情况使用 TCP 代替 UDP：</p><ul><li>你需要数据完好无损。</li><li>你想对网络吞吐量自动进行最佳评估。</li></ul><h3 id="用户数据报协议（UDP）"><a href="#用户数据报协议（UDP）" class="headerlink" title="用户数据报协议（UDP）"></a>用户数据报协议（UDP）</h3><p align="center">  <img src="images/yzDrJtA.jpg">  <br/>  <strong><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1">资料来源：如何制作多人游戏</a></strong></p><p>UDP 是无连接的。数据报（类似于数据包）只在数据报级别有保证。数据报可能会无序的到达目的地，也有可能会遗失。UDP 不支持拥塞控制。虽然不如 TCP 那样有保证，但 UDP 通常效率更高。</p><p>UDP 可以通过广播将数据报发送至子网内的所有设备。这对 <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">DHCP</a> 很有用，因为子网内的设备还没有分配 IP 地址，而 IP 对于 TCP 是必须的。</p><p>UDP 可靠性更低但适合用在网络电话、视频聊天，流媒体和实时多人游戏上。</p><p>以下情况使用 UDP 代替 TCP：</p><ul><li>你需要低延迟</li><li>相对于数据丢失更糟的是数据延迟</li><li>你想实现自己的错误校正方法</li></ul><h4 id="来源及延伸阅读：TCP-与-UDP"><a href="#来源及延伸阅读：TCP-与-UDP" class="headerlink" title="来源及延伸阅读：TCP 与 UDP"></a>来源及延伸阅读：TCP 与 UDP</h4><ul><li><a href="http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/">游戏编程的网络</a></li><li><a href="http://www.cyberciti.biz/faq/key-differences-between-tcp-and-udp-protocols/">TCP 与 UDP 的关键区别</a></li><li><a href="http://stackoverflow.com/questions/5970383/difference-between-tcp-and-udp">TCP 与 UDP 的不同</a></li><li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">传输控制协议</a></li><li><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">用户数据报协议</a></li><li><a href="http://www.cs.bu.edu/~jappavoo/jappavoo.github.com/451/papers/memcache-fb.pdf">Memcache 在 Facebook 的扩展</a></li></ul><h3 id="远程过程调用协议（RPC）"><a href="#远程过程调用协议（RPC）" class="headerlink" title="远程过程调用协议（RPC）"></a>远程过程调用协议（RPC）</h3><p align="center">  <img src="images/iF4Mkb5.png">  <br/>  <strong><a href="http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview">Source: Crack the system design interview</a></strong></p><p>在 RPC 中，客户端会去调用另一个地址空间（通常是一个远程服务器）里的方法。调用代码看起来就像是调用的是一个本地方法，客户端和服务器交互的具体过程被抽象。远程调用相对于本地调用一般较慢而且可靠性更差，因此区分两者是有帮助的。热门的 RPC 框架包括 <a href="https://developers.google.com/protocol-buffers/">Protobuf</a>、<a href="https://thrift.apache.org/">Thrift</a> 和 <a href="https://avro.apache.org/docs/current/">Avro</a>。</p><p>RPC 是一个“请求-响应”协议：</p><ul><li><strong>客户端程序</strong> ── 调用客户端存根程序。就像调用本地方法一样，参数会被压入栈中。</li><li><strong>客户端 stub 程序</strong> ── 将请求过程的 id 和参数打包进请求信息中。</li><li><strong>客户端通信模块</strong> ── 将信息从客户端发送至服务端。</li><li><strong>服务端通信模块</strong> ── 将接受的包传给服务端存根程序。</li><li><strong>服务端 stub 程序</strong> ── 将结果解包，依据过程 id 调用服务端方法并将参数传递过去。</li></ul><p>RPC 调用示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /someoperation?<span class="hljs-attribute">data</span>=anId<br><br>POST /anotheroperation<br>&#123;<br>  <span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;anId&quot;</span>;<br>  <span class="hljs-string">&quot;anotherdata&quot;</span>: <span class="hljs-string">&quot;another value&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>RPC 专注于暴露方法。RPC 通常用于处理内部通讯的性能问题，这样你可以手动处理本地调用以更好的适应你的情况。</p><p>当以下情况时选择本地库（也就是 SDK）：</p><ul><li>你知道你的目标平台。</li><li>你想控制如何访问你的“逻辑”。</li><li>你想对发生在你的库中的错误进行控制。</li><li>性能和终端用户体验是你最关心的事。</li></ul><p>遵循 <strong>REST</strong> 的 HTTP API 往往更适用于公共 API。</p><h4 id="缺点：RPC"><a href="#缺点：RPC" class="headerlink" title="缺点：RPC"></a>缺点：RPC</h4><ul><li>RPC 客户端与服务实现捆绑地很紧密。</li><li>一个新的 API 必须在每一个操作或者用例中定义。</li><li>RPC 很难调试。</li><li>你可能没办法很方便的去修改现有的技术。举个例子，如果你希望在 <a href="http://www.squid-cache.org/">Squid</a> 这样的缓存服务器上确保 <a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/">RPC 被正确缓存</a>的话可能需要一些额外的努力了。</li></ul><h3 id="表述性状态转移（REST）"><a href="#表述性状态转移（REST）" class="headerlink" title="表述性状态转移（REST）"></a>表述性状态转移（REST）</h3><p>REST 是一种强制的客户端/服务端架构设计模型，客户端基于服务端管理的一系列资源操作。服务端提供修改或获取资源的接口。所有的通信必须是无状态和可缓存的。</p><p>RESTful 接口有四条规则：</p><ul><li><strong>标志资源（HTTP 里的 URI）</strong> ── 无论什么操作都使用同一个 URI。</li><li><strong>表示的改变（HTTP 的动作）</strong> ── 使用动作, headers 和 body。</li><li><strong>可自我描述的错误信息（HTTP 中的 status code）</strong> ── 使用状态码，不要重新造轮子。</li><li><strong><a href="http://restcookbook.com/Basics/hateoas/">HATEOAS</a>（HTTP 中的HTML 接口）</strong> ── 你的 web 服务器应该能够通过浏览器访问。</li></ul><p>REST 请求的例子：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/someresources/</span>anId<br><br>PUT <span class="hljs-regexp">/someresources/</span>anId<br>&#123;<span class="hljs-string">&quot;anotherdata&quot;</span>: <span class="hljs-string">&quot;another value&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>REST 关注于暴露数据。它减少了客户端／服务端的耦合程度，经常用于公共 HTTP API 接口设计。REST 使用更通常与规范化的方法来通过 URI 暴露资源，<a href="https://github.com/for-GET/know-your-http-well/blob/master/headers.md">通过 header 来表述</a>并通过 GET、POST、PUT、DELETE 和 PATCH 这些动作来进行操作。因为无状态的特性，REST 易于横向扩展和隔离。</p><h4 id="缺点：REST"><a href="#缺点：REST" class="headerlink" title="缺点：REST"></a>缺点：REST</h4><ul><li>由于 REST 将重点放在暴露数据，所以当资源不是自然组织的或者结构复杂的时候它可能无法很好的适应。举个例子，返回过去一小时中与特定事件集匹配的更新记录这种操作就很难表示为路径。使用 REST，可能会使用 URI 路径，查询参数和可能的请求体来实现。</li><li>REST 一般依赖几个动作（GET、POST、PUT、DELETE 和 PATCH），但有时候仅仅这些没法满足你的需要。举个例子，将过期的文档移动到归档文件夹里去，这样的操作可能没法简单的用上面这几个 verbs 表达。</li><li>为了渲染单个页面，获取被嵌套在层级结构中的复杂资源需要客户端，服务器之间多次往返通信。例如，获取博客内容及其关联评论。对于使用不确定网络环境的移动应用来说，这些多次往返通信是非常麻烦的。</li><li>随着时间的推移，更多的字段可能会被添加到 API 响应中，较旧的客户端将会接收到所有新的数据字段，即使是那些它们不需要的字段，结果它会增加负载大小并引起更大的延迟。</li></ul><h3 id="RPC-与-REST-比较"><a href="#RPC-与-REST-比较" class="headerlink" title="RPC 与 REST 比较"></a>RPC 与 REST 比较</h3><table><thead><tr><th>操作</th><th>RPC</th><th>REST</th></tr></thead><tbody><tr><td>注册</td><td><strong>POST</strong> /signup</td><td><strong>POST</strong> /persons</td></tr><tr><td>注销</td><td><strong>POST</strong> /resign<br/>{<br/>“personid”: “1234”<br/>}</td><td><strong>DELETE</strong> /persons/1234</td></tr><tr><td>读取用户信息</td><td><strong>GET</strong> /readPerson?personid=1234</td><td><strong>GET</strong> /persons/1234</td></tr><tr><td>读取用户物品列表</td><td><strong>GET</strong> /readUsersItemsList?personid=1234</td><td><strong>GET</strong> /persons/1234/items</td></tr><tr><td>向用户物品列表添加一项</td><td><strong>POST</strong> /addItemToUsersItemsList<br/>{<br/>“personid”: “1234”;<br/>“itemid”: “456”<br/>}</td><td><strong>POST</strong> /persons/1234/items<br/>{<br/>“itemid”: “456”<br/>}</td></tr><tr><td>更新一个物品</td><td><strong>POST</strong> /modifyItem<br/>{<br/>“itemid”: “456”;<br/>“key”: “value”<br/>}</td><td><strong>PUT</strong> /items/456<br/>{<br/>“key”: “value”<br/>}</td></tr><tr><td>删除一个物品</td><td><strong>POST</strong> /removeItem<br/>{<br/>“itemid”: “456”<br/>}</td><td><strong>DELETE</strong> /items/456</td></tr></tbody></table><p align="center">  <strong><a href="https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc">资料来源：你真的知道你为什么更喜欢 REST 而不是 RPC 吗</a></strong></p><h4 id="来源及延伸阅读：REST-与-RPC"><a href="#来源及延伸阅读：REST-与-RPC" class="headerlink" title="来源及延伸阅读：REST 与 RPC"></a>来源及延伸阅读：REST 与 RPC</h4><ul><li><a href="https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/">你真的知道你为什么更喜欢 REST 而不是 RPC 吗</a></li><li><a href="http://programmers.stackexchange.com/a/181186">什么时候 RPC 比 REST 更合适？</a></li><li><a href="http://stackoverflow.com/questions/15056878/rest-vs-json-rpc">REST vs JSON-RPC</a></li><li><a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/">揭开 RPC 和 REST 的神秘面纱</a></li><li><a href="https://www.quora.com/What-are-the-drawbacks-of-using-RESTful-APIs">使用 REST 的缺点是什么</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview">破解系统设计面试</a></li><li><a href="https://code.facebook.com/posts/1468950976659943/">Thrift</a></li><li><a href="http://arstechnica.com/civis/viewtopic.php?t=1190508">为什么在内部使用 REST 而不是 RPC</a></li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>这一部分需要更多内容。<a href="#%E8%B4%A1%E7%8C%AE">一起来吧</a>！</p><p>安全是一个宽泛的话题。除非你有相当的经验、安全方面背景或者正在申请的职位要求安全知识，你不需要了解安全基础知识以外的内容：</p><ul><li>在运输和等待过程中加密</li><li>对所有的用户输入和从用户那里发来的参数进行处理以防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS</a> 和 <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL 注入</a>。</li><li>使用参数化的查询来防止 SQL 注入。</li><li>使用<a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">最小权限原则</a>。</li></ul><h3 id="来源及延伸阅读-12"><a href="#来源及延伸阅读-12" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h3><ul><li><a href="https://github.com/FallibleInc/security-guide-for-developers">为开发者准备的安全引导</a></li><li><a href="https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet">OWASP top ten</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>一些时候你会被要求做出保守估计。比如，你可能需要估计从磁盘中生成 100 张图片的缩略图需要的时间或者一个数据结构需要多少的内存。<strong>2 的次方表</strong>和<strong>每个开发者都需要知道的一些时间数据</strong>（译注：OSChina 上有这篇文章的<a href="https://www.oschina.net/news/30009/every-programmer-should-know">译文</a>）都是一些很方便的参考资料。</p><h3 id="2-的次方表"><a href="#2-的次方表" class="headerlink" title="2 的次方表"></a>2 的次方表</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Power           Exact Value         Approx Value        Bytes</span><br><span class="hljs-section">---------------------------------------------------------------</span><br>7                             128<br>8                             256<br>10                           1024   1 thousand           1 KB<br>16                         65,536                       64 KB<br>20                      1,048,576   1 million            1 MB<br>30                  1,073,741,824   1 billion            1 GB<br>32                  4,294,967,296                        4 GB<br>40              1,099,511,627,776   1 trillion           1 TB<br></code></pre></td></tr></table></figure><h4 id="来源及延伸阅读-13"><a href="#来源及延伸阅读-13" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h4><ul><li><a href="https://en.wikipedia.org/wiki/Power_of_two">2 的次方</a></li></ul><h3 id="每个程序员都应该知道的延迟数"><a href="#每个程序员都应该知道的延迟数" class="headerlink" title="每个程序员都应该知道的延迟数"></a>每个程序员都应该知道的延迟数</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Latency Comparison Numbers<br>--------------------------<br>L1 cache <span class="hljs-keyword">reference</span>                           <span class="hljs-number">0.5</span> ns<br>Branch mispredict                            <span class="hljs-number">5</span>   ns<br>L2 cache <span class="hljs-keyword">reference</span>                           <span class="hljs-number">7</span>   ns                      <span class="hljs-number">14</span>x L1 cache<br>Mutex lock/unlock                           <span class="hljs-number">25</span>   ns<br>Main memory <span class="hljs-keyword">reference</span>                      <span class="hljs-number">100</span>   ns                      <span class="hljs-number">20</span>x L2 cache, <span class="hljs-number">200</span>x L1 cache<br>Compress <span class="hljs-number">1</span>K bytes with Zippy            <span class="hljs-number">10</span>,<span class="hljs-number">000</span>   ns       <span class="hljs-number">10</span> us<br>Send <span class="hljs-number">1</span> KB bytes over <span class="hljs-number">1</span> Gbps network     <span class="hljs-number">10</span>,<span class="hljs-number">000</span>   ns       <span class="hljs-number">10</span> us<br><span class="hljs-keyword">Read</span> <span class="hljs-number">4</span> KB randomly from SSD*           <span class="hljs-number">150</span>,<span class="hljs-number">000</span>   ns      <span class="hljs-number">150</span> us          ~<span class="hljs-number">1</span>GB/sec SSD<br><span class="hljs-keyword">Read</span> <span class="hljs-number">1</span> MB sequentially from memory     <span class="hljs-number">250</span>,<span class="hljs-number">000</span>   ns      <span class="hljs-number">250</span> us<br>Round trip within same datacenter      <span class="hljs-number">500</span>,<span class="hljs-number">000</span>   ns      <span class="hljs-number">500</span> us<br><span class="hljs-keyword">Read</span> <span class="hljs-number">1</span> MB sequentially from SSD*     <span class="hljs-number">1</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span>   ns    <span class="hljs-number">1</span>,<span class="hljs-number">000</span> us    <span class="hljs-number">1</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">~1GB</span>/sec SSD, <span class="hljs-number">4</span>X memory<br>Disk seek                           <span class="hljs-number">10</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span>   ns   <span class="hljs-number">10</span>,<span class="hljs-number">000</span> us   <span class="hljs-number">10</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">20x</span> datacenter roundtrip<br><span class="hljs-keyword">Read</span> <span class="hljs-number">1</span> MB sequentially from <span class="hljs-number">1</span> Gbps  <span class="hljs-number">10</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span>   ns   <span class="hljs-number">10</span>,<span class="hljs-number">000</span> us   <span class="hljs-number">10</span> <span class="hljs-keyword">ms</span>  <span class="hljs-title">40x</span> memory, <span class="hljs-number">10</span>X SSD<br><span class="hljs-keyword">Read</span> <span class="hljs-number">1</span> MB sequentially from disk    <span class="hljs-number">30</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span>   ns   <span class="hljs-number">30</span>,<span class="hljs-number">000</span> us   <span class="hljs-number">30</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">120x</span> memory, <span class="hljs-number">30</span>X SSD<br>Send packet CA-&gt;Netherlands-&gt;CA    <span class="hljs-number">150</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span>   ns  <span class="hljs-number">150</span>,<span class="hljs-number">000</span> us  <span class="hljs-number">150</span> <span class="hljs-keyword">ms</span><br><br><span class="hljs-title">Notes</span><br>-----<br><span class="hljs-number">1</span> ns = <span class="hljs-number">10</span>^-<span class="hljs-number">9</span> seconds<br><span class="hljs-number">1</span> us = <span class="hljs-number">10</span>^-<span class="hljs-number">6</span> seconds = <span class="hljs-number">1</span>,<span class="hljs-number">000</span> ns<br><span class="hljs-number">1</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">= 10</span>^-<span class="hljs-number">3</span> seconds = <span class="hljs-number">1</span>,<span class="hljs-number">000</span> us = <span class="hljs-number">1</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span> ns<br></code></pre></td></tr></table></figure><p>基于上述数字的指标：</p><ul><li>从磁盘以 30 MB/s 的速度顺序读取</li><li>以 100 MB/s 从 1 Gbps 的以太网顺序读取</li><li>从 SSD 以 1 GB/s 的速度读取</li><li>以 4 GB/s 的速度从主存读取</li><li>每秒能绕地球 6-7 圈</li><li>数据中心内每秒有 2,000 次往返</li></ul><h4 id="延迟数可视化"><a href="#延迟数可视化" class="headerlink" title="延迟数可视化"></a>延迟数可视化</h4><p><img src="https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67"></p><h4 id="来源及延伸阅读-14"><a href="#来源及延伸阅读-14" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h4><ul><li><a href="https://gist.github.com/jboner/2841832">每个程序员都应该知道的延迟数 — 1</a></li><li><a href="https://gist.github.com/hellerbarde/2843375">每个程序员都应该知道的延迟数 — 2</a></li><li><a href="http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf">关于建设大型分布式系统的的设计方案、课程和建议</a></li><li><a href="https://static.googleusercontent.com/media/research.google.com/en//people/jeff/stanford-295-talk.pdf">关于建设大型可拓展分布式系统的软件工程咨询</a></li></ul><h3 id="其它的系统设计面试题"><a href="#其它的系统设计面试题" class="headerlink" title="其它的系统设计面试题"></a>其它的系统设计面试题</h3><blockquote><p>常见的系统设计面试问题，给出了如何解决的方案链接</p></blockquote><table><thead><tr><th>问题</th><th>引用</th></tr></thead><tbody><tr><td>设计类似于 Dropbox 的文件同步服务</td><td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc">youtube.com</a></td></tr><tr><td>设计类似于 Google 的搜索引擎</td><td><a href="http://queue.acm.org/detail.cfm?id=988407">queue.acm.org</a><br/><a href="http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search">stackexchange.com</a><br/><a href="http://www.ardendertat.com/2012/01/11/implementing-search-engines/">ardendertat.com</a><br/><a href="http://infolab.stanford.edu/~backrub/google.html">stanford.edu</a></td></tr><tr><td>设计类似于 Google 的可扩展网络爬虫</td><td><a href="https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch">quora.com</a></td></tr><tr><td>设计 Google 文档</td><td><a href="https://code.google.com/p/google-mobwrite/">code.google.com</a><br/><a href="https://neil.fraser.name/writing/sync/">neil.fraser.name</a></td></tr><tr><td>设计类似 Redis 的键值存储</td><td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis">slideshare.net</a></td></tr><tr><td>设计类似 Memcached 的缓存系统</td><td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached">slideshare.net</a></td></tr><tr><td>设计类似亚马逊的推荐系统</td><td><a href="http://tech.hulu.com/blog/2011/09/19/recommendation-system.html">hulu.com</a><br/><a href="http://ijcai13.org/files/tutorial_slides/td3.pdf">ijcai13.org</a></td></tr><tr><td>设计类似 Bitly 的短链接系统</td><td><a href="http://n00tc0d3r.blogspot.com/">n00tc0d3r.blogspot.com</a></td></tr><tr><td>设计类似 WhatsApp 的聊天应用</td><td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">highscalability.com</a></td></tr><tr><td>设计类似 Instagram 的图片分享系统</td><td><a href="http://highscalability.com/flickr-architecture">highscalability.com</a><br/><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">highscalability.com</a></td></tr><tr><td>设计 Facebook 的新闻推荐方法</td><td><a href="http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed">quora.com</a><br/><a href="http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed">quora.com</a><br/><a href="http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture">slideshare.net</a></td></tr><tr><td>设计 Facebook 的时间线系统</td><td><a href="https://www.facebook.com/note.php?note_id=10150468255628920">facebook.com</a><br/><a href="http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html">highscalability.com</a></td></tr><tr><td>设计 Facebook 的聊天系统</td><td><a href="http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf">erlang-factory.com</a><br/><a href="https://www.facebook.com/note.php?note_id=14218138919&id=9445547199&index=0">facebook.com</a></td></tr><tr><td>设计类似 Facebook 的图表搜索系统</td><td><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920">facebook.com</a><br/><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920">facebook.com</a><br/><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920">facebook.com</a></td></tr><tr><td>设计类似 CloudFlare 的内容传递网络</td><td><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&context=compsci">cmu.edu</a></td></tr><tr><td>设计类似 Twitter 的热门话题系统</td><td><a href="http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/">michael-noll.com</a><br/><a href="http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/">snikolov .wordpress.com</a></td></tr><tr><td>设计一个随机 ID 生成系统</td><td><a href="https://blog.twitter.com/2010/announcing-snowflake">blog.twitter.com</a><br/><a href="https://github.com/twitter/snowflake/">github.com</a></td></tr><tr><td>返回一定时间段内次数前 k 高的请求</td><td><a href="https://icmi.cs.ucsb.edu/research/tech_reports/reports/2005-23.pdf">ucsb.edu</a><br/><a href="http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf">wpi.edu</a></td></tr><tr><td>设计一个数据源于多个数据中心的服务系统</td><td><a href="http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html">highscalability.com</a></td></tr><tr><td>设计一个多人网络卡牌游戏</td><td><a href="https://web.archive.org/web/20180929181117/http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html">indieflashblog.com</a><br/><a href="http://buildnewgames.com/real-time-multiplayer/">buildnewgames.com</a></td></tr><tr><td>设计一个垃圾回收系统</td><td><a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/">stuffwithstuff.com</a><br/><a href="http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf">washington.edu</a></td></tr><tr><td>添加更多的系统设计问题</td><td><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></td></tr></tbody></table><h3 id="真实架构"><a href="#真实架构" class="headerlink" title="真实架构"></a>真实架构</h3><blockquote><p>关于现实中真实的系统是怎么设计的文章。</p></blockquote><p align="center">  <img src="images/TcUo2fw.png">  <br/>  <strong><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">Source: Twitter timelines at scale</a></strong></p><p><strong>不要专注于以下文章的细节，专注于以下方面：</strong></p><ul><li>发现这些文章中的共同的原则、技术和模式。</li><li>学习每个组件解决哪些问题，什么情况下使用，什么情况下不适用</li><li>复习学过的文章</li></ul><table><thead><tr><th>类型</th><th>系统</th><th>引用</th></tr></thead><tbody><tr><td>Data processing</td><td><strong>MapReduce</strong> - Google的分布式数据处理</td><td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf">research.google.com</a></td></tr><tr><td>Data processing</td><td><strong>Spark</strong> - Databricks 的分布式数据处理</td><td><a href="http://www.slideshare.net/AGrishchenko/apache-spark-architecture">slideshare.net</a></td></tr><tr><td>Data processing</td><td><strong>Storm</strong> - Twitter 的分布式数据处理</td><td><a href="http://www.slideshare.net/previa/storm-16094009">slideshare.net</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>Data store</td><td><strong>Bigtable</strong> - Google 的列式数据库</td><td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf">harvard.edu</a></td></tr><tr><td>Data store</td><td><strong>HBase</strong> - Bigtable 的开源实现</td><td><a href="http://www.slideshare.net/alexbaranau/intro-to-hbase">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Cassandra</strong> - Facebook 的列式数据库</td><td><a href="http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>DynamoDB</strong> - Amazon 的文档数据库</td><td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf">harvard.edu</a></td></tr><tr><td>Data store</td><td><strong>MongoDB</strong> - 文档数据库</td><td><a href="http://www.slideshare.net/mdirolf/introduction-to-mongodb">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Spanner</strong> - Google 的全球分布数据库</td><td><a href="http://research.google.com/archive/spanner-osdi2012.pdf">research.google.com</a></td></tr><tr><td>Data store</td><td><strong>Memcached</strong> - 分布式内存缓存系统</td><td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Redis</strong> - 能够持久化及具有值类型的分布式内存缓存系统</td><td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis">slideshare.net</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>File system</td><td><strong>Google File System (GFS)</strong> - 分布式文件系统</td><td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf">research.google.com</a></td></tr><tr><td>File system</td><td><strong>Hadoop File System (HDFS)</strong> - GFS 的开源实现</td><td><a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html">apache.org</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>Misc</td><td><strong>Chubby</strong> - Google 的分布式系统的低耦合锁服务</td><td><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf">research.google.com</a></td></tr><tr><td>Misc</td><td><strong>Dapper</strong> - 分布式系统跟踪基础设施</td><td><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf">research.google.com</a></td></tr><tr><td>Misc</td><td><strong>Kafka</strong> - LinkedIn 的发布订阅消息系统</td><td><a href="http://www.slideshare.net/mumrah/kafka-talk-tri-hug">slideshare.net</a></td></tr><tr><td>Misc</td><td><strong>Zookeeper</strong> - 集中的基础架构和协调服务</td><td><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper">slideshare.net</a></td></tr><tr><td></td><td>添加更多</td><td><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></td></tr></tbody></table><h3 id="公司的系统架构"><a href="#公司的系统架构" class="headerlink" title="公司的系统架构"></a>公司的系统架构</h3><table><thead><tr><th>Company</th><th>Reference(s)</th></tr></thead><tbody><tr><td>Amazon</td><td><a href="http://highscalability.com/amazon-architecture">Amazon 的架构</a></td></tr><tr><td>Cinchcast</td><td><a href="http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html">每天产生 1500 小时的音频</a></td></tr><tr><td>DataSift</td><td><a href="http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html">每秒实时挖掘 120000 条 tweet</a></td></tr><tr><td>DropBox</td><td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc">我们如何缩放 Dropbox</a></td></tr><tr><td>ESPN</td><td><a href="http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">每秒操作 100000 次</a></td></tr><tr><td>Google</td><td><a href="http://highscalability.com/google-architecture">Google 的架构</a></td></tr><tr><td>Instagram</td><td><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">1400 万用户，达到兆级别的照片存储</a><br/><a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances">是什么在驱动 Instagram</a></td></tr><tr><td>Justin.tv</td><td><a href="http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html">Justin.Tv 的直播广播架构</a></td></tr><tr><td>Facebook</td><td><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf">Facebook 的可扩展 memcached</a><br/><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf">TAO: Facebook 社交图的分布式数据存储</a><br/><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf">Facebook 的图片存储</a></td></tr><tr><td>Flickr</td><td><a href="http://highscalability.com/flickr-architecture">Flickr 的架构</a></td></tr><tr><td>Mailbox</td><td><a href="http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html">在 6 周内从 0 到 100 万用户</a></td></tr><tr><td>Pinterest</td><td><a href="http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html">从零到每月数十亿的浏览量</a><br/><a href="http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html">1800 万访问用户，10 倍增长，12 名员工</a></td></tr><tr><td>Playfish</td><td><a href="http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html">月用户量 5000 万并在不断增长</a></td></tr><tr><td>PlentyOfFish</td><td><a href="http://highscalability.com/plentyoffish-architecture">PlentyOfFish 的架构</a></td></tr><tr><td>Salesforce</td><td><a href="http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">他们每天如何处理 13 亿笔交易</a></td></tr><tr><td>Stack Overflow</td><td><a href="http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html">Stack Overflow 的架构</a></td></tr><tr><td>TripAdvisor</td><td><a href="http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html">40M 访问者，200M 页面浏览量，30TB 数据</a></td></tr><tr><td>Tumblr</td><td><a href="http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html">每月 150 亿的浏览量</a></td></tr><tr><td>Twitter</td><td><a href="http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster">Making Twitter 10000 percent faster</a><br/><a href="http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html">每天使用 MySQL 存储2.5亿条 tweet</a><br/><a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html">150M 活跃用户，300K QPS，22 MB/S 的防火墙</a><br/><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">可扩展时间表</a><br/><a href="https://www.youtube.com/watch?v=5cKTP36HVgI">Twitter 的大小数据</a><br/><a href="https://www.youtube.com/watch?v=z8LU0Cj6BOU">Twitter 的行为：规模超过 1 亿用户</a></td></tr><tr><td>Uber</td><td><a href="http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html">Uber 如何扩展自己的实时化市场</a></td></tr><tr><td>WhatsApp</td><td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">Facebook 用 190 亿美元购买 WhatsApp 的架构</a></td></tr><tr><td>YouTube</td><td><a href="https://www.youtube.com/watch?v=w5WVu624fY8">YouTube 的可扩展性</a><br/><a href="http://highscalability.com/youtube-architecture">YouTube 的架构</a></td></tr></tbody></table><h3 id="公司工程博客"><a href="#公司工程博客" class="headerlink" title="公司工程博客"></a>公司工程博客</h3><blockquote><p>你即将面试的公司的架构</p><p>你面对的问题可能就来自于同样领域</p></blockquote><ul><li><a href="http://nerds.airbnb.com/">Airbnb Engineering</a></li><li><a href="https://developer.atlassian.com/blog/">Atlassian Developers</a></li><li><a href="http://cloudengineering.autodesk.com/blog/">Autodesk Engineering</a></li><li><a href="https://aws.amazon.com/blogs/aws/">AWS Blog</a></li><li><a href="http://word.bitly.com/">Bitly Engineering Blog</a></li><li><a href="https://www.box.com/blog/engineering/">Box Blogs</a></li><li><a href="http://blog.cloudera.com/blog/">Cloudera Developer Blog</a></li><li><a href="https://tech.dropbox.com/">Dropbox Tech Blog</a></li><li><a href="http://engineering.quora.com/">Engineering at Quora</a></li><li><a href="http://www.ebaytechblog.com/">Ebay Tech Blog</a></li><li><a href="https://blog.evernote.com/tech/">Evernote Tech Blog</a></li><li><a href="http://codeascraft.com/">Etsy Code as Craft</a></li><li><a href="https://www.facebook.com/Engineering">Facebook Engineering</a></li><li><a href="http://code.flickr.net/">Flickr Code</a></li><li><a href="http://engineering.foursquare.com/">Foursquare Engineering Blog</a></li><li><a href="https://github.blog/category/engineering">GitHub Engineering Blog</a></li><li><a href="http://googleresearch.blogspot.com/">Google Research Blog</a></li><li><a href="https://engineering.groupon.com/">Groupon Engineering Blog</a></li><li><a href="https://engineering.heroku.com/">Heroku Engineering Blog</a></li><li><a href="http://product.hubspot.com/blog/topic/engineering">Hubspot Engineering Blog</a></li><li><a href="http://highscalability.com/">High Scalability</a></li><li><a href="http://instagram-engineering.tumblr.com/">Instagram Engineering</a></li><li><a href="https://software.intel.com/en-us/blogs/">Intel Software Blog</a></li><li><a href="https://blogs.janestreet.com/category/ocaml/">Jane Street Tech Blog</a></li><li><a href="http://engineering.linkedin.com/blog">LinkedIn Engineering</a></li><li><a href="https://engineering.microsoft.com/">Microsoft Engineering</a></li><li><a href="https://blogs.msdn.microsoft.com/pythonengineering/">Microsoft Python Engineering</a></li><li><a href="http://techblog.netflix.com/">Netflix Tech Blog</a></li><li><a href="https://devblog.paypal.com/category/engineering/">Paypal Developer Blog</a></li><li><a href="http://engineering.pinterest.com/">Pinterest Engineering Blog</a></li><li><a href="https://engineering.quora.com/">Quora Engineering</a></li><li><a href="http://www.redditblog.com/">Reddit Blog</a></li><li><a href="https://developer.salesforce.com/blogs/engineering/">Salesforce Engineering Blog</a></li><li><a href="https://slack.engineering/">Slack Engineering Blog</a></li><li><a href="https://labs.spotify.com/">Spotify Labs</a></li><li><a href="http://www.twilio.com/engineering">Twilio Engineering Blog</a></li><li><a href="https://engineering.twitter.com/">Twitter Engineering</a></li><li><a href="http://eng.uber.com/">Uber Engineering Blog</a></li><li><a href="http://yahooeng.tumblr.com/">Yahoo Engineering Blog</a></li><li><a href="http://engineeringblog.yelp.com/">Yelp Engineering Blog</a></li><li><a href="https://www.zynga.com/blogs/engineering">Zynga Engineering Blog</a></li></ul><h4 id="来源及延伸阅读-15"><a href="#来源及延伸阅读-15" class="headerlink" title="来源及延伸阅读"></a>来源及延伸阅读</h4><ul><li><a href="https://github.com/kilimchoi/engineering-blogs">kilimchoi/engineering-blogs</a></li></ul><h2 id="正在完善中"><a href="#正在完善中" class="headerlink" title="正在完善中"></a>正在完善中</h2><p>有兴趣加入添加一些部分或者帮助完善某些部分吗？<a href="#%E8%B4%A1%E7%8C%AE">加入进来吧</a>！</p><ul><li>使用 MapReduce 进行分布式计算</li><li>一致性哈希</li><li>直接存储器访问（DMA）控制器</li><li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>整个仓库都提供了证书和源</p><p>特别鸣谢：</p><ul><li><a href="http://www.hiredintech.com/system-design/the-system-design-process/">Hired in tech</a></li><li><a href="https://www.amazon.com/dp/0984782850/">Cracking the coding interview</a></li><li><a href="http://highscalability.com/">High scalability</a></li><li><a href="https://github.com/checkcheckzz/system-design-interview">checkcheckzz/system-design-interview</a></li><li><a href="https://github.com/shashank88/system_design">shashank88/system_design</a></li><li><a href="https://github.com/mmcgrana/services-engineering">mmcgrana/services-engineering</a></li><li><a href="https://gist.github.com/vasanthk/485d1c25737e8e72759f">System design cheat sheet</a></li><li><a href="http://dancres.github.io/Pages/">A distributed systems reading list</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview">Cracking the system design interview</a></li></ul><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>欢迎联系我讨论本文的不足、问题或者意见。</p><p>可以在我的 <a href="https://github.com/donnemartin">GitHub 主页</a>上找到我的联系方式</p><h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><pre><code class="hljs">Creative Commons Attribution 4.0 International License (CC BY 4.0)http://creativecommons.org/licenses/by/4.0/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hyperf初探2》】</title>
      <link href="/posts/2502701b.html"/>
      <url>/posts/2502701b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><ul><li><p>Coroutine\MySQL<br>协程MySQL客户端，不推荐使用，推荐使用Swoole\Runtime::enableCoroutine+PDO或Mysqli方式，即一键协程化原生PHP的MySQL客户端</p></li><li><p>hyperf/db-connection组件<br>基于hyperf/pool实现数据库连接池并对模型进行了新的抽象，以它作为桥梁，hyperf才能把数据库组件及事件组件接进来</p></li></ul><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>普通配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> [<br>    <span class="hljs-string">&#x27;default&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_DRIVER&#x27;</span>, <span class="hljs-string">&#x27;mysql&#x27;</span>),<br>        <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_HOST&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>),<br>        <span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_DATABASE&#x27;</span>, <span class="hljs-string">&#x27;hyperf&#x27;</span>),<br>        <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_PORT&#x27;</span>, <span class="hljs-number">3306</span>),<br>        <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_USERNAME&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>),<br>        <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_PASSWORD&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>        ...<br>        ]<br>]   <br></code></pre></td></tr></table></figure><p>读写分离配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> [<br><span class="hljs-string">&#x27;dafault&#x27;</span>=&gt;[<br><span class="hljs-string">&#x27;driver&#x27;</span>=&gt;<span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_DRIVER&#x27;</span>,<span class="hljs-string">&#x27;mysql&#x27;</span>),<br><span class="hljs-string">&#x27;read&#x27;</span>=&gt;[<br><span class="hljs-string">&#x27;host&#x27;</span>=&gt;[<span class="hljs-string">&#x27;192.168.1.1&#x27;</span>],<br>],<br><span class="hljs-string">&#x27;write&#x27;</span>=&gt;[<br><span class="hljs-string">&#x27;host&#x27;</span>=&gt;[<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>],<br>],<br><span class="hljs-string">&#x27;sticky&#x27;</span>=&gt;<span class="hljs-literal">true</span>,<br><span class="hljs-string">&#x27;database&#x27;</span>=&gt;<span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&quot;DB_DATABASE&quot;</span>,<span class="hljs-string">&#x27;hyperf&#x27;</span>),<br><span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&quot;DB_PORT&quot;</span>,<span class="hljs-string">&#x27;3306&#x27;</span>),<br>....<br>]<br>]<br></code></pre></td></tr></table></figure><p>env文件配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs env">DB_DRIVER=mysql<br>DB_HOST=nj-cdb-4sabbghb.sql.xxx.com<br>DB_PORT=6xxx6<br>DB_DATABASE=xxx-dev<br>DB_USERNAME=xxx<br>DB_PASSWORD=xxx@2022<br>DB_CHARSET=utf8mb4<br>DB_COLLATION=utf8mb4_unicode_ci<br>DB_PREFIX=<br></code></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php bin/hyperf.php gen:model 表名<br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>Query查询类<br>方式同laravel</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="配置文件路由"><a href="#配置文件路由" class="headerlink" title="配置文件路由"></a>配置文件路由</h3><ol><li>通过闭包定义路由<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Router</span>\<span class="hljs-title">Router</span>;<br><br><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/hello-hyperf&#x27;</span>, function () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello Hyperf.&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>定义标准路由<br>标准路由: 控制器(Controller) 和 操作(Action) 来处理的路由<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Router</span>\<span class="hljs-title">Router</span>;<br><br><span class="hljs-comment">// 下面三种方式的任意一种都可以达到同样的效果</span><br><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/hello-hyperf&#x27;</span>, <span class="hljs-string">&#x27;App\Controller\IndexController::hello&#x27;</span>);<br><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/hello-hyperf&#x27;</span>, <span class="hljs-string">&#x27;App\Controller\IndexController@hello&#x27;</span>);<br><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/hello-hyperf&#x27;</span>, [<span class="hljs-title class_">App\Controller\IndexController</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]);<br></code></pre></td></tr></table></figure></li><li>路由组<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">addGroup</span>(<span class="hljs-string">&#x27;/user/&#x27;</span>,function ()&#123;<br>    <span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-string">&#x27;App\Controller\UserController@index&#x27;</span>);<br>    <span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;store&#x27;</span>,<span class="hljs-string">&#x27;App\Controller\UserController@store&#x27;</span>);<br>    <span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;update&#x27;</span>,<span class="hljs-string">&#x27;App\Controller\UserController@update&#x27;</span>);<br>    <span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-string">&#x27;App\Controller\UserController@delete&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="注解路由"><a href="#注解路由" class="headerlink" title="注解路由"></a>注解路由</h3><p><a href="https://hyperf.wiki/2.2/#/zh-cn/annotation">注解</a> 路由<br>在任意类上通过定义 @Controller 或 @AutoController 注解来完成一个路由的定义</p><h4 id="AutoController-注解"><a href="#AutoController-注解" class="headerlink" title="@AutoController 注解"></a>@AutoController 注解</h4><blockquote><p>使用 @AutoController 注解时需 use Hyperf\HttpServer\Annotation\AutoController; 命名空间；</p></blockquote><table><thead><tr><th>控制器</th><th>注解</th><th>访问路由</th></tr></thead><tbody><tr><td>MyDataController</td><td>@AutoController()</td><td>/my_data/index</td></tr><tr><td>MydataController</td><td>@AutoController()</td><td>/mydata/index</td></tr><tr><td>MyDataController</td><td>@AutoController(prefix=”/data”)</td><td>/data/index</td></tr></tbody></table><h4 id="Controller-注解"><a href="#Controller-注解" class="headerlink" title="@Controller 注解"></a>@Controller 注解</h4><p>@Controller 为满足更细致的路由定义需求而存在，使用 @Controller 注解用于表明当前类为一个 Controller 类，同时需配合 @RequestMapping 注解来对请求方法和请求路径进行更详细的定义。<br>我们也提供了多种快速便捷的 Mapping 注解，如 @GetMapping、@PostMapping、@PutMapping、@PatchMapping、@DeleteMapping 5 种便捷的注解用于表明允许不同的请求方法。</p><blockquote><p>使用 @Controller 注解时需 use Hyperf\HttpServer\Annotation\Controller; 命名空间；<br>使用 @RequestMapping 注解时需 use Hyperf\HttpServer\Annotation\RequestMapping; 命名空间；<br>使用 @GetMapping 注解时需 use Hyperf\HttpServer\Annotation\GetMapping; 命名空间；<br>使用 @PostMapping 注解时需 use Hyperf\HttpServer\Annotation\PostMapping; 命名空间；<br>使用 @PutMapping 注解时需 use Hyperf\HttpServer\Annotation\PutMapping; 命名空间；<br>使用 @PatchMapping 注解时需 use Hyperf\HttpServer\Annotation\PatchMapping; 命名空间；<br>使用 @DeleteMapping 注解时需 use Hyperf\HttpServer\Annotation\DeleteMapping; 命名空间；</p></blockquote><p>注解参数<br><strong>@Controller</strong> 和 <strong>@AutoController</strong> 都提供了 <strong>prefix</strong> 和 <strong>server</strong> 两个参数。<br><strong>prefix</strong> 表示该 Controller 下的所有方法路由的前缀，默认为类名的小写，如 <strong>UserController</strong> 则 <strong>prefix</strong> 默认为 <strong>user</strong>，如类内某一方法的 <strong>path</strong> 为 <strong>index</strong>，则最终路由为 <strong>/user/index</strong>。<br>需要注意的是 <strong>prefix</strong> 并非一直有效，当类内的方法的 <strong>path</strong> 以 / 开头时，则表明路径从 URI 头部开始定义，也就意味着会忽略 <strong>prefix</strong> 的值。<br><strong>server</strong> 表示该路由是定义在哪个 <strong>Server</strong> 之上的，由于 Hyperf 支持同时启动多个 <strong>Server</strong>，也就意味着有可能会同时存在多个 <strong>HTTP Server</strong>，则在定义路由是可以通过 <strong>server</strong> 参数来进行区分这个路由是为了哪个 <strong>Server</strong> 定义的，默认为 <strong>http</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Service</span>\<span class="hljs-title">UserService</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Contract</span>\<span class="hljs-title">RequestInterface</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Controller</span>()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractController</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$userService</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">UserService <span class="hljs-variable">$userService</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;userService = <span class="hljs-variable">$userService</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@RequestMapping</span>(path=&quot;detail&quot;, methods=&quot;get&quot;)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> RequestInterface $request</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOne</span>(<span class="hljs-params">RequestInterface <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;userService-&gt;<span class="hljs-title function_ invoke__">findUser</span>(<span class="hljs-variable">$name</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Router</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/user/&#123;id&#125;&#x27;</span>, <span class="hljs-string">&#x27;App\Controller\UserController::info&#x27;</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">info</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">find</span>(<span class="hljs-variable">$id</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">toArray</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="必填参数"><a href="#必填参数" class="headerlink" title="必填参数"></a>必填参数</h4><p>我们可以对 $uri 进行一些参数定义，通过 {} 来声明参数，如 /user/{id} 则声明了 id 值为一个必填参数。</p><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>有时候您可能会希望这个参数是可选的，您可以通过 [] 来声明中括号内的参数为一个可选参数，如 /user/[{id}]。</p><h4 id="获取路由信息"><a href="#获取路由信息" class="headerlink" title="获取路由信息"></a>获取路由信息</h4><p>如果安装了 devtool 组件，可使用 php bin/hyperf.php describe:routes 命令获取路由列表信息， 并且提供 path 可选项，方便获取单个路由信息，对应的命令 php bin/hyperf.php describe:routes –path=/foo/bar。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>洋葱模型<br>中间件主要用于编织从 <strong>请求(Request)</strong> 到 <strong>响应(Response)</strong> 的整个流程</p><h3 id="生成中间件"><a href="#生成中间件" class="headerlink" title="生成中间件"></a>生成中间件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php ./bin/hyperf.php gen:middleware Auth/FooMiddleware<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Middleware</span>\<span class="hljs-title class_">Auth</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Contract</span>\<span class="hljs-title">RequestInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Contract</span>\<span class="hljs-title">ResponseInterface</span> <span class="hljs-keyword">as</span> <span class="hljs-title">HttpResponse</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Container</span>\<span class="hljs-title">ContainerInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ResponseInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ServerRequestInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Server</span>\<span class="hljs-title">MiddlewareInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Server</span>\<span class="hljs-title">RequestHandlerInterface</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FooMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MiddlewareInterface</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> ContainerInterface</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$container</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> RequestInterface</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$request</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> HttpResponse</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$response</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">ContainerInterface <span class="hljs-variable">$container</span>, HttpResponse <span class="hljs-variable">$response</span>, RequestInterface <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;container = <span class="hljs-variable">$container</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;response = <span class="hljs-variable">$response</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;request = <span class="hljs-variable">$request</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params">ServerRequestInterface <span class="hljs-variable">$request</span>, RequestHandlerInterface <span class="hljs-variable">$handler</span></span>): <span class="hljs-title">ResponseInterface</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 根据具体业务判断逻辑走向，这里假设用户携带的token有效</span><br>        <span class="hljs-variable">$isValidToken</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isValidToken</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$handler</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<span class="hljs-variable">$request</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;response-&gt;<span class="hljs-title function_ invoke__">json</span>(<br>            [<br>                <span class="hljs-string">&#x27;code&#x27;</span> =&gt; -<span class="hljs-number">1</span>,<br>                <span class="hljs-string">&#x27;data&#x27;</span> =&gt; [<br>                    <span class="hljs-string">&#x27;error&#x27;</span> =&gt; <span class="hljs-string">&#x27;中间件验证token无效，阻止继续向下执行&#x27;</span>,<br>                ],<br>            ]<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p>全局中间件只可通过配置文件的方式来配置，配置文件位于 <strong>config/autoload/middlewares.php</strong> ，配置如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">return</span> [<br>    <span class="hljs-comment">// http 对应 config/autoload/server.php 内每个 server 的 name 属性对应的值，该配置仅应用在该 Server 中</span><br>    <span class="hljs-string">&#x27;http&#x27;</span> =&gt; [<br>        <span class="hljs-comment">// 数组内配置您的全局中间件，顺序根据该数组的顺序</span><br>        <span class="hljs-title class_">YourMiddleware</span>::<span class="hljs-variable language_">class</span><br>    ],<br>];<br></code></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><blockquote><p>使用 @Middleware 注解时需 use Hyperf\HttpServer\Annotation\Middleware; 命名空间；<br>使用 @Middlewares 注解时需 use Hyperf\HttpServer\Annotation\Middlewares; 命名空间；</p></blockquote><p>定义单个中间件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Middleware</span>\<span class="hljs-title">FooMiddleware</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Annotation</span>\<span class="hljs-title">AutoController</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Annotation</span>\<span class="hljs-title">Middleware</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@AutoController</span>()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Middleware</span>(FooMiddleware::class)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello Hyperf.&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义多个中间件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Middleware</span>\<span class="hljs-title">BarMiddleware</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Middleware</span>\<span class="hljs-title">FooMiddleware</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Annotation</span>\<span class="hljs-title">AutoController</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Annotation</span>\<span class="hljs-title">Middleware</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">HttpServer</span>\<span class="hljs-title">Annotation</span>\<span class="hljs-title">Middlewares</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@AutoController</span>()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Middlewares</span>(&#123;</span><br><span class="hljs-comment"> *     <span class="hljs-doctag">@Middleware</span>(FooMiddleware::class),</span><br><span class="hljs-comment"> *     <span class="hljs-doctag">@Middleware</span>(BarMiddleware::class)</span><br><span class="hljs-comment"> * &#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello Hyperf.&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h3><ul><li>跨域中间件<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Middleware</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Hyperf</span>\<span class="hljs-title">Utils</span>\<span class="hljs-title">Context</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ResponseInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ServerRequestInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Server</span>\<span class="hljs-title">MiddlewareInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Server</span>\<span class="hljs-title">RequestHandlerInterface</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MiddlewareInterface</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params">ServerRequestInterface <span class="hljs-variable">$request</span>, RequestHandlerInterface <span class="hljs-variable">$handler</span></span>): <span class="hljs-title">ResponseInterface</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-title class_">Context</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-title class_">ResponseInterface</span>::<span class="hljs-variable language_">class</span>);<br>        <span class="hljs-variable">$response</span> = <span class="hljs-variable">$response</span>-&gt;<span class="hljs-title function_ invoke__">withHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">withHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>            <span class="hljs-comment">// Headers 可以根据实际情况进行改写。</span><br>            -&gt;<span class="hljs-title function_ invoke__">withHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;DNT,Keep-Alive,User-Agent,Cache-Control,Content-Type,Authorization&#x27;</span>);<br><br>        <span class="hljs-title class_">Context</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-title class_">ResponseInterface</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-variable">$response</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">getMethod</span>() == <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$handler</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<span class="hljs-variable">$request</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="IOC控制翻转-DI依赖注入"><a href="#IOC控制翻转-DI依赖注入" class="headerlink" title="IOC控制翻转  DI依赖注入"></a>IOC控制翻转  DI依赖注入</h3><h4 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h4><ol><li>构造方法注入</li><li>通过Inject注解注入<h4 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h4>简单对象注入<br>抽象对象注入<br>工厂对象注入</li></ol><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><strong>面向切面编程</strong><br>通过 <strong>切面(Aspect)</strong> 介入到任意类的任意方法的执行流程中去，从而改变或加强原方法的功能</p><p>基于DI实现 使用hfperf/di<br>通过DI创建的对象才能使AOP生效</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>参数校验、日志、无侵入埋点、安全统计、性能统计、事务处理、异常处理、缓存、无侵入监控、资源池、连接池管理</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、app下新建文件夹Aspect<br>2、新建indexAspect.php<br>定义要切入的类</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Hyperf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Hyperf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hyperf初探《1、安装》】</title>
      <link href="/posts/660ecc6d.html"/>
      <url>/posts/660ecc6d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hyperf初探"><a href="#Hyperf初探" class="headerlink" title="Hyperf初探"></a>Hyperf初探</h1><h2 id="官网及文档"><a href="#官网及文档" class="headerlink" title="官网及文档"></a>官网及文档</h2><ul><li>官网 <a href="https://hyperf.io/">https://hyperf.io</a></li><li>文档 <a href="https://hyperf.wiki/">https://hyperf.wiki</a></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h3><ol><li>通过 Composer 创建项目</li></ol><p>基于 Swoole 驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer create-project hyperf/hyperf-skeleton<br></code></pre></td></tr></table></figure><p>基于 Swow 驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer create-project hyperf/swow-skeleton<br></code></pre></td></tr></table></figure><ol start="2"><li>Docker 下开发</li></ol><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>由于mac本机docker环境部署laravel环境，暂采用mac本地环境部署hyperf</p><ul><li>PHP &gt;= 7.4 and &lt;= 8.0</li><li>以下任一网络引擎<ul><li>Swoole PHP 扩展 &gt;= 4.5，并关闭了 Short Name</li><li>Swow PHP 扩展 (Beta)</li></ul></li><li>JSON PHP 扩展</li><li>Pcntl PHP 扩展</li><li>OpenSSL PHP 扩展（如需要使用到 HTTPS）</li><li>PDO PHP 扩展 （如需要使用到 MySQL 客户端）</li><li>Redis PHP 扩展 （如需要使用到 Redis 客户端）</li><li>Protobuf PHP 扩展 （如需要使用到 gRPC 服务端或客户端）</li></ul><p>扩展编译安装<br><a href="../posts/3fc5bd43.html">点击这里查看这篇文章</a></p><h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ERROR] Swoole short function names must be disabled before the server starts, please set swoole.use_shortname = &#x27;Off&#x27; in your php.ini.<br></code></pre></td></tr></table></figure><p>您需要在您的 php.ini 配置文件增加 <strong>swoole.use_shortname = ‘Off’</strong> 配置项</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Hyperf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Hyperf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mac编译安装PHP扩展】</title>
      <link href="/posts/3fc5bd43.html"/>
      <url>/posts/3fc5bd43.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mac安装PHP扩展"><a href="#Mac安装PHP扩展" class="headerlink" title="Mac安装PHP扩展"></a>Mac安装PHP扩展</h1><h2 id="查看php-ini位置"><a href="#查看php-ini位置" class="headerlink" title="查看php.ini位置"></a>查看php.ini位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php --ini<br></code></pre></td></tr></table></figure><h2 id="查看php安装位置"><a href="#查看php安装位置" class="headerlink" title="查看php安装位置"></a>查看php安装位置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="编译安装扩展"><a href="#编译安装扩展" class="headerlink" title="编译安装扩展"></a>编译安装扩展</h2><h3 id="swoole"><a href="#swoole" class="headerlink" title="swoole"></a>swoole</h3><h4 id="下载编译安装"><a href="#下载编译安装" class="headerlink" title="下载编译安装"></a>下载编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/opt/php@7.4/include/php/ext <br>wget http://pecl.php.net/get/swoole-4.5.3.tgz<br>tar -zxvf swoole-4.5.3.tgz<br>cd swoole-4.5.3<br>/usr/local/opt/php@7.4/bin/phpize<br>./configure --with-php-config=/usr/local/opt/php@7.4/bin/php-config<br>make<br>make install<br></code></pre></td></tr></table></figure><h4 id="在php-ini加上-extension-swoole"><a href="#在php-ini加上-extension-swoole" class="headerlink" title="在php.ini加上 extension=swoole"></a>在php.ini加上 extension=swoole</h4><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="下载编译安装-1"><a href="#下载编译安装-1" class="headerlink" title="下载编译安装"></a>下载编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/nicolasff/phpredis.git<br>cd phpredis<br>/usr/local/opt/php@7.4/bin/phpize<br>./configure --with-php-config=/usr/local/opt/php@7.4/bin/php-config<br>make<br>make install<br></code></pre></td></tr></table></figure><h4 id="在php-ini加上-extension-redis-so"><a href="#在php-ini加上-extension-redis-so" class="headerlink" title="在php.ini加上 extension=redis.so"></a>在php.ini加上 extension=redis.so</h4><h2 id="重启php"><a href="#重启php" class="headerlink" title="重启php"></a>重启php</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew services list<br>brew services restart php@7.4<br></code></pre></td></tr></table></figure><h2 id="查看扩展"><a href="#查看扩展" class="headerlink" title="查看扩展"></a>查看扩展</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php -m<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> PHP </category>
          
          <category> swoole </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> swoole </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git不要只会pull和push，试试这5条提高效率的命令】</title>
      <link href="/posts/946f16e6.html"/>
      <url>/posts/946f16e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git不要只会pull和push，试试这5条提高效率的命令"><a href="#Git不要只会pull和push，试试这5条提高效率的命令" class="headerlink" title="Git不要只会pull和push，试试这5条提高效率的命令"></a>Git不要只会pull和push，试试这5条提高效率的命令</h2><h3 id="转载链接：出来吧皮卡丘"><a href="#转载链接：出来吧皮卡丘" class="headerlink" title="转载链接：出来吧皮卡丘"></a>转载链接：<a href="https://juejin.cn/post/7071780876501123085">出来吧皮卡丘</a></h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>使用 Git 作为代码版本管理，早已是现在开发工程师必备的技能。可大多数工程师还是只会最基本的保存、拉取、推送，遇到一些commit管理的问题就束手无策，或者用一些不优雅的方式解决。<br>本文分享我在开发工作中实践过的实用命令。这些都能够大大提高工作效率，还能解决不少疑难场景。下面会介绍命令，列出应用场景，手摸手教学使用，让同学们看完即学会。</p><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><ul><li><p><a href="https://git-scm.com/docs/git-stash">官方文档</a></p></li><li><p><a href="https://www.bookstack.cn/read/git-tutorial/docs-commands-git-stash.md">git 教程</a></p></li></ul><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><blockquote><p>官方解释：当您想记录工作目录和索引的当前状态，但又想返回一个干净的工作目录时，请使用git stash。该命令将保存本地修改，并恢复工作目录以匹配头部提交。</p></blockquote><p>stash 命令能够将还未 commit 的代码存起来，让你的工作目录变得干净。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>我猜你心里一定在想：为什么要变干净？<br>应用场景：某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，然后你就会看到以下报错：</p><p>因为当前有文件更改了，需要提交commit保持工作区干净才能切分支。由于情况紧急，你只有急忙 commit 上去，commit 信息也随便写了个“暂存代码”，于是该分支提交记录就留了一条黑历史…(真人真事，看过这种提交)</p><h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><p>如果你学会 stash，就不用那么狼狈了。你只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash<br></code></pre></td></tr></table></figure><p>就这么简单，代码就被存起来了。<br>当你修复完线上问题，切回 feature 分支，想恢复代码也只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash apply<br><br></code></pre></td></tr></table></figure><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">保存当前未commit的代码</span><br>git stash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存当前未commit的代码并添加备注</span><br>git stash save &quot;备注的内容&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出stash的所有记录</span><br>git stash list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除stash的所有记录</span><br>git stash clear<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用最近一次的stash</span><br>git stash apply<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用最近一次的stash，随后删除该记录</span><br>git stash pop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除最近的一次stash</span><br>git stash drop<br></code></pre></td></tr></table></figure><p>当有多条 stash，可以指定操作stash，首先使用stash list 列出所有记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git stash list</span><br>stash@&#123;0&#125;: WIP on ...<br>stash@&#123;1&#125;: WIP on ...<br>stash@&#123;2&#125;: On ...<br></code></pre></td></tr></table></figure><p>应用第二条记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git stash apply stash@&#123;1&#125;</span><br><br></code></pre></td></tr></table></figure><p>pop，drop 同理。</p><h4 id="vscode-集成"><a href="#vscode-集成" class="headerlink" title="vscode 集成"></a>vscode 集成</h4><p>stash 代码</p><p>填写备注内容，也可以不填直接Enter</p><p>在STASHES菜单中可以看到保存的stash</p><p>先点击stash记录旁的小箭头，再点击 apply 或者 pop 都可恢复 stash</p><h3 id="reset-–soft"><a href="#reset-–soft" class="headerlink" title="reset –soft"></a>reset –soft</h3><p>官方文档</p><ul><li><a href="https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md">git 教程</a><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4></li></ul><blockquote><p>完全不接触索引文件或工作树（但会像所有模式一样，将头部重置为）。这使您的所有更改的文件更改为“要提交的更改”。</p></blockquote><p>回退你已提交的 commit，并将 commit 的修改内容放回到暂存区。<br>一般我们在使用 reset 命令时，<em><strong>git reset –hard</strong></em> 会被提及的比较多，它能让 commit 记录强制回溯到某一个节点。而 <em><strong>git reset –soft</strong></em> 的作用正如其名，***–soft*** (柔软的) 除了回溯节点外，还会保留节点的修改内容。</p><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>回溯节点，为什么要保留修改内容？<br>应用场景1：有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。<br>应用场景2：规范些的团队，一般对于 commit 的内容要求职责明确，颗粒度要细，便于后续出现问题排查。本来属于两块不同功能的修改，一起 commit 上去，这种就属于不规范。这次恰好又手滑了，一次性 commit 上去。</p><h4 id="命令使用-1"><a href="#命令使用-1" class="headerlink" title="命令使用"></a>命令使用</h4><p>学会 <em><strong>reset –soft</strong></em> 之后，你只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复最近一次 commit</span><br>git reset --soft HEAD^<br></code></pre></td></tr></table></figure><p><strong>reset –soft</strong> 相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录。<br>以上说的是还未 push 的commit。对于已经 push 的 commit，也可以使用该命令，不过再次 push 时，由于远程分支和本地分支有差异，需要强制推送 <strong>git push -f</strong> 来覆盖被 reset 的 commit。<br>还有一点需要注意，在 <strong>reset –soft</strong> 指定 commit 号时，会将该 commit 到最近一次 commit 的所有修改内容全部恢复，而不是只针对该 commit。<br>举个栗子：<br>commit 记录有 c、b、a。</p><p>reset 到 a。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --soft 1a900ac29eba73ce817bf959f82ffcb0bfa38f75<br><br></code></pre></td></tr></table></figure><p>此时的 HEAD 到了 a，而 b、c 的修改内容都回到了暂存区。</p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p><a href="https://git-scm.com/docs/git-cherry-pick">官方文档</a><br><a href="http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">git cherry-pick 教程</a><br>描述</p><blockquote><p>给定一个或多个现有提交，应用每个提交引入的更改，为每个提交记录一个新的提交。这需要您的工作树清洁（没有从头提交的修改）。</p></blockquote><p>将已经提交的 commit，复制出新的 commit 应用到分支里</p><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><p>commit 都提交了，为什么还要复制新的出来？<br>应用场景1：有时候版本的一些优化需求开发到一半，可能其中某一个开发完的需求要临时上，或者某些原因导致待开发的需求卡住了已开发完成的需求上线。这时候就需要把 commit 抽出来，单独处理。<br>应用场景2：有时候开发分支中的代码记录被污染了，导致开发分支合到线上分支有问题，这时就需要拉一条干净的开发分支，再从旧的开发分支中，把 commit 复制到新分支。</p><h4 id="命令使用-2"><a href="#命令使用-2" class="headerlink" title="命令使用"></a>命令使用</h4><h5 id="复制单个"><a href="#复制单个" class="headerlink" title="复制单个"></a>复制单个</h5><p>现在有一条feature分支，commit 记录如下：</p><p>需要把 b 复制到另一个分支，首先把 commitHash 复制下来，然后切到 master 分支。</p><p>当前 master 最新的记录是 a，使用 cherry-pick 把 b 应用到当前分支。</p><p>完成后看下最新的 log，b 已经应用到 master，作为最新的 commit 了。可以看到 commitHash 和之前的不一样，但是提交时间还是保留之前的。</p><h5 id="复制多个"><a href="#复制多个" class="headerlink" title="复制多个"></a>复制多个</h5><p>以上是单个 commit 的复制，下面再来看看 <strong>cherry-pick</strong> 多个 commit 要如何操作。</p><ul><li>一次转移多个提交：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick commit1 commit2<br><br></code></pre></td></tr></table></figure><p>上面的命令将 commit1 和 commit2 两个提交应用到当前分支。</p><ul><li>多个连续的commit，也可区间复制：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick commit1^..commit2<br><br></code></pre></td></tr></table></figure><p>上面的命令将 commit1 到 commit2 这个区间的 commit 都应用到当前分支（包含commit1、commit2），commit1 是最早的提交。</p><h4 id="cherry-pick-代码冲突"><a href="#cherry-pick-代码冲突" class="headerlink" title="cherry-pick 代码冲突"></a>cherry-pick 代码冲突</h4><p>在 cherry-pick 多个commit时，可能会遇到代码冲突，这时 cherry-pick 会停下来，让用户决定如何继续操作。下面看看怎么解决这种场景。</p><p>还是 feature 分支，现在需要把 c、d、e 都复制到 master 分支上。先把起点c和终点e的 commitHash 记下来。</p><p>切到 master 分支，使用区间的 cherry-pick。可以看到 c 被成功复制，当进行到 d 时，发现代码冲突，cherry-pick 中断了。这时需要解决代码冲突，重新提交到暂存区。</p><p>然后使用 cherry-pick –continue 让 cherry-pick 继续进行下去。最后 e 也被复制进来，整个流程就完成了。<br>以上是完整的流程，但有时候可能需要在代码冲突后，放弃或者退出流程：</p><ul><li>放弃 <strong>cherry-pick</strong>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gits cherry-pick --abort<br><br></code></pre></td></tr></table></figure><p>回到操作前的样子，就像什么都没发生过。</p><ul><li>退出 <strong>cherry-pick</strong>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick --quit<br><br></code></pre></td></tr></table></figure><p>不回到操作前的样子。即保留已经 cherry-pick 成功的 commit，并退出 cherry-pick 流程。</p><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><ul><li><a href="https://git-scm.com/docs/git-revert">官方文档</a><br>描述</li></ul><blockquote><p>给定一个或多个现有提交，恢复相关提交引入的更改，并记录一些这些更改的新提交。这就要求你的工作树是干净的（没有来自头部的修改）。</p></blockquote><p>将现有的提交还原，恢复提交的内容，并生成一条还原记录。</p><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><p>应用场景：有一天测试突然跟你说，你开发上线的功能有问题，需要马上撤回，否则会影响到系统使用。这时可能会想到用 reset 回退，可是你看了看分支上最新的提交还有其他同事的代码，用 reset 会把这部分代码也撤回了。由于情况紧急，又想不到好方法，还是任性的使用 reset，然后再让同事把他的代码合一遍（同事听到想打人），于是你的技术形象在同事眼里一落千丈。</p><h4 id="命令使用-3"><a href="#命令使用-3" class="headerlink" title="命令使用"></a>命令使用</h4><h5 id="revert-普通提交"><a href="#revert-普通提交" class="headerlink" title="revert 普通提交"></a>revert 普通提交</h5><p>学会 revert 之后，立马就可以拯救这种尴尬的情况。<br>现在 master 记录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git revert 21dcd937fe555f58841b17466a99118deb489212<br><br></code></pre></td></tr></table></figure><p>revert 掉自己提交的 commit。</p><p>因为 revert 会生成一条新的提交记录，这时会让你编辑提交信息，编辑完后 :wq 保存退出就好了。</p><p>再来看下最新的 log，生成了一条 revert 记录，虽然自己之前的提交记录还是会保留着，但你修改的代码内容已经被撤回了。</p><h6 id="revert-合并提交"><a href="#revert-合并提交" class="headerlink" title="revert 合并提交"></a>revert 合并提交</h6><p>在 git 的 commit 记录里，还有一种类型是合并提交，想要 revert 合并提交，使用上会有些不一样。</p><p>现在的 master 分支里多了条合并提交。</p><p>使用刚刚同样的 revert 方法，会发现命令行报错了。<br>为什么会这样？在官方文档中有解释。</p><p>通常无法 revert 合并，因为您不知道合并的哪一侧应被视为主线。此选项指定主线的父编号（从1开始），并允许 revert 反转相对于指定父编号的更改</p><p>我的理解是因为合并提交是两条分支的交集节点，而 git 不知道需要撤销的哪一条分支，需要添加参数 -m 指定主线分支，保留主线分支的代码，另一条则被撤销。<br>-m 后面要跟一个 parent number 标识出”主线”，一般使用 1 保留主分支代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git revert -m 1 &lt;commitHash&gt;<br><br></code></pre></td></tr></table></figure><h5 id="revert-合并提交后，再次合并分支会失效"><a href="#revert-合并提交后，再次合并分支会失效" class="headerlink" title="revert 合并提交后，再次合并分支会失效"></a>revert 合并提交后，再次合并分支会失效</h5><p>还是上面的场景，在 master 分支 revert 合并提交后，然后切到 feature 分支修复好 bug，再合并到 master 分支时，会发现之前被 revert 的修改内容没有重新合并进来。<br>因为使用 revert 后， feature 分支的 commit 还是会保留在 master 分支的记录中，当你再次合并进去时，git 判断有相同的 commitHash，就忽略了相关 commit 修改的内容。<br>这时就需要 revert 掉之前 revert 的合并提交，有点拗口，接下来看操作吧。</p><p>现在 master 的记录是这样的。</p><p>再次使用 revert，之前被 revert 的修改内容就又回来了。</p><h4 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h4><ul><li><a href="https://git-scm.com/docs/git-reflog">官方文档</a><br>描述</li></ul><blockquote><p>此命令管理重录中记录的信息。</p></blockquote><p>如果说 <strong>reset –soft</strong> 是后悔药，那 reflog 就是强力后悔药。它记录了所有的 commit 操作记录，便于错误操作后找回记录。<br>应用场景<br>应用场景：某天你眼花，发现自己在其他人分支提交了代码还推到远程分支，这时因为分支只有你的最新提交，就想着使用 <strong>reset –hard</strong>，结果紧张不小心记错了 commitHash，reset 过头，把同事的 commit 搞没了。没办法，<strong>reset –hard</strong> 是强制回退的，找不到 commitHash 了，只能让同事从本地分支再推一次（同事瞬间拳头就硬了，怎么又是你）。于是，你的技术形象又一落千丈。<br>命令使用</p><p>分支记录如上，想要 reset 到 b。</p><p>误操作 reset 过头，b 没了，最新的只剩下 a。</p><p>这时用 <strong>git reflog</strong> 查看历史记录，把错误提交的那次 commitHash 记下。</p><p>再次 reset 回去，就会发现 b 回来了。</p><h4 id="设置-Git-短命令"><a href="#设置-Git-短命令" class="headerlink" title="设置 Git 短命令"></a>设置 Git 短命令</h4><p>对我这种喜欢敲命令而不用图形化工具的爱好者来说，设置短命令可以很好的提高效率。下面介绍两种设置短命令的方式。</p><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global alias.ps push<br><br></code></pre></td></tr></table></figure><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>打开全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.gitconfig<br><br></code></pre></td></tr></table></figure><p>写入内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[alias]<br>co = checkout<br>ps = push<br>pl = pull<br>mer = merge --no-ff<br>cp = cherry-pick<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等同于 git cherry-pick &lt;commitHash&gt;</span><br>git cp &lt;commitHash&gt;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要分享了5个在开发中实用的 Git 命令和设置短命令的方式。</p><ul><li><strong>stash</strong>：存储临时代码。</li><li><strong>reset –soft</strong>：软回溯，回退 commit 的同时保留修改内容。</li><li><strong>cherry-pick</strong>：复制 commit。</li><li><strong>revert</strong>：撤销 commit 的修改内容。</li><li><strong>reflog</strong>：记录了 commit 的历史操作。</li></ul><p>文中列举的应用场景有部分不太恰当，只是想便于同学们理解，最重要的是要理解命令的作用是什么，活学活用才能发挥最大功效。<br>如果你也有一些实用的 Git 命令也欢迎在评论区分享~</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JAVA】环境配置</title>
      <link href="/posts/817a1f94.html"/>
      <url>/posts/817a1f94.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前期准备</p></blockquote><h2 id="1、Jdk安装"><a href="#1、Jdk安装" class="headerlink" title="1、Jdk安装"></a>1、Jdk安装</h2><h3 id="1-下载合适版本："><a href="#1-下载合适版本：" class="headerlink" title="1.下载合适版本："></a>1.下载合适版本：</h3><p>Java JDK下载地址：<br><a href="https://www.oracle.com/java/technologies/downloads/">Java JDK下载地址</a><br>需要下载macOS下的dmg的格式的，根据Mac芯片的不同下载不同的版本；inter芯片的下载X64版本，M芯片下载Arm64版本</p><h3 id="2-点击安装"><a href="#2-点击安装" class="headerlink" title="2.点击安装"></a>2.点击安装</h3><p>双击下载好的dmg<br>通过JDK官方下载地址中的dmg文件进行安装后，如果想知道具体安装到哪个目录，可以执行下面的命令进行查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/libexec/java_home -V<br></code></pre></td></tr></table></figure><p>效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Matching Java Virtual Machines (2):<br>    1.8.331.09 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home<br>    1.8.0_331 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_331.jdk/Contents/Home<br>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home<br></code></pre></td></tr></table></figure><h3 id="3、环境变量配置"><a href="#3、环境变量配置" class="headerlink" title="3、环境变量配置"></a>3、环境变量配置</h3><p>编辑***.bash_profile*** 文件，这是 Mac 配置各种环境变量的地方</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.bash_profile<br></code></pre></td></tr></table></figure><p>编辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">JAVA_HOME=<span class="hljs-regexp">/Library/</span>Java<span class="hljs-regexp">/JavaVirtualMachines/</span>jdk1.<span class="hljs-number">8.0</span>_331.jdk<span class="hljs-regexp">/Contents/</span>Home<br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>tools.jar:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib/</span>dt.jar:.<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:.<br>export JAVA_HOME<br>export PATH<br>export CLASSPATH<br></code></pre></td></tr></table></figure><p>配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source .bash_profile<br></code></pre></td></tr></table></figure><p>检查下 Java 环境是否生效，终端输入命令：java -version</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p>显示</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>version <span class="hljs-string">&quot;1.8.0_331&quot;</span><br><span class="hljs-keyword">Java(TM) </span>SE Runtime Environment (<span class="hljs-keyword">build </span><span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_331-<span class="hljs-keyword">b09)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Java </span>HotSpot(TM) <span class="hljs-number">64</span>-<span class="hljs-keyword">Bit </span>Server VM (<span class="hljs-keyword">build </span><span class="hljs-number">25</span>.<span class="hljs-number">331</span>-<span class="hljs-keyword">b09, </span>mixed mode)<br></code></pre></td></tr></table></figure><h2 id="2、Maven安装"><a href="#2、Maven安装" class="headerlink" title="2、Maven安装"></a>2、Maven安装</h2><p>见mac安装maven</p><h2 id="3、mac-Nacos部署"><a href="#3、mac-Nacos部署" class="headerlink" title="3、mac Nacos部署"></a>3、mac Nacos部署</h2><h3 id="1、了解Nacos"><a href="#1、了解Nacos" class="headerlink" title="1、了解Nacos"></a>1、了解Nacos</h3><blockquote><p>了解Nacos<br>什么是Nacos <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p></blockquote><h3 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h3><p>下载地址：<a href="https://github.com/alibaba/Nacos/releases">https://github.com/alibaba/Nacos/releases</a></p><p>包说明</p><blockquote><ul><li>log           nacos生成日志说明</li><li>bin           nacos服务相关脚本目录，</li><li>conf          nacos的配置文件目录</li><li>target        nacos的启动依赖目录</li><li>data          nacos自带apache-derby数据库，data存放数据内容</li></ul></blockquote><h2 id="3、操作"><a href="#3、操作" class="headerlink" title="3、操作"></a>3、操作</h2><p>终端切换到nacos下的bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd bin<br></code></pre></td></tr></table></figure><p>进入解压目录的bin目录下，打开终端，输入命令启动，输出nacos is starting with standalone即为成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh startup.sh -m standalone<br></code></pre></td></tr></table></figure><p>浏览器访问进入可视化页面，账号密码都是nacos，进行登录即可，nacos的端口为8848</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8848</span><span class="hljs-regexp">/nacos/</span><span class="hljs-comment">#/login</span><br></code></pre></td></tr></table></figure><p>关闭nacos</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh shutdown.sh<br></code></pre></td></tr></table></figure><p>但发现关闭后，仍然能在可视化页面连接nacos，所以需要杀死8848端口的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs //查询8848端口的进程，获取到进程id，例如是62837">lsof -i:8848<br>//杀死62837进程<br>kill -9 62837<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Jdk </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jdk </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【IDEA】常见问题-解决方案</title>
      <link href="/posts/fdcf83a4.html"/>
      <url>/posts/fdcf83a4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>【IDEA】常见问题-解决方案</p></blockquote><h2 id="1、‘project-JDK-is-not-define‘"><a href="#1、‘project-JDK-is-not-define‘" class="headerlink" title="1、‘project JDK is not define‘"></a>1、‘project JDK is not define‘</h2><p>set JDK</p><h2 id="2、IDEA-version-Control-下没有git菜单"><a href="#2、IDEA-version-Control-下没有git菜单" class="headerlink" title="2、IDEA version Control 下没有git菜单"></a>2、IDEA version Control 下没有git菜单</h2><p>git插件未开启</p><h3 id="3、Mac-上卸载-自带Java？"><a href="#3、Mac-上卸载-自带Java？" class="headerlink" title="3、Mac 上卸载 自带Java？"></a>3、Mac 上卸载 自带Java？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea设置Maven</title>
      <link href="/posts/56a0c2bb.html"/>
      <url>/posts/56a0c2bb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> Maven版本：3.6.3<br> IDEA版本：2021.3</p></blockquote><h1 id="1、IDEA集成Maven插件"><a href="#1、IDEA集成Maven插件" class="headerlink" title="1、IDEA集成Maven插件"></a>1、IDEA集成Maven插件</h1><h2 id="1、打开设置"><a href="#1、打开设置" class="headerlink" title="1、打开设置"></a>1、打开设置</h2><p>打开 IDEA，进入主界面后点击 Customize，然后点击 All settings<br><img src="https://qiniu.calmchen.com/blog/2022-05-13-idea-maven-1.png" alt="设置"></p><h2 id="2、设置maven"><a href="#2、设置maven" class="headerlink" title="2、设置maven"></a>2、设置maven</h2><p>修改 maven 的路径（使用本地的 Maven），以及修改 settings 文件的位置和本地仓库的位置。。<br><img src="https://qiniu.calmchen.com/blog/2022-05-13-idea-maven-2.png" alt="设置Maven"></p><h2 id="3、推荐配置"><a href="#3、推荐配置" class="headerlink" title="3、推荐配置"></a>3、推荐配置</h2><blockquote><p>设置 maven 在不联网的情况下使用本地插件<br>一般使用 maven 为我们提供好的骨架时，是需要联网的，配置这个，可以在没有网路的情况下，我们可以正常创建工程，并从之前已经使用过的工程中找到相应的骨架。<br>输入内容：-DarchetypeCatalog=internal</p></blockquote><p><img src="https://qiniu.calmchen.com/blog/2022-05-13-idea-maven-3.png" alt="设置Maven"></p><h2 id="4、setting-xml设置"><a href="#4、setting-xml设置" class="headerlink" title="4、setting.xml设置"></a>4、setting.xml设置</h2><h3 id="1、配置阿里云镜像（在setting-xml文件中配置）"><a href="#1、配置阿里云镜像（在setting-xml文件中配置）" class="headerlink" title="1、配置阿里云镜像（在setting.xml文件中配置）"></a>1、配置阿里云镜像（在setting.xml文件中配置）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Repository Switchboard<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ibiblio<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jboss-public-repository-group<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>JBoss Public Repository Group<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>google-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Google Maven Central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven-central.storage.googleapis.com<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven.net.cn<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>oneof the central mirrors in china<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2、配置默认-JDK-版本（在-setting-xml-文件中配置）"><a href="#2、配置默认-JDK-版本（在-setting-xml-文件中配置）" class="headerlink" title="2、配置默认 JDK 版本（在 setting.xml 文件中配置）"></a>2、配置默认 JDK 版本（在 setting.xml 文件中配置）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3、配置-Maven-仓库地址"><a href="#3、配置-Maven-仓库地址" class="headerlink" title="3、配置 Maven 仓库地址"></a>3、配置 Maven 仓库地址</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/Users/calm/.m2/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> IDEA </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装maven</title>
      <link href="/posts/25ff2e8c.html"/>
      <url>/posts/25ff2e8c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-官网下载-然后解压"><a href="#1-官网下载-然后解压" class="headerlink" title="1.官网下载,然后解压"></a>1.<a href="https://maven.apache.org/download.cgi">官网下载</a>,然后解压</h2><p>推荐<a href="https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/">maven3.6.3</a> 版本 maven的版本太高了 idea会报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">java.lang.RuntimeException: org.codehaus.plexus.component.repository.exception.ComponentLookupExcept<br></code></pre></td></tr></table></figure><h2 id="2-解压后的路径"><a href="#2-解压后的路径" class="headerlink" title="2.解压后的路径"></a>2.解压后的路径</h2><p>比如我的是 <strong>/usr/local/maven/apache-maven-3.6.3</strong></p><h2 id="3-打开终端"><a href="#3-打开终端" class="headerlink" title="3.打开终端"></a>3.打开终端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.bash_profile<br></code></pre></td></tr></table></figure><h2 id="4-添加这两行，并保存"><a href="#4-添加这两行，并保存" class="headerlink" title="4.添加这两行，并保存"></a>4.添加这两行，并保存</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">M2_HOME</span>=/usr/local/maven/apache-maven-3.6.3<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$M2_HOME/bin<br></code></pre></td></tr></table></figure><h2 id="5-终端输入，使配置文件生效"><a href="#5-终端输入，使配置文件生效" class="headerlink" title="5.终端输入，使配置文件生效"></a>5.终端输入，使配置文件生效</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bash_profile<br></code></pre></td></tr></table></figure><h2 id="6-终端输入mvn-v-查看是否安装成功"><a href="#6-终端输入mvn-v-查看是否安装成功" class="headerlink" title="6.终端输入mvn -v 查看是否安装成功"></a>6.终端输入mvn -v 查看是否安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn -v<br></code></pre></td></tr></table></figure><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><blockquote><p>1、source <del>/.bash_profile 只能解决一次问题，因为重新打开终端，执行mvn相关命令，依然报错“zsh: command not found: mvn”，需要再执行source ~/.bash_profile才可以<br>原因：zsh的配置文件没有加载</del>/.bash_profile的配置项。<br>解决方法：在zsh的配置文件中添加source ~/.bash_profile配置项的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bash_profile<br></code></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mac </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MAC】装机软件</title>
      <link href="/posts/55a24faf.html"/>
      <url>/posts/55a24faf.html</url>
      
        <content type="html"><![CDATA[<h1 id="自用Mac装机软件"><a href="#自用Mac装机软件" class="headerlink" title="自用Mac装机软件"></a>自用Mac装机软件</h1><h2 id="1、App-Store直接下载"><a href="#1、App-Store直接下载" class="headerlink" title="1、App Store直接下载"></a>1、App Store直接下载</h2><ul><li>wechat</li><li>QQ</li><li>钉钉</li><li>Xcode - 软件开发工具</li><li>iPic - Markdown图床工具</li><li>uPic - Markdown图床工具</li><li>XMind - 思维导图</li></ul><h2 id="2、官网下载"><a href="#2、官网下载" class="headerlink" title="2、官网下载"></a>2、官网下载</h2><ul><li><a href="https://www.google.cn/intl/zh-CN/chrome/">谷歌浏览器</a></li><li><a href="https://pinyin.sogou.com/mac/">搜狗输入法</a></li><li><a href="https://iterm2.com/downloads.html">iterm2</a> - macOS Terminal</li><li><a href="https://www.postman.com/downloads/">Postman</a></li><li><a href="http://www.u.tools/">utools</a> - 新一代效率工具平台</li><li><a href="https://pages.tmall.com/wow/aliyun-market/act/download-mail-client?wh_biz=tm">阿里邮箱</a></li><li><a href="https://paper.meiyuan.in/">Paper</a> - 专为 Mac 设计的壁纸应用</li><li><a href="https://www.docker.com/get-started/">Docker</a></li><li><a href="https://www.notion.so/desktop">Notion</a> - 笔记应用</li><li><a href="https://typoraio.cn/">Typora</a> - Markdowm文本编辑器</li><li><a href="https://www.apifox.cn/">Apifox</a> - API 文档、API 调试、API Mock、API 自动化测试</li><li><a href="https://ezip.awehunt.com/">MacZip</a> - Mac解压缩软件</li></ul><h2 id="3、破解版"><a href="#3、破解版" class="headerlink" title="3、破解版"></a>3、破解版</h2><h3 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h3><blockquote><ul><li><a href="https://macwk.com/">https://macwk.com/</a></li><li><a href="https://xclient.info/">https://xclient.info/</a></li></ul></blockquote><h3 id="常用App"><a href="#常用App" class="headerlink" title="常用App"></a>常用App</h3><ul><li><a href="https://macwk.com/soft/royal-tsx">Royal TSX</a> - Mac远程管理软件</li><li><a href="https://macwk.com/soft/cleanmymac-x">CleanMyMac X</a> - Mac优化清理工具</li><li><a href="https://macwk.com/soft/adobe-acrobat-pro-dc">Adobe Acrobat Pro DC</a> - PDF编辑器</li><li><a href="https://macwk.com/soft/navicat-premium">Navicat Premium</a> - 16.0.12 数据库管理工具</li><li><a href="https://macwk.com/soft/intellij-idea">IntelliJ IDEA</a> - 2021.3 java开发集成环境 破解见IDEA破解</li><li><a href="https://macwk.com/soft/phpstorm">PhpStorm</a> - 2021.3 PHP开发集成环境</li><li><a href="https://www.jetbrains.com/datagrip/download/other.html">DataGrip</a> - 2021.1 SQL数据库管理开发工具</li><li><a href="https://macwk.com/soft/sublime-text">Sublime Text</a> - 代码编辑器 </li><li><a href="https://macwk.com/soft/listen1">Listen1</a> - 2.21.7 付费VIP音乐免费听</li><li><a href="https://macwk.com/soft/redis-desktop-manager">Redis Desktop Manager</a> - 2021.10.236 Redis 数据库管理工具</li><li><a href="https://macwk.com/soft/omnigraffle">OmniGraffle</a> - 7.19.4 图示/图表/流程图等绘制</li><li><a href="https://macwk.com/soft/beyond-compare">Beyond Compare</a> - 4.4.2 文件对比比较</li><li><a href="https://macwk.com/soft/tinycal">小历</a> - 漂亮的状态栏日历</li></ul><h2 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h2><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><h3 id="php开发环境"><a href="#php开发环境" class="headerlink" title="php开发环境"></a>php开发环境</h3><blockquote><ul><li>docker</li></ul></blockquote><h3 id="java开发环境"><a href="#java开发环境" class="headerlink" title="java开发环境"></a>java开发环境</h3><blockquote><ul><li>idea</li><li>jdk</li><li>maven</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】常用插件</title>
      <link href="/posts/468ec796.html"/>
      <url>/posts/468ec796.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、hexo-deployer-git"><a href="#1、hexo-deployer-git" class="headerlink" title="1、hexo-deployer-git"></a>1、hexo-deployer-git</h2><p> <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><br>Hexo 支持一键部署网站到 git 仓库上，其他的一键部署方式参考 <a href="https://hexo.io/zh-cn/docs/one-command-deployment">官网介绍</a></p><ul><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li>配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:calmzo/calmzo.github.io.git</span> <span class="hljs-comment"># &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">git@gitee.com:Calm-Chan/Calm-Chan.git</span> <span class="hljs-comment"># &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2、生成非中文的链接"><a href="#2、生成非中文的链接" class="headerlink" title="2、生成非中文的链接"></a>2、生成非中文的链接</h2><p><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><ul><li>配置<br>首先修改 _config.yml 文件中的 permalink 的配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># abbrlink config</span><br><span class="hljs-comment">## https://github.com/rozbo/hexo-abbrlink</span><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span> <span class="hljs-comment"># support crc16(default) and crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span> <span class="hljs-comment"># support dec(default) and hex</span><br>  <span class="hljs-attr">drafts:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># (true)Process draft,(false)Do not process draft. false(default)</span><br>  <span class="hljs-comment"># Generate categories from directory-tree</span><br>  <span class="hljs-comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br>  <span class="hljs-attr">auto_category:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true(default)</span><br>    <span class="hljs-attr">depth:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 3(default)</span><br>    <span class="hljs-attr">over_write:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">auto_title:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># enable auto title, it can auto fill the title by path</span><br>  <span class="hljs-attr">auto_date:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># enable auto date, it can auto fill the date by time today</span><br>  <span class="hljs-attr">force:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># enable force mode, in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span><br></code></pre></td></tr></table></figure><h2 id="3、收录"><a href="#3、收录" class="headerlink" title="3、收录"></a>3、收录</h2><p><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a><br>为了使博客能被谷歌、bing、百度收录，最好生成 sitemap 方便爬取，整体流程可以先参考<a href="https://ywang-wnlo.github.io/posts/abac0c46.html">这篇博文</a></p><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-generator-sitemap</span><br><span class="hljs-comment">## https://github.com/hexojs/hexo-generator-sitemap</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br>  <span class="hljs-comment"># template: ./sitemap_template.xml</span><br>  <span class="hljs-attr">rel:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4、hexo-filter-github-emojis"><a href="#4、hexo-filter-github-emojis" class="headerlink" title="4、hexo-filter-github-emojis"></a>4、hexo-filter-github-emojis</h2><p><a href="https://npmmirror.com/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a></p><ul><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-filter-emoji<br></code></pre></td></tr></table></figure></li><li><p>配置<br>在站点配置文件 .config.yml 中增加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">emoji:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure></li><li><p>使用方法<br>输入对应的 emoji 编码就行了，这个是两种方法都通用的<br>例如：输入笑脸对应的 emoji 编码 <strong>: smile :</strong> 就可以得到 <span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span></p></li><li><p>方法二额外的用法：<br>如果你不喜欢 :: 这种方法，你还可以这样采用 tags 的方式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;% emoji sparkles %&#125;<br></code></pre></td></tr></table></figure><p>为了避免有时候 :: 带来的解析问题，我们可以在 front-matter 中添加 no-emoji: true 来禁用 :: 的方式：</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: Hello World<br>no-emoji: true<br>---<br><span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">&#x1f389;</span> as it is.<br>&#123;% emoji tada %&#125; still works.<br><br></code></pre></td></tr></table></figure><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">编码合集</a></p><ul><li>参考资料：<br><a href="https://blog.juanertu.com/archives/f36eea83.html">Hexo 中使用 emoji 表情</a></li></ul><h2 id="5、添加-RSS-订阅支持"><a href="#5、添加-RSS-订阅支持" class="headerlink" title="5、添加 RSS 订阅支持"></a>5、添加 RSS 订阅支持</h2><p><a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p><ul><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-feed --save<br></code></pre></td></tr></table></figure></li><li>配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 添加 RSS 订阅支持（可选的）</span><br><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">hub:</span><br>  <span class="hljs-attr">content:</span><br>  <span class="hljs-attr">content_limit:</span> <span class="hljs-number">140</span><br>  <span class="hljs-attr">content_limit_delim:</span> <span class="hljs-string">&#x27; &#x27;</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains IDE常用插件</title>
      <link href="/posts/bc84784b.html"/>
      <url>/posts/bc84784b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jetbrains-IDE常用插件"><a href="#Jetbrains-IDE常用插件" class="headerlink" title="Jetbrains IDE常用插件"></a>Jetbrains IDE常用插件</h1><hr><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><h3 id="1、Translation-必备翻译插件"><a href="#1、Translation-必备翻译插件" class="headerlink" title="1、Translation - 必备翻译插件"></a>1、Translation - 必备翻译插件</h3><blockquote><p>基于 IntelliJ 的 IDE 的翻译插件</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/8579-translation">https://plugins.jetbrains.com/plugin/8579-translation</a></p><h3 id="2、Maven-Search-Maven搜索"><a href="#2、Maven-Search-Maven搜索" class="headerlink" title="2、Maven Search - Maven搜索"></a>2、Maven Search - Maven搜索</h3><blockquote><p>Maven 依赖项搜索</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/17170-maven-search">https://plugins.jetbrains.com/plugin/17170-maven-search</a></p><h3 id="3、Alibaba-Java-Coding-Guidelines-阿里巴巴-Java-代码规范"><a href="#3、Alibaba-Java-Coding-Guidelines-阿里巴巴-Java-代码规范" class="headerlink" title="3、Alibaba Java Coding Guidelines - 阿里巴巴 Java 代码规范"></a>3、Alibaba Java Coding Guidelines - 阿里巴巴 Java 代码规范</h3><blockquote><p>阿里巴巴代码规范插件，检查你的代码规范。</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></p><h3 id="4、GitToolBox-git版本提交"><a href="#4、GitToolBox-git版本提交" class="headerlink" title="4、GitToolBox - git版本提交"></a>4、GitToolBox - git版本提交</h3><blockquote><p>他能在项目上提示你还有多少文件没提交，远程还有多少文件没更新下来。还能在每一行代码上提示上次提交的时间。查版本提交问题的时候尤其方便</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><h3 id="5、Atom-Material-ICons-优化idea流畅度"><a href="#5、Atom-Material-ICons-优化idea流畅度" class="headerlink" title="5、Atom Material ICons - 优化idea流畅度"></a>5、Atom Material ICons - 优化idea流畅度</h3><blockquote><p>这是一个icon图片插件，有一个特别牛的功能就是 可以优化idea流畅度，不知道是什么原理，现在这个插件成为了我必备插件</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><h3 id="6、Monokai-Pro-Theme-主题插件"><a href="#6、Monokai-Pro-Theme-主题插件" class="headerlink" title="6、Monokai Pro Theme - 主题插件"></a>6、Monokai Pro Theme - 主题插件</h3><blockquote><p>主题插件，最喜欢的一款主题</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><h3 id="7、Background-Image-Plus-设置背景（2020-1以上版本内置）"><a href="#7、Background-Image-Plus-设置背景（2020-1以上版本内置）" class="headerlink" title="7、Background Image Plus - 设置背景（2020.1以上版本内置）"></a>7、Background Image Plus - 设置背景（2020.1以上版本内置）</h3><blockquote><p>这款插件并不能直接提高你的开发效率，但是可以让你面对的IDE不再单调，当把背景设置成你自己心仪的的图片</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><h3 id="8、POJO-to-Json-对象-JSON转换"><a href="#8、POJO-to-Json-对象-JSON转换" class="headerlink" title="8、POJO to Json - 对象/JSON转换"></a>8、POJO to Json - 对象/JSON转换</h3><blockquote><p>一个简单的Java bean转JSON插件</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/12066-pojo-to-json">https://plugins.jetbrains.com/plugin/12066-pojo-to-json</a></p><h3 id="9、Free-Mybatis-plugin-免费的Mybatis插件"><a href="#9、Free-Mybatis-plugin-免费的Mybatis插件" class="headerlink" title="9、Free Mybatis plugin - 免费的Mybatis插件"></a>9、Free Mybatis plugin - 免费的Mybatis插件</h3><blockquote><p>免费的Mybatis插件</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a></p><p>free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：</p><blockquote><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li><li>集成mybatis generator gui界面</li><li>根据数据库注解，生成swagger model注解</li><li>image-20210722103624389</li></ul></blockquote><h3 id="10、SequenceDiagram-时序图"><a href="#10、SequenceDiagram-时序图" class="headerlink" title="10、SequenceDiagram - 时序图"></a>10、SequenceDiagram - 时序图</h3><blockquote><p>生成调用链路时序图</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></p><h3 id="11、Codota-代码智能提示"><a href="#11、Codota-代码智能提示" class="headerlink" title="11、Codota - 代码智能提示"></a>11、Codota - 代码智能提示</h3><blockquote><p>直接在 IntelliJ、Android Studio 或 Eclipse 中使用从数百万个程序中学习的代码完成，更快、更智能地编写代码。</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><p>插件链接：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a></p><h3 id="12、CamelCase-驼峰命名法"><a href="#12、CamelCase-驼峰命名法" class="headerlink" title="12、CamelCase - 驼峰命名法"></a>12、CamelCase - 驼峰命名法</h3><blockquote><p>从数据库直接复制字段名，然后SHIFT + ALT + U转换成驼峰</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br>插件链接：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a></p><h3 id="13、Rainbow-Brackets-彩虹括号"><a href="#13、Rainbow-Brackets-彩虹括号" class="headerlink" title="13、Rainbow Brackets - 彩虹括号"></a>13、Rainbow Brackets - 彩虹括号</h3><blockquote><p>防止括号太多眼睛看不过来</p></blockquote><p>推荐指数：<span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span> <span class="github-emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span></p><p>插件链接：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets</a></p><h3 id="14、设置代码风格"><a href="#14、设置代码风格" class="headerlink" title="14、设置代码风格"></a>14、设置代码风格</h3><p>1、google style设置<br>下载<a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml">intellij-java-google-style.xml</a><br>Editor -&gt; Code Style -&gt; Scheme -&gt; import</p><p>其他设置<br>Editor -&gt; Code Style -&gt; Java<br>Tab size : 4</p><h1 id="转载链接"><a href="#转载链接" class="headerlink" title="转载链接"></a>转载链接</h1><ul><li><a href="https://www.cnblogs.com/lvbok/p/idea_plugin.html">IDEA常用插件推荐</a></li></ul><h2 id="Phpstorm"><a href="#Phpstorm" class="headerlink" title="Phpstorm"></a>Phpstorm</h2><h3 id="1、CodeGlance-代码地图"><a href="#1、CodeGlance-代码地图" class="headerlink" title="1、CodeGlance - 代码地图"></a>1、CodeGlance - 代码地图</h3><blockquote><p>代码地图</p></blockquote><h3 id="2、Rainbow-Brackets-彩虹颜色括号"><a href="#2、Rainbow-Brackets-彩虹颜色括号" class="headerlink" title="2、Rainbow Brackets - 彩虹颜色括号"></a>2、Rainbow Brackets - 彩虹颜色括号</h3><blockquote><p>彩虹颜色括号</p></blockquote><h3 id="3、sonarLint-代码质量管理工具"><a href="#3、sonarLint-代码质量管理工具" class="headerlink" title="3、sonarLint - 代码质量管理工具"></a>3、sonarLint - 代码质量管理工具</h3><blockquote><p>代码质量管理工具</p></blockquote><h3 id="4、Laravel-Plugin-代码提示"><a href="#4、Laravel-Plugin-代码提示" class="headerlink" title="4、Laravel Plugin - 代码提示"></a>4、Laravel Plugin - 代码提示</h3><blockquote><p>此插件针对Laravel框架提供controllers,views, routes, configuration, translations等的代码提示功能。</p></blockquote><h3 id="5、Chinese-PHP-Document-php基本函数的中文文档"><a href="#5、Chinese-PHP-Document-php基本函数的中文文档" class="headerlink" title="5、Chinese PHP Document - php基本函数的中文文档"></a>5、Chinese PHP Document - php基本函数的中文文档</h3><blockquote><p>php基本函数的中文文档</p></blockquote><h3 id="6、-env-files-support-env文件"><a href="#6、-env-files-support-env文件" class="headerlink" title="6、.env files support - env文件"></a>6、.env files support - env文件</h3><blockquote><p>可以在env函数使用是提示.env文件中所有的key值的自动完成功能</p></blockquote><h3 id="7、-ignore-高亮GIT忽略文件"><a href="#7、-ignore-高亮GIT忽略文件" class="headerlink" title="7、.ignore - 高亮GIT忽略文件"></a>7、.ignore - 高亮GIT忽略文件</h3><blockquote><p>高亮GIT忽略文件</p></blockquote><h3 id="8、Markdown-support-md文件预览"><a href="#8、Markdown-support-md文件预览" class="headerlink" title="8、Markdown support - md文件预览"></a>8、Markdown support - md文件预览</h3><blockquote><p>在编写.md文件时有预览的功能</p></blockquote><h3 id="9、Thinkphp5-Plugin-tp5"><a href="#9、Thinkphp5-Plugin-tp5" class="headerlink" title="9、Thinkphp5 Plugin - tp5"></a>9、Thinkphp5 Plugin - tp5</h3><blockquote><p>用于thinkphp5.0的视图,配置,路由,数据库,模型智能提示和跳转(快捷键Ctrl+B),及模型函数(model)返回类型分析</p></blockquote><h3 id="10、BashSupport-sh脚本"><a href="#10、BashSupport-sh脚本" class="headerlink" title="10、BashSupport - .sh脚本"></a>10、BashSupport - .sh脚本</h3><blockquote><p>可以书写.sh脚本，且同样可以在书写时有对应的语法提示功能</p></blockquote><h3 id="11、power-mode-II-代码动效"><a href="#11、power-mode-II-代码动效" class="headerlink" title="11、power-mode II - 代码动效"></a>11、power-mode II - 代码动效</h3><blockquote><p>写代码动效</p></blockquote><h3 id="12、Material-Theme-UI-UI主题"><a href="#12、Material-Theme-UI-UI主题" class="headerlink" title="12、Material Theme UI - UI主题"></a>12、Material Theme UI - UI主题</h3><blockquote><p>UI主题插件</p></blockquote><h3 id="13、GitToolBox"><a href="#13、GitToolBox" class="headerlink" title="13、GitToolBox"></a>13、GitToolBox</h3><blockquote><p>显示 inline blame、提交编号和日期</p></blockquote><h3 id="14、Makefile-Language"><a href="#14、Makefile-Language" class="headerlink" title="14、Makefile Language"></a>14、Makefile Language</h3><blockquote><p>自动完成、语法高亮和一个 make 工具窗口</p></blockquote><h2 id="GoLand"><a href="#GoLand" class="headerlink" title="GoLand"></a>GoLand</h2><h3 id="1、Tabnine-AI-Code-Completion"><a href="#1、Tabnine-AI-Code-Completion" class="headerlink" title="1、Tabnine AI Code Completion"></a>1、Tabnine AI Code Completion</h3><blockquote><p>Tabnine AI 代码补全</p></blockquote><h3 id="2、GitToolBox"><a href="#2、GitToolBox" class="headerlink" title="2、GitToolBox"></a>2、GitToolBox</h3><blockquote><p>显示 inline blame、提交编号和日期</p></blockquote><h3 id="3、Makefile-Language"><a href="#3、Makefile-Language" class="headerlink" title="3、Makefile Language"></a>3、Makefile Language</h3><blockquote><p>自动完成、语法高亮和一个 make 工具窗口</p></blockquote><h3 id="4、Rainbow-Brackets-彩虹颜色括号"><a href="#4、Rainbow-Brackets-彩虹颜色括号" class="headerlink" title="4、Rainbow Brackets - 彩虹颜色括号"></a>4、Rainbow Brackets - 彩虹颜色括号</h3><blockquote><p>彩虹颜色括号</p></blockquote><h3 id="5、Gopher"><a href="#5、Gopher" class="headerlink" title="5、Gopher"></a>5、Gopher</h3><p>go仓鼠进度条 。它超级可爱</p><h3 id="6、编辑器配置"><a href="#6、编辑器配置" class="headerlink" title="6、编辑器配置"></a>6、编辑器配置</h3><h4 id="配置注释前面都有一个空格"><a href="#配置注释前面都有一个空格" class="headerlink" title="配置注释前面都有一个空格"></a>配置注释前面都有一个空格</h4><p>Editor -&gt; Code Style -&gt; Go </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// Foo docs</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置代码自动格式化"><a href="#配置代码自动格式化" class="headerlink" title="配置代码自动格式化"></a>配置代码自动格式化</h4><p>Tools -&gt; File Watchers<br>新建 go fmt</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
          <category> PHP </category>
          
          <category> Goland </category>
          
          <category> 插件 </category>
          
          <category> JAVA </category>
          
          <category> IntelliJ IDEA </category>
          
          <category> IDEA </category>
          
          <category> Phpstorm </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
            <tag> java </tag>
            
            <tag> php </tag>
            
            <tag> goland </tag>
            
            <tag> phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA基本设置</title>
      <link href="/posts/4c38ef0c.html"/>
      <url>/posts/4c38ef0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、字体主题设置"><a href="#1、字体主题设置" class="headerlink" title="1、字体主题设置"></a>1、字体主题设置</h2><p>选择 File – settings – Editor – Font  按照自己喜好设置</p><ul><li><p>编辑区字体设置<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-editor-font.png" alt="编辑区字体设置"></p></li><li><p>工作区区字体设置<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-behavior-theme.png" alt="工作区区字体设置"></p></li></ul><h2 id="2、编码格式"><a href="#2、编码格式" class="headerlink" title="2、编码格式"></a>2、编码格式</h2><p>在开发中，我们常设置编码格式为UTF-8<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea1.png" alt="编码格式设置"><br>由上到下需要配置编码的地方有四处：</p><blockquote><ul><li>Global Encoding：全局编码</li><li>Project Encoding ：项目编码</li><li>Encoding：源码目录编码</li><li>Default encoding for properties files：.properties文件编码</li></ul></blockquote><h2 id="3、方法分割线"><a href="#3、方法分割线" class="headerlink" title="3、方法分割线"></a>3、方法分割线</h2><p>勾选 Show method separators 选项即可<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-031119.png" alt="方法分割线设置"></p><h2 id="4、方法参数提示"><a href="#4、方法参数提示" class="headerlink" title="4、方法参数提示"></a>4、方法参数提示</h2><p>勾选图中三项即可<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-031423.png" alt="方法参数提示"></p><p>共有三个选项：</p><blockquote><ul><li>Show parameter name hints on completion：填写参数后显示其信息</li><li>Show the parameter info popup in 1000 ms：选择要调用的方法后在一秒内弹出参数信息</li><li>Show full method signatures：显示完整的方法签名</li></ul></blockquote><h2 id="5、鼠标悬停显示其文档信息（即悬停提示）"><a href="#5、鼠标悬停显示其文档信息（即悬停提示）" class="headerlink" title="5、鼠标悬停显示其文档信息（即悬停提示）"></a>5、鼠标悬停显示其文档信息（即悬停提示）</h2><p><img src="https://qiniu.calmchen.com/blog/2022-05-07-031635.png" alt="悬停提示"><br>勾选 Show quick documentation on mouse move 选项</p><h2 id="6、添加代码作者以及日期信息"><a href="#6、添加代码作者以及日期信息" class="headerlink" title="6、添加代码作者以及日期信息"></a>6、添加代码作者以及日期信息</h2><p><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-codetemplates-fileheader.png" alt="添加代码作者以及日期信息"></p><h2 id="7、设置导航栏不折叠类名（当类名过多时）"><a href="#7、设置导航栏不折叠类名（当类名过多时）" class="headerlink" title="7、设置导航栏不折叠类名（当类名过多时）"></a>7、设置导航栏不折叠类名（当类名过多时）</h2><p>勾选图中选项即可<br>此处有两个选项：<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-showtabs.png" alt="设置导航栏不折叠类名"><br>Show pinned tabs in a separate row：在单独的行中显示固定标签（即显示右上角 × 号）<br>同时设置标签的个数（此版本默认为10）</p><h2 id="8、通过鼠标滚轮调整字体大小"><a href="#8、通过鼠标滚轮调整字体大小" class="headerlink" title="8、通过鼠标滚轮调整字体大小"></a>8、通过鼠标滚轮调整字体大小</h2><p>勾选 Change font size with Ctrl+Mouse Wheel 选项<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-mousecontrol.png" alt="鼠标滚轮调整字体大小"></p><h2 id="9、自动导包"><a href="#9、自动导包" class="headerlink" title="9、自动导包"></a>9、自动导包</h2><p>选择并勾选图中选项<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-autoimport.png" alt="自动导包"><br>其中有两个选项需要我们勾选：</p><blockquote><ul><li>Add unambiguous imports on the fly：动态添加明确的导入</li><li>Optimize imprts and compltetion：动态优化导入（即删除无用导入）</li></ul></blockquote><h2 id="10、忽略大小写"><a href="#10、忽略大小写" class="headerlink" title="10、忽略大小写"></a>10、忽略大小写</h2><p>取消 Match case 选项<br><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-matchcase.png" alt="忽略大小写"><br>如果忽略大小写，则当我们输入“stringbuffer”时IDEA也会给予提示<br>如果我们不忽略大小写，则我们只能通过输入“StringBuffer”来获得提示</p><p>此处有三个选项：</p><blockquote><ul><li>Match case：匹配大小写</li><li>First letter only：首字母映照</li><li>All letters：字母全拼</li></ul></blockquote><h2 id="11、自动编译"><a href="#11、自动编译" class="headerlink" title="11、自动编译"></a>11、自动编译</h2><p>暂无</p><h2 id="12、关闭自动更新"><a href="#12、关闭自动更新" class="headerlink" title="12、关闭自动更新"></a>12、关闭自动更新</h2><p><img src="https://qiniu.calmchen.com/blog/2022-05-07-idea-check-ide-updates.png" alt="关闭自动更新"><br>取消勾选 Check IDE updates for Stable Releases 选项</p><h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><p><a href="https://blog.csdn.net/weixin_54886569/article/details/119114894?spm=1001.2014.3001.5506">IDEA的基本设置（基于2021.1.2版本）</a></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
          <category> JAVA </category>
          
          <category> JetBrains </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JAVA </tag>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains下载</title>
      <link href="/posts/7076a5ae.html"/>
      <url>/posts/7076a5ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h1><p>v2021.2.2之后版本需要登录账号才能免费试用，推荐下载<strong>2021.2.2</strong>版本</p><ul><li><a href="https://www.jetbrains.com/idea/download/other.html">idea下载链接</a></li></ul><h2 id="1、如何安装"><a href="#1、如何安装" class="headerlink" title="1、如何安装"></a>1、如何安装</h2><p>提供以下两种方法，二选一即可。</p><h3 id="1、插件市场安装："><a href="#1、插件市场安装：" class="headerlink" title="1、插件市场安装："></a>1、插件市场安装：</h3><p>在 Settings/Preferences… -&gt; Plugins -&gt; 点击齿轮，选择第一个手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a> 搜索：IDE Eval Reset 插件进行安装。</p><h3 id="2、手动下载安装："><a href="#2、手动下载安装：" class="headerlink" title="2、手动下载安装："></a>2、手动下载安装：</h3><p><a href="https://macwk.lanzoui.com/iwY9lvf1ckj">点击这个链接(v2.1.14)下载插件的 zip 包</a> (macOS可能会自动解压，切记使用的是 zip 包，不是解压后的文件夹！），然后打开 Settings/Preferences… -&gt; Plugins 手动安装插件。</p><h2 id="2、如何使用"><a href="#2、如何使用" class="headerlink" title="2、如何使用"></a>2、如何使用</h2><p>一般来说，在 IDE 窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（25天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示）。</p><p>您也可以手动唤出插件的主界面：</p><p>a. 如果 IDE 没有打开项目，在 Welcome 界面点击 IDE 的菜单：Get Help -&gt; Eval Reset</p><p>b. 如果 IDE 打开了项目，点击 IDE 的菜单：Help -&gt; Eval Reset</p><p>唤出的插件主界面中包含了一些显示信息，有 2 个按钮和 1 个勾选项：</p><p>按钮：Reload 用来刷新界面上的显示信息。<br>按钮：Reset 点击会询问是否重置试用信息并重启 IDE。选择 Yes 则执行重置操作并重启 IDE 生效，选择 No 则什么也不做。（此为手动重置方式）<br>勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启/退出 IDE 时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式，推荐此方法！）</p><h2 id="3、如何更新"><a href="#3、如何更新" class="headerlink" title="3、如何更新"></a>3、如何更新</h2><h3 id="1、插件更新机制（推荐）："><a href="#1、插件更新机制（推荐）：" class="headerlink" title="1、插件更新机制（推荐）："></a>1、插件更新机制（推荐）：</h3><p>IDE 会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</p><p>点击 IDE 的 Check for Updates… 菜单手动检测 IDE 和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</p><p>插件更新可能会需要重启IDE。</p><h3 id="2、手动更新："><a href="#2、手动更新：" class="headerlink" title="2、手动更新："></a>2、手动更新：</h3><p>从本页面下载最新的插件 zip 包安装更新。插件更新需要重启IDE。</p><h1 id="参考转载链接"><a href="#参考转载链接" class="headerlink" title="参考转载链接"></a>参考转载链接</h1><p><a href="https://www.macwk.com/article/jetbrains-crack">JetBrains全系列软件激活</a></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
          <category> JetBrains </category>
          
          <category> 激活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JetBrains </tag>
            
            <tag> 激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/posts/5d36ff15.html"/>
      <url>/posts/5d36ff15.html</url>
      
        <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>几乎所有Markdown应用程序都支持John Gruber原始设计文档中概述的基本语法。Markdown处理器之间存在细微的差异和差异-尽可能在线内注明。</p><p>注意：使用Markdown并不意味着您也不能使用HTML。您可以将HTML标签添加到任何Markdown文件中。如果您更喜欢某些HTML标记而不是Markdown语法，这将很有帮助。例如，有些人发现将HTML标签用于图像更容易。</p><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>要创建标题，请<code>#</code>在单词或短语的前面添加数字符号（）。您使用的数字符号的数量应与标题级别相对应。例如，要创建标题级别三（<code>&lt;h3&gt;</code>），请使用三个数字符号（例如<code>### My Header</code>）。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code># Heading level 1</code></td><td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td><td>标题等级1</td></tr><tr><td><code>## Heading level 2</code></td><td><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td><td>标题等级2</td></tr><tr><td><code>### Heading level 3</code></td><td><code>&lt;h3&gt;Heading level 3&lt;/h3&gt;</code></td><td>标题级别3</td></tr><tr><td><code>#### Heading level 4</code></td><td><code>&lt;h4&gt;Heading level 4&lt;/h4&gt;</code></td><td>标题级别4</td></tr><tr><td><code>##### Heading level 5</code></td><td><code>&lt;h5&gt;Heading level 5&lt;/h5&gt;</code></td><td>标题5</td></tr><tr><td><code>###### Heading level 6</code></td><td><code>&lt;h6&gt;Heading level 6&lt;/h6&gt;</code></td><td>标题等级6</td></tr></tbody></table><h3 id="替代语法"><a href="#替代语法" class="headerlink" title="替代语法"></a>替代语法</h3><p>或者，在文本下方的行上，添加任意数量的<code>==</code>标题级别1的<code>--</code>字符或标题级别2的字符。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>Heading level 1===============</code></td><td><code>&lt;h1&gt;Heading level 1&lt;/h1&gt;</code></td><td>标题等级1</td></tr><tr><td><code>Heading level 2---------------</code></td><td><code>&lt;h2&gt;Heading level 2&lt;/h2&gt;</code></td><td>标题等级2</td></tr></tbody></table><h2 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h2><p>要创建段落，请使用空白行分隔一行或多行文本。您不应缩进带有空格或制表符的段落。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>I really like using Markdown.I think I&#39;ll use it to format all of my documents from now on.</code></td><td><code>&lt;p&gt;I really like using Markdown.&lt;/p&gt;&lt;p&gt;I think I&#39;ll use it to format all of my documents from now on.&lt;/p&gt;</code></td><td>我真的很喜欢使用Markdown。我想从现在开始，我将使用它来格式化所有文档。</td></tr></tbody></table><h2 id="3、换行"><a href="#3、换行" class="headerlink" title="3、换行"></a>3、换行</h2><p>要创建换行符（<code>&lt;br&gt;</code>），请以两个或多个空格结束一行，然后键入return。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>This is the first line.  And this is the second line.</code></td><td><code>&lt;p&gt;This is the first line.&lt;br&gt;And this is the second line.&lt;/p&gt;</code></td><td>这是第一行。 这是第二行。</td></tr></tbody></table><h2 id="4、着重"><a href="#4、着重" class="headerlink" title="4、着重"></a>4、着重</h2><p>您可以通过使文本变为粗体或斜体来增加着重。</p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>要加粗文本，请在单词或短语的前后添加两个星号或下划线。要加粗一个单词的中部以强调，请在字母周围添加两个星号，且各空格之间不加空格。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>I just love **bold text**.</code></td><td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td><td>我只喜欢<strong>粗体字</strong>。</td></tr><tr><td><code>I just love __bold text__.</code></td><td><code>I just love &lt;strong&gt;bold text&lt;/strong&gt;.</code></td><td>我只喜欢<strong>粗体字</strong>。</td></tr><tr><td><code>Love**is**bold</code></td><td><code>Love&lt;strong&gt;is&lt;/strong&gt;bold</code></td><td>爱<strong>是</strong>大胆的</td></tr></tbody></table><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>要斜体显示文本，请在单词或短语的前后添加一个星号或下划线。要斜体突出单词的中间部分，请在字母周围添加一个星号，中间不要带空格。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>Italicized text is the *cat&#39;s meow*.</code></td><td><code>Italicized text is the &lt;em&gt;cat&#39;s meow&lt;/em&gt;.</code></td><td>斜体文字是<em>猫的叫声</em>。</td></tr><tr><td><code>Italicized text is the _cat&#39;s meow_.</code></td><td><code>Italicized text is the &lt;em&gt;cat&#39;s meow&lt;/em&gt;.</code></td><td>斜体文字是<em>猫的叫声</em>。</td></tr><tr><td><code>A*cat*meow</code></td><td><code>A&lt;em&gt;cat&lt;/em&gt;meow</code></td><td>一个<em>猫</em>喵</td></tr></tbody></table><h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>要同时突出显示带有粗体和斜体的文本，请在单词或短语的前后添加三个星号或下划线。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>This text is ***really important***.</code></td><td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td><td>这段文字***真的很重要***。</td></tr><tr><td><code>This text is ___really important___.</code></td><td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td><td>这段文字***真的很重要***。</td></tr><tr><td><code>This text is __*really important*__.</code></td><td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td><td>这段文字***真的很重要***。</td></tr><tr><td><code>This text is **_really important_**.</code></td><td><code>This text is &lt;strong&gt;&lt;em&gt;really important&lt;/em&gt;&lt;/strong&gt;.</code></td><td>这段文字***真的很重要***。</td></tr></tbody></table><h2 id="5、块引用"><a href="#5、块引用" class="headerlink" title="5、块引用"></a>5、块引用</h2><p>要创建blockquote，请<code>&gt;</code>在段落前面添加一个。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Dorothy</span> followed her through many <span class="hljs-keyword">of</span> the beautiful rooms <span class="hljs-keyword">in</span> her castle.</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><blockquote><p>桃乐丝（Dorothy）跟着她走过了她城堡中许多美丽的房间。</p></blockquote><h3 id="具有多个段落的块引用"><a href="#具有多个段落的块引用" class="headerlink" title="具有多个段落的块引用"></a>具有多个段落的块引用</h3><p>块引用可以包含多个段落。<code>&gt;</code>在段落之间的空白行上添加一个。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Dorothy</span> followed her through many <span class="hljs-keyword">of</span> the beautiful rooms <span class="hljs-keyword">in</span> her castle.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">The</span> <span class="hljs-title class_">Witch</span> bade her clean the pots and kettles and sweep the floor and keep the fire fed <span class="hljs-keyword">with</span> wood.</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><blockquote><p>桃乐丝（Dorothy）跟着她走过了她城堡中许多美丽的房间。</p><p>女巫请她清洗锅碗瓢盆，扫地，并用木柴取火。</p></blockquote><h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套。<code>&gt;&gt;</code>在要嵌套的段落前面添加一个。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">&gt; Dorothy followed her through many of the <span class="hljs-keyword">beautiful </span>rooms in her castle.<br>&gt;<br>&gt;&gt; The Witch <span class="hljs-keyword">bade </span>her clean the pots <span class="hljs-keyword">and </span>kettles <span class="hljs-keyword">and </span><span class="hljs-keyword">sweep </span>the floor <span class="hljs-keyword">and </span>keep the fire fed with wood.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><blockquote><p>桃乐丝（Dorothy）跟着她走过了她城堡中许多美丽的房间。</p><blockquote><p>女巫请她清洗锅碗瓢盆，扫地，并用木柴取火。</p></blockquote></blockquote><h3 id="具有其他元素的块引用"><a href="#具有其他元素的块引用" class="headerlink" title="具有其他元素的块引用"></a>具有其他元素的块引用</h3><p>块引用可以包含其他Markdown格式的元素。并非所有元素都可以使用-您需要进行实验以查看哪些元素有效。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">#### <span class="hljs-title class_">The</span> quarterly results look great!</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- <span class="hljs-title class_">Revenue</span> was off the chart.</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- <span class="hljs-title class_">Profits</span> were higher than ever.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> *<span class="hljs-title class_">Everything</span>* is going according to **plan**.</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><blockquote><h4 id="季度业绩看起来不错！"><a href="#季度业绩看起来不错！" class="headerlink" title="季度业绩看起来不错！"></a>季度业绩看起来不错！</h4><ul><li>收入超出了预期。</li><li>利润比以往任何时候都高。</li></ul><p><em>一切</em>都按<strong>计划进行</strong>。</p></blockquote><h2 id="6、清单"><a href="#6、清单" class="headerlink" title="6、清单"></a>6、清单</h2><p>您可以将项目组织成有序和无序列表。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，请在订单项中添加数字和句点。数字不必按数字顺序排列，但列表应以数字开头。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>1. First item2. Second item3. Third item4. Fourth item</code></td><td><code>&lt;ol&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ol&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>1. First item1. Second item1. Third item1. Fourth item</code></td><td><code>&lt;ol&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ol&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>1. First item8. Second item3. Third item5. Fourth item</code></td><td><code>&lt;ol&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ol&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>1. First item2. Second item3. Third item  1. Indented item  2. Indented item4. Fourth item</code></td><td><code>&lt;ol&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;ol&gt;&lt;li&gt;Indented item&lt;/li&gt;&lt;li&gt;Indented item&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ol&gt;</code></td><td>第一项第二项第三项缩进项缩进项第四项</td></tr></tbody></table><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，请在订单项前添加破折号（<code>-</code>），星号（<code>*</code>）或加号（<code>+</code>）。缩进一个或多个项目以创建嵌套列表。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>- First item- Second item- Third item- Fourth item</code></td><td><code>&lt;ul&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ul&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>* First item* Second item* Third item* Fourth item</code></td><td><code>&lt;ul&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ul&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>+ First item* Second item- Third item+ Fourth item</code></td><td><code>&lt;ul&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ul&gt;</code></td><td>第一项第二项第三项第四项</td></tr><tr><td><code>- First item- Second item- Third item  - Indented item  - Indented item- Fourth item</code></td><td><code>&lt;ul&gt;&lt;li&gt;First item&lt;/li&gt;&lt;li&gt;Second item&lt;/li&gt;&lt;li&gt;Third item&lt;ul&gt;&lt;li&gt;Indented item&lt;/li&gt;&lt;li&gt;Indented item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Fourth item&lt;/li&gt;&lt;/ul&gt;</code></td><td>第一项第二项第三项缩进项缩进项第四项</td></tr></tbody></table><h3 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h3><p>要在保留列表连续性的同时在列表中添加另一个元素，请将该元素缩进四个空格或一个制表符，如以下示例所示。</p><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">*   This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span>.<br>*   Here&#x27;s <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span>.<br><br>    I need <span class="hljs-keyword">to</span> add another <span class="hljs-built_in">paragraph</span> <span class="hljs-keyword">below</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span>.<br><br>*   And here&#x27;s <span class="hljs-keyword">the</span> <span class="hljs-keyword">third</span> <span class="hljs-built_in">list</span> <span class="hljs-built_in">item</span>.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ul><li><p>这是第一个列表项。</p></li><li><p>这是第二个列表项。</p><p>我需要在第二个列表项下面添加另一段。</p></li><li><p>这是第三个列表项。</p></li></ul><h4 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">*   This <span class="hljs-keyword">is</span> the first list item.<br>*   Her<span class="hljs-string">e&#x27;s the second list item.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt; A blockquote would look great below the second list item.</span><br><span class="hljs-string"></span><br><span class="hljs-string">*   And here&#x27;</span>s the third list item.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ul><li><p>这是第一个列表项。</p></li><li><p>这是第二个列表项。</p><blockquote><p>在第二个列表项的下方，blockquote看起来不错。</p></blockquote></li><li><p>这是第三个列表项。</p></li></ul><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p><a href="http://markdown.p2hp.com/basic-syntax/index.html#code-blocks">代码块</a>通常缩进四个空格或一个制表符。当它们在列表中时，将它们缩进八个空格或两个选项卡。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.  Open the <span class="hljs-keyword">file</span>.<br><span class="hljs-number">2</span>.  Find the following code block <span class="hljs-keyword">on</span> <span class="hljs-built_in">line</span> <span class="hljs-number">21</span>:<br><br>        <span class="hljs-symbol">&lt;html&gt;</span><br>          <span class="hljs-symbol">&lt;head&gt;</span><br>            <span class="hljs-symbol">&lt;title&gt;</span>Test&lt;/title&gt;<br>          &lt;/head&gt;<br><br><span class="hljs-number">3</span>.  Update the title <span class="hljs-keyword">to</span> <span class="hljs-keyword">match</span> the name of your website.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ol><li><p>打开文件。</p></li><li><p>在第21行找到以下代码块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>更新标题以匹配您的网站名称。</p></li></ol><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span>  Open <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> containing <span class="hljs-keyword">the</span> Linux mascot.<br><span class="hljs-number">2.</span>  Marvel <span class="hljs-keyword">at</span> its beauty.<br><br>    ![Tux, <span class="hljs-keyword">the</span> Linux mascot](/assets/images/tux.png)<br><br><span class="hljs-number">3.</span>  Close <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span>.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ol><li><p>打开包含Linux吉祥物的文件。</p></li><li><p>惊叹于它的美丽。</p><p><img src="https://d33wubrfki0l68.cloudfront.net/e7ed9fe4bafe46e275c807d63591f85f9ab246ba/e2d28/assets/images/tux.png" alt="Tux，Linux吉祥物"></p></li><li><p>关闭文件。</p></li></ol><h2 id="7、代码"><a href="#7、代码" class="headerlink" title="7、代码"></a>7、代码</h2><p>要将单词或短语表示为代码，请将其括在勾号（```）中。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>At the command prompt, type </code>nano<code>.</code></td><td><code>At the command prompt, type &lt;code&gt;nano&lt;/code&gt;.</code></td><td>在命令提示符下，键入<code>nano</code>。</td></tr></tbody></table><h3 id="转义刻度线"><a href="#转义刻度线" class="headerlink" title="转义刻度线"></a>转义刻度线</h3><p>如果要表示为代码的单词或短语包含一个或多个刻度线，可以通过将单词或短语括在双刻度线（````）中来对其进行转义。</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>渲染输出</th></tr></thead><tbody><tr><td><code>Use `code` in your Markdown file.</code></td><td><code>&lt;code&gt;Use </code>code<code> in your Markdown file.&lt;/code&gt;</code></td><td><code>Use </code>code<code> in your Markdown file.</code></td></tr></tbody></table><h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>要创建代码块，请在代码块的每一行缩进至少四个空格或一个制表符。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><br>  <span class="hljs-section">&lt;head&gt;</span><br>  <span class="hljs-section">&lt;/head&gt;</span><br><span class="hljs-section">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><br>  <span class="hljs-section">&lt;head&gt;</span><br>  <span class="hljs-section">&lt;/head&gt;</span><br><span class="hljs-section">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>注意：</strong>要创建没有缩进线的<a href="http://markdown.p2hp.com/extended-syntax/index.html#fenced-code-blocks">代码块</a>，请使用<a href="http://markdown.p2hp.com/extended-syntax/index.html#fenced-code-blocks">围栅代码块</a>。</p><h2 id="8、水平线"><a href="#8、水平线" class="headerlink" title="8、水平线"></a>8、水平线</h2><p>要创建水平线<code>***</code>，请单独在一行上使用三个或更多的星号（），破折号（<code>---</code>）或下划线（<code>___</code>）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">***</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">_________________</span><br></code></pre></td></tr></table></figure><p>所有这三个的渲染输出看起来都相同：</p><hr><h2 id="9、链接"><a href="#9、链接" class="headerlink" title="9、链接"></a>9、链接</h2><p>要创建链接，请将链接文本括在方括号（例如<code>[Duck Duck Go]</code>）中，然后立即在URL后面加上括号（例如<code>(https://duckduckgo.com)</code>）中的URL 。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">My</span> <span class="hljs-selector-tag">favorite</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-tag">engine</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-attr">[Duck Duck Go]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//duckduckgo.com).</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>我最喜欢的搜索引擎是<a href="https://duckduckgo.com/">Duck Duck Go</a>。</p><h3 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h3><p>您可以选择为链接添加标题。当用户将鼠标悬停在链接上时，这将显示为工具提示。要添加标题，请将其括在URL后面的括号中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">My</span> <span class="hljs-selector-tag">favorite</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-tag">engine</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-attr">[Duck Duck Go]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//duckduckgo.com &quot;The best search engine for privacy&quot;).</span><br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>我最喜欢的搜索引擎是<a href="https://duckduckgo.com/">Duck Duck Go</a>。</p><h3 id="网址和电子邮件地址"><a href="#网址和电子邮件地址" class="headerlink" title="网址和电子邮件地址"></a>网址和电子邮件地址</h3><p>要将URL或电子邮件地址快速转换为链接，请将其括在尖括号中。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;https:<span class="hljs-comment">//markdown.p2hp.com&gt;</span><br>&lt;<span class="hljs-symbol">fake@</span>example.com&gt;<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><a href="http://markdown.p2hp.com/index.html">https://markdown.p2hp.com</a><br><a href="mailto:fake@example.com">fake@example.com</a></p><h3 id="格式化链接"><a href="#格式化链接" class="headerlink" title="格式化链接"></a>格式化链接</h3><p>为了<a href="http://markdown.p2hp.com/basic-syntax/index.html#emphasis">强调</a>链接，请在方括号和括号之前和之后添加星号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">I love supporting the <span class="hljs-strong">**[<span class="hljs-string">EFF</span>](<span class="hljs-link">https://eff.org</span>)**</span>.<br>This is the <span class="hljs-emphasis">*[<span class="hljs-string">Markdown Guide</span>](<span class="hljs-link">https://markdown.p2hp.com</span>)*</span>.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>我喜欢支持**<a href="https://eff.org/">EFF</a>*<em>。<br>这是《</em><a href="http://markdown.p2hp.com/index.html">Markdown指南》</a>*。</p><h3 id="参考样式链接"><a href="#参考样式链接" class="headerlink" title="参考样式链接"></a>参考样式链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。引用样式的链接分为两部分：与文本保持内联的部分以及在文件中其他位置存储的部分，以使文本易于阅读。</p><h4 id="格式化链接的第一部分"><a href="#格式化链接的第一部分" class="headerlink" title="格式化链接的第一部分"></a>格式化链接的第一部分</h4><p>参考样式链接的第一部分使用两组括号进行格式化。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p><p>尽管不是必需的，但您可以在第一组和第二组支架之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p><p>这意味着以下示例格式对于链接的第一部分大致相同：</p><ul><li><code>[hobbit-hole][1]</code></li><li><code>[hobbit-hole] [1]</code></li></ul><h4 id="格式化链接的第二部分"><a href="#格式化链接的第二部分" class="headerlink" title="格式化链接的第二部分"></a>格式化链接的第二部分</h4><p>引用样式链接的第二部分使用以下属性设置格式：</p><ol><li>标签放在方括号中，后紧跟冒号和至少一个空格（例如<code>[label]: </code>）。</li><li>链接的URL，您可以选择将其括在尖括号中。</li><li>链接的可选标题，您可以将其括在双引号，单引号或括号中。</li></ol><p>这意味着以下示例格式对于链接的第二部分几乎都是等效的：</p><ul><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &quot;Hobbit lifestyles&quot;</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &#39;Hobbit lifestyles&#39;</code></li><li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &quot;Hobbit lifestyles&quot;</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &#39;Hobbit lifestyles&#39;</code></li><li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; (Hobbit lifestyles)</code></li></ul><p>您可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，而其他人则将它们放在文档的末尾（例如尾注或脚注）。</p><h4 id="将零件放在一起的示例"><a href="#将零件放在一起的示例" class="headerlink" title="将零件放在一起的示例"></a>将零件放在一起的示例</h4><p>假设您添加一个URL作为到段落的<a href="http://markdown.p2hp.com/basic-syntax/index.html#links">标准URL链接</a>，并且在Markdown中看起来像这样：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">In <span class="hljs-keyword">a</span> hole <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> ground there lived <span class="hljs-keyword">a</span> hobbit. Not <span class="hljs-keyword">a</span> nasty, dirty, wet hole, filled <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">ends</span><br><span class="hljs-keyword">of</span> worms <span class="hljs-keyword">and</span> <span class="hljs-keyword">an</span> oozy smell, nor yet <span class="hljs-keyword">a</span> dry, bare, sandy hole <span class="hljs-keyword">with</span> nothing <span class="hljs-keyword">in</span> <span class="hljs-keyword">it</span> <span class="hljs-built_in">to</span> sit down <span class="hljs-keyword">on</span> <span class="hljs-title">or</span> <span class="hljs-title">to</span><br>eat: <span class="hljs-keyword">it</span> was <span class="hljs-keyword">a</span> [hobbit-hole](<span class="hljs-keyword">https</span>://en.wikipedia.org/wiki/Hobbit<span class="hljs-comment">#Lifestyle &quot;Hobbit lifestyles&quot;), and that means comfort.</span><br></code></pre></td></tr></table></figure><p>尽管它可能指向有趣的附加信息，但显示的URL确实不会给现有的原始文本增加太多，除了使其难以阅读之外。要解决此问题，您可以改为设置网址格式：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">In a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole,<span class="hljs-built_in"> filled </span>with the ends<br>of worms<span class="hljs-built_in"> and </span>an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on<span class="hljs-built_in"> or </span>to<br>eat: it was a [hobbit-hole][1],<span class="hljs-built_in"> and </span>that means comfort.<br><br>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit<span class="hljs-comment">#Lifestyle&gt; &quot;Hobbit lifestyles&quot;</span><br></code></pre></td></tr></table></figure><p>在上述两种情况下，呈现的输出将相同：</p><blockquote><p>在地上的一个洞里住着一个霍比特人。这不是一个肮脏，肮脏，潮湿的洞，里面充满蠕虫的末端和难闻的气味，也没有一个干燥，裸露，沙质的洞，里面没有东西可以坐下或进食：那是一个<a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">霍比特洞</a>，意味着舒适。</p></blockquote><p>链接HTML为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;Hobbit lifestyles&quot;</span>&gt;hobbit-hole&lt;/a&gt;<br></code></pre></td></tr></table></figure><h2 id="10、图片"><a href="#10、图片" class="headerlink" title="10、图片"></a>10、图片</h2><p>要添加图像，请添加感叹号（<code>!</code>），然后在括号中添加替代文本，并在括号中添加图像资源的路径或URL。您可以选择在括号中的URL之后添加标题。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">![Philadelphia&#x27;s Magic Gardens. This place was so cool!](/assets/images/philly-magic-gardens.jpg <span class="hljs-string">&quot;Philadelphia&#x27;s Magic Gardens&quot;</span>)<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><img src="https://d33wubrfki0l68.cloudfront.net/eab45e25bb79970178fab7a2d10cba0209372a59/94d9e/assets/images/philly-magic-garden.jpg" alt="费城的魔法花园。 这个地方真酷！"></p><h3 id="链接图像"><a href="#链接图像" class="headerlink" title="链接图像"></a>链接图像</h3><p>要向图像添加链接，请将图像的Markdown括在方括号中，然后在括号中添加链接。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[![An old rock in the desert](/assets/images/shiprock.jpg &quot;Shiprock, New Mexico by Beau Rogers&quot;)](https://www.flickr.com/photos/beaurogers/31833779864/in/photolist-Qv3rFw<span class="hljs-string">-34</span>mt9F-a9Cmfy<span class="hljs-string">-5</span>Ha3Zi<span class="hljs-string">-9</span>msKdv-o3hgjr-hWpUte<span class="hljs-string">-4</span>WMsJ1-KUQ8N-deshUb-vssBD<span class="hljs-string">-6</span>CQci6<span class="hljs-string">-8</span>AFCiD-zsJWT-nNfsgB-dPDwZJ-bn9JGn<span class="hljs-string">-5</span>HtSXY<span class="hljs-string">-6</span>CUhAL-a4UTXB-ugPum-KUPSo-fBLNm<span class="hljs-string">-6</span>CUmpy<span class="hljs-string">-4</span>WMsc9<span class="hljs-string">-8</span>a7D3T<span class="hljs-string">-83</span>KJev<span class="hljs-string">-6</span>CQ2bK-nNusHJ-a78rQH-nw3NvT<span class="hljs-string">-7</span>aq2qf<span class="hljs-string">-8</span>wwBso<span class="hljs-string">-3</span>nNceh-ugSKP<span class="hljs-string">-4</span>mh4kh-bbeeqH-a7biME-q3PtTf-brFpgb-cg38zw-bXMZc-nJPELD-f58Lmo-bXMYG-bz8AAi-bxNtNT-bXMYi-bXMY6-bXMYv)<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p><a href="https://www.flickr.com/photos/beaurogers/31833779864/in/photolist-Qv3rFw-34mt9F-a9Cmfy-5Ha3Zi-9msKdv-o3hgjr-hWpUte-4WMsJ1-KUQ8N-deshUb-vssBD-6CQci6-8AFCiD-zsJWT-nNfsgB-dPDwZJ-bn9JGn-5HtSXY-6CUhAL-a4UTXB-ugPum-KUPSo-fBLNm-6CUmpy-4WMsc9-8a7D3T-83KJev-6CQ2bK-nNusHJ-a78rQH-nw3NvT-7aq2qf-8wwBso-3nNceh-ugSKP-4mh4kh-bbeeqH-a7biME-q3PtTf-brFpgb-cg38zw-bXMZc-nJPELD-f58Lmo-bXMYG-bz8AAi-bxNtNT-bXMYi-bXMY6-bXMYv"><img src="https://d33wubrfki0l68.cloudfront.net/70a143fdf134aacde3740662a2a47a2a1ee0d216/276c9/assets/images/shiprock.jpg" alt="沙漠中的一块老石头"></a></p><h2 id="11、转义字符"><a href="#11、转义字符" class="headerlink" title="11、转义字符"></a>11、转义字符</h2><p>要显示原义字符，否则将用于设置Markdown文档中的文本格式<code>\</code>，请在字符前面添加反斜杠（）。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">\* Without <span class="hljs-keyword">the</span> <span class="hljs-literal">backslash</span>, this would be <span class="hljs-keyword">a</span> bullet <span class="hljs-keyword">in</span> <span class="hljs-keyword">an</span> unordered list.<br></code></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>*如果没有反斜杠，这将是无序列表中的项目符号。</p><h3 id="你可以转义的字符"><a href="#你可以转义的字符" class="headerlink" title="你可以转义的字符"></a>你可以转义的字符</h3><p>您可以使用反斜杠转义以下字符。</p><table><thead><tr><th>字符</th><th>名称</th></tr></thead><tbody><tr><td>\</td><td>反斜杠</td></tr><tr><td>`</td><td>刻度线（另请参见<a href="http://markdown.p2hp.com/basic-syntax/index.html#escaping-tick-marks">转义刻度线中的代码</a>）</td></tr><tr><td>*</td><td>星号</td></tr><tr><td>_</td><td>下划线</td></tr><tr><td>{}</td><td>大括号</td></tr><tr><td>[]</td><td>中括号</td></tr><tr><td>()</td><td>括号</td></tr><tr><td>#</td><td>井号</td></tr><tr><td>+</td><td>加号</td></tr><tr><td>-</td><td>减号（连字符）</td></tr><tr><td>.</td><td>点</td></tr><tr><td>!</td><td>感叹号</td></tr><tr><td>|</td><td>管道（另请参见表中的<a href="http://markdown.p2hp.com/extended-syntax/index.html#escaping-pipe-characters-in-tables">转义管道</a>）</td></tr></tbody></table><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://markdown.p2hp.com/basic-syntax/">文档markdown.p2hp.com/basic-syntax</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPic+七牛云图床</title>
      <link href="/posts/b5c89f8e.html"/>
      <url>/posts/b5c89f8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="注册七牛云"><a href="#注册七牛云" class="headerlink" title="注册七牛云"></a>注册七牛云</h1><h2 id="注册七牛账户"><a href="#注册七牛账户" class="headerlink" title="注册七牛账户"></a>注册七牛账户</h2><p>这点比较简单，直接到 <a href="https://portal.qiniu.com/home">这里</a> 注册即可。</p><h2 id="在七牛中新建空间"><a href="#在七牛中新建空间" class="headerlink" title="在七牛中新建空间"></a>在七牛中新建空间</h2><p>七牛的数据处理是以 <strong>资源</strong> 为单位的，这里我们可以简单理解为七牛中的 <strong>文件夹</strong>。<br>登录七牛后，进入 <a href="https://portal.qiniu.com/kodo/bucket?shouldCreateBucket=true"><strong>添加资源</strong></a> 页面，选择添加 <strong><strong>对象存储Kodo</strong></strong>, 新建空间，默认即可。</p><h2 id="在-iPic-中添加七牛图床"><a href="#在-iPic-中添加七牛图床" class="headerlink" title="在 iPic 中添加七牛图床"></a>在 iPic 中添加七牛图床</h2><p>打开 偏好设置，进入 图床 页，选择添加 七牛。</p><p><img src="https://qiniu.calmchen.com/blog/2022-05-06-ipicqn.png" alt="ipic设置七牛图床"></p><p>以下分别介绍各项的意义及如何配置：</p><p><strong><strong>Bucket</strong></strong><br>七牛创建空间设置的空间名称<br><strong><strong>AccessKey</strong></strong> 与 <strong><strong>SecretKey</strong></strong><br>可以简单理解为七牛的隐身账户和密码<br>进入 个人面板 &gt; 密钥管理页，依次将 AK、SK 中的内容复制到 iPic 对应的 <strong><strong>AccessKey</strong></strong>、<strong><strong>SecretKey</strong></strong> 中</p><p><img src="https://qiniu.calmchen.com/blog/2022-05-06-qnkey.jpg" alt="密钥管理页"></p><p><strong><strong>Http 前缀</strong></strong><br>用于生成上传图片的完成 Http 路径<br><img src="https://qiniu.calmchen.com/blog/2022-05-06-qndomain-1.png"></p><p>完成输入后，可以点击 <strong><strong>验证</strong></strong> 按钮。如果输入没有问题，则右侧会出现 <strong><strong>通过</strong></strong> 链接，点击后就可以看到测试时上传至七牛的图片。<br>最后，点击 <strong><strong>应用</strong></strong> 按钮进行保存。<br>注：本文中的图就是通过上述方式先上传至七牛、再粘贴至 Markdown 编辑器中，确实很方便，大家试试吧</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://toolinbox.net/iPic/">文档toolinbox.net/iPic</a></li><li><a href="https://www.jianshu.com/p/97bf7bbb18ee">在 iPic 中添加七牛云</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 七牛云 </category>
          
          <category> iPic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
            <tag> iPic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Jetbrains IDE破解</title>
      <link href="/posts/ecdab4ad.html"/>
      <url>/posts/ecdab4ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="【转载】Jetbrains-IDE破解"><a href="#【转载】Jetbrains-IDE破解" class="headerlink" title="【转载】Jetbrains IDE破解"></a>【转载】Jetbrains IDE破解</h1><hr><blockquote><p>卸载旧文件配置</p><ul><li><code>cd ~/Library/Caches</code> <strong>IntelliJIdea2021.2</strong></li><li><code>cd Library/Application\ Support/</code> <strong>IntelliJIdea2021.2</strong></li></ul></blockquote><h2 id="一、下载最新的-IDEA-2022-版本安装包"><a href="#一、下载最新的-IDEA-2022-版本安装包" class="headerlink" title="一、下载最新的 IDEA 2022 版本安装包"></a>一、下载最新的 IDEA 2022 版本安装包</h2><p>我们先从 IDEA 官网下载 IDEA 2022 最新版本的安装包，下载链接如下：<br><a href="https://www.jetbrains.com/idea/download">https://www.jetbrains.com/idea/download</a></p><h2 id="二、先卸载老版本的-IDEA"><a href="#二、先卸载老版本的-IDEA" class="headerlink" title="二、先卸载老版本的 IDEA"></a>二、先卸载老版本的 IDEA</h2><h3 id="1、卸载、干净"><a href="#1、卸载、干净" class="headerlink" title="1、卸载、干净"></a>1、卸载、干净</h3><p>如果电脑上之前有安装老版本的 IDEA, 需要先卸载干净，否则可能安装失败！<br>一定要先卸载干净掉老版本的 IDEA。</p><p>出现IDEA卸载界面，全部勾选选择项，表示同时删除配置文件，然后点击Uninstall<br><img src="/img.png"></p><p>卸载成功后，点击关闭</p><h2 id="三、开始安装-IDEA-2022-版本"><a href="#三、开始安装-IDEA-2022-版本" class="headerlink" title="三、开始安装 IDEA 2022 版本"></a>三、开始安装 IDEA 2022 版本</h2><p>安装完成后，勾选 Run IntelliJ IDEA，点击 Finish 运行软件:</p><h2 id="四、开始激活，破解-IDEA-2022-版本"><a href="#四、开始激活，破解-IDEA-2022-版本" class="headerlink" title="四、开始激活，破解 IDEA 2022 版本"></a>四、开始激活，破解 IDEA 2022 版本</h2><p>DEA 运行成功后，会弹出下面的对话框，提示我们需要先登录 JetBrains<br>这里我们先不管，先点击 Exit 退出，准备开始运行激活脚本</p><h2 id="五、清空-IDEA-以前使用过的激活方式和配置文件【非常重要】"><a href="#五、清空-IDEA-以前使用过的激活方式和配置文件【非常重要】" class="headerlink" title="五、清空 IDEA 以前使用过的激活方式和配置文件【非常重要】"></a>五、清空 IDEA 以前使用过的激活方式和配置文件【非常重要】</h2><p>如果你之前安装过 IDEA, 那么修改过的 hosts 文件要还原回去、引用过的补丁要移除掉, 不然可能会与本文提供的补丁有冲突，出现各种奇奇怪怪的问题。</p><p>如果没有动过 hosts 文件，则不用管，继续走下面的步骤。</p><p>删除旧版配置文件<br>在以下目录，删除配置文件</p><p>C:Users【系统用户名】AppDataRoamingJetBrains<br>未安装老版本 IDEA 的小伙伴直接跳过，看后面步骤就行:</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://tech.souyunku.com/?p=15076">转载链接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
          <category> PHP </category>
          
          <category> Goland </category>
          
          <category> 破解 </category>
          
          <category> JAVA </category>
          
          <category> Jetbrains </category>
          
          <category> Goland </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> idea </tag>
            
            <tag> java </tag>
            
            <tag> php </tag>
            
            <tag> goland </tag>
            
            <tag> phpstorm </tag>
            
            <tag> 破解 </tag>
            
            <tag> jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel + Elasticsearch 实现中文搜索</title>
      <link href="/posts/3acc6de0.html"/>
      <url>/posts/3acc6de0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-Elasticsearch-实现中文搜索"><a href="#Laravel-Elasticsearch-实现中文搜索" class="headerlink" title="Laravel + Elasticsearch 实现中文搜索"></a>Laravel + Elasticsearch 实现中文搜索</h1><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ul><li>Laravel7 配置 Scout</li><li>配置 Model 模型</li><li>导入数据</li><li>搜索</li></ul><h3 id="搜索范围"><a href="#搜索范围" class="headerlink" title="搜索范围"></a>搜索范围</h3><ul><li>文章内容</li><li>标题</li><li>标签</li></ul><h3 id="结果权重"><a href="#结果权重" class="headerlink" title="结果权重"></a>结果权重</h3><ol><li>出现关键词数量</li><li>出现关键词次数</li></ol><h3 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h3><ul><li>高亮显示</li><li>分词显示</li><li>结果分页</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Laravel + Elasticsearch 很多前辈都写过教程和案例，但是随着 Elasticsearch 和 laravel 的版本升级 以前的文章很多都不适用新版本的，建议大家使用任何开源项目时应该过一遍文档以当前使用的版本文档为主，教程为辅</p><ul><li>Elasticsearch 7.9</li><li>Laravel 7</li><li>elasticsearch-analysis-ik v7.9</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>ik 中文分词插件</li><li>elasticsearch 官方文档</li></ul><h3 id="使用集成-ik中文分词插件的-Elasticsearch"><a href="#使用集成-ik中文分词插件的-Elasticsearch" class="headerlink" title="使用集成 ik中文分词插件的 Elasticsearch"></a>使用集成 ik中文分词插件的 Elasticsearch</h3><p>Laravel 项目中使用 Elasticsearch</p><p>Elasticsearch 官方有提供 SDK，在 Laravel 项目中可以更加优雅快速的接入 Elasticsearch，Laravel 本身有提供 Scout 全文搜索 的解决方案，我们只需将默认的 Algolia 驱动 替换成 ElasticSearch驱动。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>laravel/scout</li><li>matchish/laravel-scout-elasticsearch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">composer require laravel/scout</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">composer require matchish/laravel-scout-elasticsearch</span><br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>生成 Scout 配置文件 (config/scout.php)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan vendor:publish --provider=&quot;Laravel\Scout\ScoutServiceProvider&quot;<br></code></pre></td></tr></table></figure><p>Copied File [\vendor\laravel\scout\config\scout.php] To [\config\scout.php]<br>Publishing complete.</p><h3 id="指定-Scout-驱动"><a href="#指定-Scout-驱动" class="headerlink" title="指定 Scout 驱动"></a>指定 Scout 驱动</h3><ul><li>第一种：在.env 文件中指定（建议）</li><li>第二种：在 config/scout.php 直接修改默认驱动<br>‘driver’ =&gt; env(‘SCOUT_DRIVER’, ‘algolia’)<br>改为<br>‘driver’ =&gt; env(‘SCOUT_DRIVER’, ‘Matchish\ScoutElasticSearch\Engines\ElasticSearchEngine’)<br>指定 Elasticsearch 服务 IP 端口</li></ul><p>在.env 中配置<br>ELASTICSEARCH_HOST=172.17.0.1:9200<br>注册服务<br>config/app.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;providers&#x27;</span> =&gt; [<br><span class="hljs-comment">// Other Service Providers</span><br><span class="hljs-title class_">\Matchish\ScoutElasticSearch\ElasticSearchServiceProvider</span>::<span class="hljs-variable language_">class</span><br>],<br></code></pre></td></tr></table></figure><p>清除配置缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan config:clear<br></code></pre></td></tr></table></figure><p>至此 laravel 已经接入 Elasticsearch</p><p>实际业务中使用<br>需求</p><p>通过博客右上角的搜索框可以搜索到与关键词相关的文章，从以下几点匹配</p><p>商品名称<br>商品desc</p><p>品牌名称</p><p>品牌desc</p><p>分类名称</p><p>分类desc</p><p>涉及到 3 张 Mysql 表 以及字段</p><p>为文章配置 Elasticsearch 索引<br>创建索引配置文件（config/elasticsearch.php）</p><p>elasticsearch.php 配置字段映射</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-keyword">return</span> [<br>    <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;ELASTICSEARCH_HOST&#x27;</span>),<br>    <span class="hljs-string">&#x27;indices&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;mappings&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;goods&#x27;</span> =&gt; [<br>                <span class="hljs-string">&quot;properties&quot;</span> =&gt; [<br>                    <span class="hljs-string">&quot;goods-name&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                    <span class="hljs-string">&quot;brief&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                    <span class="hljs-string">&quot;brand-name&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                    <span class="hljs-string">&quot;brand-desc&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                    <span class="hljs-string">&quot;category-name&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                    <span class="hljs-string">&quot;category-desc&quot;</span> =&gt; [<br>                        <span class="hljs-string">&quot;type&quot;</span> =&gt; <span class="hljs-string">&quot;text&quot;</span>,<br>                        <span class="hljs-string">&quot;analyzer&quot;</span> =&gt; <span class="hljs-string">&quot;standard&quot;</span>,<br>                    ],<br>                ]<br>            ],<br>        ],<br>        <span class="hljs-string">&#x27;settings&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;default&#x27;</span> =&gt; [<br>                <span class="hljs-string">&#x27;number_of_shards&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&#x27;number_of_replicas&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br>            ],<br>        ],<br>    ],<br><br>];<br></code></pre></td></tr></table></figure><p>analyzer：字段文本的分词器<br>search_analyzer：搜索词的分词器<br>根据具体业务场景选择 (颗粒小占用资源多，一般场景 analyzer 使用 ik_max_word,search_analyzer 使用 ik_smart):<br>ik_max_word：ik 中文分词插件提供，对文本进行最大数量分词<br>laravel天下无敌 -&gt; laravel，天下无敌 , 天下 , 无敌<br>ik_smart: ik 中文分词插件提供，对文本进行最小数量分词<br>laravel天下无敌 -&gt; laravel，天下无敌<br>配置文章模型<br>建议先看一遍 Laravel Scout 使用文档</p><p>引入 Laravel Scout</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Models</span>\<span class="hljs-title class_">Goods</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">BaseModel</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Factories</span>\<span class="hljs-title">HasFactory</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\<span class="hljs-title">Scout</span>\<span class="hljs-title">Searchable</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseModel</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">HasFactory</span>, <span class="hljs-title">Searchable</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;goods&#x27;</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$fillable</span> = [];<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$casts</span> = [<br>        <span class="hljs-string">&#x27;counter_price&#x27;</span> =&gt; <span class="hljs-string">&#x27;float&#x27;</span>,<br>        <span class="hljs-string">&#x27;retail_price&#x27;</span> =&gt; <span class="hljs-string">&#x27;float&#x27;</span>,<br>        <span class="hljs-string">&#x27;is_hot&#x27;</span> =&gt; <span class="hljs-string">&#x27;boolean&#x27;</span>,<br>        <span class="hljs-string">&#x27;is_new&#x27;</span> =&gt; <span class="hljs-string">&#x27;boolean&#x27;</span>,<br>        <span class="hljs-string">&#x27;gallery&#x27;</span> =&gt; <span class="hljs-string">&#x27;array&#x27;</span>,<br>        <span class="hljs-string">&#x27;isOnSale&#x27;</span> =&gt; <span class="hljs-string">&#x27;boolean&#x27;</span>,<br><br>    ];<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchableAs</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;goods&#x27;</span>;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置导入索引的数据字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSearchableArray</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-string">&#x27;goods-name&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;name,<br>            <span class="hljs-string">&#x27;brief&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;brief,<br>            <span class="hljs-string">&#x27;brand-name&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;brand-&gt;name ?? <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;brand-desc&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;brand-&gt;desc ?? <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;category-name&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;category-&gt;name ?? <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;category-desc&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;category-&gt;desc ?? <span class="hljs-string">&#x27;&#x27;</span>,<br>        ];<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定 搜索索引中存储的唯一ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScoutKey</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定 搜索索引中存储的唯一ID的键名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScoutKeyName</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;id&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">category</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasOne</span>(<span class="hljs-title class_">Category</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;category_id&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">brand</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasOne</span>(<span class="hljs-title class_">Brand</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;brand_id&#x27;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 一键自动导入: </span><br>$ php artisan scout:import<br><span class="hljs-comment"># 导入指定模型: </span><br>$ php artisan scout:import <span class="hljs-variable">$&#123;model&#125;</span><br>$ php artisan scout:import <span class="hljs-string">&quot;App\Models\Blog\Article&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Importing [App\Models\Goods\Goods]<br>Switching to the new index<br>5/5 [⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬⚬] 100%<br><br>                                                                                                                        <br> [OK] All [App\Models\Goods\Goods] records have been imported.<br><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>\<span class="hljs-title">Wx</span>\<span class="hljs-title">WxController</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">Goods</span>\<span class="hljs-title">Goods</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WxController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$only</span> = [];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$search</span> = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&#x27;search&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-variable">$startTime</span> = <span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_ invoke__">now</span>()-&gt;<span class="hljs-title function_ invoke__">getPreciseTimestamp</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-variable">$goods</span> = <span class="hljs-title class_">Goods</span>::<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-variable">$search</span>)<br>            -&gt;<span class="hljs-title function_ invoke__">query</span>(function (<span class="hljs-variable">$query</span>) &#123;<br>                <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">select</span>([<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;brand_id&#x27;</span>, <span class="hljs-string">&#x27;category_id&#x27;</span>, <span class="hljs-string">&#x27;brief&#x27;</span>]);<br>            &#125;)<br>            -&gt;<span class="hljs-title function_ invoke__">get</span>();<br>        <span class="hljs-variable">$userTime</span> = <span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_ invoke__">now</span>()-&gt;<span class="hljs-title function_ invoke__">getPreciseTimestamp</span>(<span class="hljs-number">3</span>) - <span class="hljs-variable">$startTime</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;耗时(毫秒)：<span class="hljs-subst">&#123;$userTime&#125;</span> \n&quot;</span>;<br>        <span class="hljs-comment">//content在另外一张表中，方便观察测试 这里输出</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$goods</span>)) &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$goods</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-variable">$good</span>) &#123;<br>                <span class="hljs-variable">$brand</span> = <span class="hljs-variable">$good</span>-&gt;brand;<br>                <span class="hljs-variable">$category</span> = <span class="hljs-variable">$good</span>-&gt;category;<br>                <span class="hljs-variable">$good</span>[<span class="hljs-string">&#x27;brand_name&#x27;</span>] = <span class="hljs-variable">$brand</span>-&gt;name ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>                <span class="hljs-variable">$good</span>[<span class="hljs-string">&#x27;brand_desc&#x27;</span>] = <span class="hljs-variable">$brand</span>-&gt;desc ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>                <span class="hljs-variable">$good</span>[<span class="hljs-string">&#x27;category_name&#x27;</span>] = <span class="hljs-variable">$category</span>-&gt;name ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>                <span class="hljs-variable">$good</span>[<span class="hljs-string">&#x27;category_desc&#x27;</span>] = <span class="hljs-variable">$category</span>-&gt;desc ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$good</span>-&gt;brand);<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$good</span>-&gt;category);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-variable">$goods</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>$client 官方 elasticsearch/elasticsearch package</li><li>$body ongr/elasticsearch-dsl package</li></ul>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK部署Linux</title>
      <link href="/posts/7616fb11.html"/>
      <url>/posts/7616fb11.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-elasticsearch简介"><a href="#1-elasticsearch简介" class="headerlink" title="1. elasticsearch简介"></a><strong>1. elasticsearch简介</strong></h2><blockquote><p>elasticsearch介绍</p></blockquote><p>Elasticsearch 是一个分布式、高扩展、高实时的搜索与数据分析引擎。它能很方便的使大量数据具有搜索、分析和探索的能力。充分利用Elasticsearch的水平伸缩性，能使数据在生产环境变得更有价值。Elasticsearch 的实现原理主要分为以下几个步骤，首先用户将数据提交到Elasticsearch 数据库中，再通过分词控制器去将对应的语句分词，将其权重和分词结果一并存入数据，当用户搜索数据时候，再根据权重将结果排名，打分，再将返回结果呈现给用户。</p><blockquote><p>应用场景</p></blockquote><ul><li>维基百科，类似百度百科</li><li>The Guardian（国外新闻网站）</li><li>Stack Overflow（国外的程序异常讨论论坛）</li><li>GitHub（开源代码管理）</li><li>电商网站</li><li>日志数据分析</li><li>商品价格监控网站</li><li>BI系统，商业智能</li><li>站内搜索（电商，招聘，门户，等等），</li><li>IT系统搜索（OA，CRM，ERP，等等），</li><li>数据分析（ES热门的一个使用场景）</li></ul><blockquote><p>es的功能</p></blockquote><ul><li>分布式的搜索引擎和数据分析引擎</li><li>全文检索，结构化检索，数据分析</li><li>对海量数据进行近实时的处理</li></ul><blockquote><p>es的特点</p></blockquote><ol><li>大型分布式集群</li><li>功能强大</li><li>部署简单</li><li>能够替代数据库的不足之处</li></ol><h2 id="2-elasticsearch的安装配置"><a href="#2-elasticsearch的安装配置" class="headerlink" title="2. elasticsearch的安装配置"></a><strong>2. elasticsearch的安装配置</strong></h2><ol><li>docker获取es的镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><ol><li>创建es文件目录以及创建配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /docker<br><span class="hljs-built_in">mkdir</span> /docker/es<br><span class="hljs-built_in">mkdir</span> /docker/es/conf<br><span class="hljs-built_in">mkdir</span> /docker/es/data<br><span class="hljs-built_in">mkdir</span> /docker/es/plugins<br><span class="hljs-built_in">chmod</span> -R 777 /docker/es<br><br><span class="hljs-built_in">touch</span> /docker/es/conf/elasticsearch.yml<br><br>cluster.name: my-application       <span class="hljs-comment">#集群名称</span><br>node.name: node-1                  <span class="hljs-comment">#节点名称</span><br><span class="hljs-comment">#数据和日志的存储目录</span><br>path.data: /usr/share/elasticsearch/data<br>path.logs: /usr/share/elasticsearch/logs<br><span class="hljs-comment">###设置绑定的ip，设置为0.0.0.0以后就可以让任何计算机节点访问到了</span><br>network.host: 0.0.0.0<br>http.port: 9200 <span class="hljs-comment">#端口</span><br><span class="hljs-comment">###设置在集群中的所有节点名称，这个节点名称就是之前所修改的，当然你也可以采用默认的也行，目前 是单机，放入一个节点即可</span><br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;node-1&quot;</span>]<br><span class="hljs-comment">### 设置密码</span><br><span class="hljs-comment">#xpack.security.enabled: true</span><br><span class="hljs-comment">#xpack.license.self_generated.type: basic</span><br><span class="hljs-comment">#xpack.security.transport.ssl.enabled: true</span><br><br><span class="hljs-comment"># 配置X-Pack</span><br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-comment">#http.cors.allow-headers: Authorization</span><br><br></code></pre></td></tr></table></figure><ol><li>构建容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 9200:9200 -d --name es -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span> -v /docker/es/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /docker/es/data:/usr/share/elasticsearch/data -v /docker/es/logs:/usr/share/elasticsearch/logs -v /docker/es/plugins:/usr/share/elasticsearch/plugins --privileged=<span class="hljs-literal">true</span> elasticsearch:7.12.<br><br>出现异常：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>解决：<br>1. 修改配置sysctl.conf<br>vi /etc/sysctl.conf<br><br>2. 在尾行添加以下内容<br>vm.max_map_count=655300<br><br>3. 执行命令<br>sysctl -p<br></code></pre></td></tr></table></figure><ol><li>拉取kibana镜像</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull kibana:<span class="hljs-number">7</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><ol><li>kibana的配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /docker/kibana<br><span class="hljs-built_in">mkdir</span> /docker/kibana/conf<br><span class="hljs-built_in">touch</span> /docker/kibana/conf/kibana.yml<br><br>文件内容：<br>server.name: kibana<br>server.host: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>elasticsearch.hosts: [<span class="hljs-string">&quot;http://你的es地址:9200&quot;</span>]<br>xpack.monitoring.ui.container.elasticsearch.enabled: <span class="hljs-literal">true</span><br><span class="hljs-comment">#冒号后必须加空格  设置中文</span><br>i18n.locale: <span class="hljs-string">&quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure><ol><li>构建kibana的容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 5601:5601 -d --name kibana -v /docker/kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml --privileged=<span class="hljs-literal">true</span> kibana:7.12.1<br></code></pre></td></tr></table></figure><p>访问xxxxxxx:9200与xxxxx:5601</p><p>kibana：</p><p><img src="https://qiniu.calmchen.com/blog/2022-05-06-kibana_success.png" alt="kibana部署成功截图"><br>elasticsearch:</p><p><img src="https://qiniu.calmchen.com/blog/2022-05-06-elasticsearch_success.png" alt="elasticsearch部署成功截图"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
